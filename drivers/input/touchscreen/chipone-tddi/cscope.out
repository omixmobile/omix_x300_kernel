cscope 15 /mnt/d/git/tddi/linux_driver/chipone-tddi               0000466983
	@cts_builtin_firmware.h

1 
u8
 
	gi˙l9911_drivî_buûtö_fúmw¨e
[] = {

5 c⁄° 
˘s_fúmw¨e
 
	g˘s_drivî_buûtö_fúmw¨es
[] = {

7 .
«me
 = "OEM-Project",

8 .
	ghwid
 = 
CTS_DEV_HWID_ICNL9911
,

9 .
	gfwid
 = 
CTS_DEV_FWID_ICNL9911
,

10 .
	gd©a
 = 
i˙l9911_drivî_buûtö_fúmw¨e
,

11 .
	gsize
 = 
ARRAY_SIZE
(
i˙l9911_drivî_buûtö_fúmw¨e
),

	@cts_charger_detect.c

1 
	#LOG_TAG
 "Ch¨gî"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_sysfs.h
"

8 #ifde‡
CONFIG_CTS_CHARGER_DETECT


10 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

20 
	$m©ch_°rög
(c⁄° * c⁄° *
¨øy
, 
size_t
 
n
, c⁄° *
°rög
)

22 
ödex
;

23 c⁄° *
ôem
;

25 
ödex
 = 0; index < 
n
; index++) {

26 
ôem
 = 
¨øy
[
ödex
];

27 i‡(!
ôem
)

29 i‡(!
	`°rcmp
(
ôem
, 
°rög
))

30  
ödex
;

33  -
EINVAL
;

34 
	}
}

37 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4,1,0)

38 
	#CFG_CTS_CHARGER_DETECT_PSY_NOTIFY


	)

40 
	#CFG_CTS_CHARGER_DETECT_PSY_POLL


	)

42 
	~<löux/powî_suµly.h
>

43 
	~<löux/nŸifõr.h
>

45 
	e˘s_ch¨gî_dëe˘_ty≥
 {

46 
	mCTS_CHGR_DET_TYPE_NONE
 = 0,

47 
	mCTS_CHGR_DET_TYPE_PSY_NOTIFY
,

48 
	mCTS_CHGR_DET_TYPE_POLL_PSP
,

49 
	mCTS_CHGR_DET_TYPE_MAX


56 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_NOTIFY


57 
	#CFG_CTS_DEF_CHGR_DET_TYPE
 
CTS_CHGR_DET_TYPE_PSY_NOTIFY


	)

59 
	#CFG_CTS_DEF_CHGR_DET_TYPE
 
CTS_CHGR_DET_TYPE_POLL_PSP


	)

62 
	#CFG_CTS_DEF_CHGR_DET_PSY_NAME
 "usb"

	)

63 
	#CFG_CTS_DEF_CHGR_DET_PSY_PROP
 
POWER_SUPPLY_PROP_ONLINE


	)

64 
	#CFG_CTS_DEF_CHGR_DET_PSP_POLL_INTERVAL
 2000u

	)

66 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(4,1,0)

68 
	#POWER_SUPPLY_GET_PROPERTY
(
psy
, 
p•
, 
vÆ
) \

69 
	`powî_suµly_gë_¥›îty
(
psy
, 
p•
, 
vÆ
)

	)

70 
	#POWER_SUPPLY_NAME
(
psy
Ë(’sy)->
desc
->
«me
)

	)

72 
	#POWER_SUPPLY_GET_PROPERTY
(
psy
, 
p•
, 
vÆ
) \

73 
psy
->
	`gë_¥›îty
’sy, 
p•
, 
vÆ
)

	)

74 
	#POWER_SUPPLY_NAME
(
psy
Ë(’sy)->
«me
)

	)

77 
	s˘s_ch¨gî_dëe˘_d©a
 {

78 
boﬁ
 
	míabÀ
;

79 
boﬁ
 
	mru¬ög
;

80 
boﬁ
 
	m°©e
;

83 
˘s_ch¨gî_dëe˘_ty≥
 
	mty≥
;

84 c⁄° *
	mpsy_«me
;

85 
powî_suµly_¥›îty
 
	mp•
;

86 
u32
 
	mp•_pﬁl_öãrvÆ
;

89 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_NOTIFY


90 
boﬁ
 
	mnŸifõr_ªgi°îed
;

91 
nŸifõr_block
 
	mpsy_nŸifõr
;

94 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_POLL


96 
dñayed_w‹k
 
	mp•_pﬁl_w‹k
;

99 
w‹k_°ru˘
 
	m£t_ch¨gî_°©e_w‹k
;

101 #ifde‡
CONFIG_CTS_SYSFS


102 
boﬁ
 
	msysfs_©å_group_¸óãd
;

105 
chù⁄e_ts_d©a
 *
	m˘s_d©a
;

109 
	#POWER_SUPPLY_PROP_PREFIX
 "POWER_SUPPLY_PROP_"

	)

110 
	#POWER_SUPPLY_PROP_TOKEN
(
¥›îty
) \

111 {.
¥›
 = 
POWER_SUPPLY_PROP_
 ##
¥›îty
, \

112 .
«me
 = 
POWER_SUPPLY_PROP_PREFIX
 #¥›îty}

	)

115 
powî_suµly_¥›îty
 
	m¥›
;

116 c⁄° *
	m«me
;

117 } 
	gpowî_suµly_¥›_tokí
 [] = {

118 
POWER_SUPPLY_PROP_TOKEN
(
STATUS
),

119 
POWER_SUPPLY_PROP_TOKEN
(
PRESENT
),

120 
POWER_SUPPLY_PROP_TOKEN
(
ONLINE
),

123 c⁄° *
	$powî_suµly_¥›_°r
(
powî_suµly_¥›îty
 
¥›
)

125 
i
;

127 
i
 = 0; i < (
powî_suµly_¥›_tokí
); i++) {

128 i‡(
¥›
 =
powî_suµly_¥›_tokí
[
i
].prop) {

129  
powî_suµly_¥›_tokí
[
i
].
«me
;

134 
	}
}

136 
powî_suµly_¥›îty
 
	$powî_suµly_¥›_‰om_«me
(c⁄° *
«me
)

138 
size_t
 
off£t
 = 
	`°æí
(
POWER_SUPPLY_PROP_PREFIX
);

139 
i
;

141 
i
 = 0; i < 
	`ARRAY_SIZE
(
powî_suµly_¥›_tokí
); i++) {

142 i‡(
	`°rˇ£cmp
(
powî_suµly_¥›_tokí
[
i
].
«me
 + 
off£t
,Çame) == 0 ||

143 
	`°rˇ£cmp
(
powî_suµly_¥›_tokí
[
i
].
«me
,Çame) == 0) {

144  
powî_suµly_¥›_tokí
[
i
].
¥›
;

148  -
ENOENT
;

149 
	}
}

151 c⁄° *
	gch¨gî_dëe˘_ty≥_ãxt
[] = {

155 c⁄° *
	$ch¨gî_dëe˘_ty≥_°r
(
˘s_ch¨gî_dëe˘_ty≥
 
ty≥
)

157  
ty≥
 < 
	`ARRAY_SIZE
(
ch¨gî_dëe˘_ty≥_ãxt
) ?

158 
ch¨gî_dëe˘_ty≥_ãxt
[
ty≥
] : "Unknown";

159 
	}
}

161 
	$∑r£_ch¨gî_dëe˘_dt
(
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
,

162 
devi˚_node
 *
≈
)

164 c⁄° *
psy_«me
;

165 c⁄° *
ty≥_°r
;

166 c⁄° *
p•_°r
;

167 
ªt
;

169 
	`˘s_öfo
("Parse dt");

171 #ifde‡
CFG_CTS_DEF_CHGR_DET_ENABLE


172 
cd_d©a
->
íabÀ
 = 
åue
;

174 
cd_d©a
->
íabÀ
 =

175 
	`of_¥›îty_ªad_boﬁ
(
≈
, "chipone,touch-charger-detect-enable");

178 
cd_d©a
->
ty≥
 = 
CFG_CTS_DEF_CHGR_DET_TYPE
;

179 
ªt
 = 
	`of_¥›îty_ªad_°rög
(
≈
,

180 "chù⁄e,touch-ch¨gî-dëe˘-ty≥", &
ty≥_°r
);

181 i‡(
ªt
) {

182 
	`˘s_w¨n
("P¨£ dëe˘Åy≥ faûed %d", 
ªt
);

184 
ty≥
 = 
	`m©ch_°rög
(
ch¨gî_dëe˘_ty≥_ãxt
,

185 
	`ARRAY_SIZE
(
ch¨gî_dëe˘_ty≥_ãxt
), 
ty≥_°r
);

186 i‡(
ty≥
 < 0) {

187 
	`˘s_îr
("P¨£ dëe˘Åy≥ '%s' invÆid", 
ty≥_°r
);

189 
cd_d©a
->
ty≥
 =Åype;

193 
ªt
 = 
	`of_¥›îty_ªad_°rög
(
≈
,

194 "chù⁄e,touch-ch¨gî-dëe˘-psy-«me", &
psy_«me
);

195 i‡(
ªt
) {

196 
	`˘s_w¨n
("P¨£ dëe˘ÖsyÇamêÁûed %d", 
ªt
);

197 
psy_«me
 = 
CFG_CTS_DEF_CHGR_DET_PSY_NAME
;

199 i‡(
	`powî_suµly_gë_by_«me
(
psy_«me
Ë=
NULL
) {

200 
	`˘s_w¨n
("Powî suµly '%s'ÇŸ found", 
psy_«me
);

201 
psy_«me
 = 
CFG_CTS_DEF_CHGR_DET_PSY_NAME
;

204 
cd_d©a
->
psy_«me
 = 
	`k°rdup
’sy_«me, 
GFP_KERNEL
);

205 i‡(
cd_d©a
->
psy_«me
 =
NULL
) {

206 
	`˘s_îr
("Alloc mem forÖsyÇame failed");

207  -
ENOMEM
;

210 
cd_d©a
->
p•
 = 
CFG_CTS_DEF_CHGR_DET_PSY_PROP
;

211 
ªt
 = 
	`of_¥›îty_ªad_°rög
(
≈
,

212 "chù⁄e,touch-ch¨gî-dëe˘-p•", &
p•_°r
);

213 i‡(
ªt
) {

214 
	`˘s_w¨n
("P¨£ dëe˘Ö• faûed %d", 
ªt
);

216 
powî_suµly
 *
psy
;

217 
powî_suµly_¥›îty
 
p•
;

218 
powî_suµly_¥›vÆ
 
vÆ
;

220 
p•
 = 
	`powî_suµly_¥›_‰om_«me
(
p•_°r
);

221 i‡(
p•
 < 0) {

222 
	`˘s_w¨n
("Parse detectÖsp: '%s' invalid",

223 
p•_°r
);

225 
psy
 = 
	`powî_suµly_gë_by_«me
(
cd_d©a
->
psy_«me
);

226 i‡(
psy
 !
NULL
 &&

227 
	`POWER_SUPPLY_GET_PROPERTY
(
psy
, 
p•
, &
vÆ
) >=0) {

228 
	`˘s_îr
("Parse detectÖsp invalid");

230 
cd_d©a
->
p•
 =Ösp;

235 
cd_d©a
->
p•_pﬁl_öãrvÆ
 = 
CFG_CTS_DEF_CHGR_DET_PSP_POLL_INTERVAL
;

236 
ªt
 = 
	`of_¥›îty_ªad_u32
(
≈
,

238 &
cd_d©a
->
p•_pﬁl_öãrvÆ
);

239 i‡(
ªt
) {

240 
	`˘s_w¨n
("P¨£ dëe˘Ö•Öﬁ»öãrvÆ faûed %d", 
ªt
);

244 
	}
}

246 
	$°¨t_ch¨gî_dëe˘
(
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
)

248 i‡(!
cd_d©a
->
íabÀ
) {

249 
	`˘s_w¨n
("Start detect while NOTÉnabled");

250  -
EINVAL
;

253 i‡(
cd_d©a
->
ru¬ög
) {

254 
	`˘s_w¨n
("Start detect whileálready RUNNING");

258 
	`˘s_öfo
("Start detectÅype: %d(%s)",

259 
cd_d©a
->
ty≥
, 
	`ch¨gî_dëe˘_ty≥_°r
(cd_data->type));

261 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_NOTIFY


262 if(
cd_d©a
->
ty≥
 =
CTS_CHGR_DET_TYPE_PSY_NOTIFY
) {

263 
ªt
 = 
	`powî_suµly_ªg_nŸifõr
(&
cd_d©a
->
psy_nŸifõr
);

264 i‡(
ªt
) {

265 
	`˘s_îr
("Regi°îÇŸifõ∏Áûed: %d", 
ªt
);

266  
ªt
;

268 
cd_d©a
->
nŸifõr_ªgi°îed
 = 
åue
;

270 
cd_d©a
->
ru¬ög
 = 
åue
;

276 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_POLL


277 if(
cd_d©a
->
ty≥
 =
CTS_CHGR_DET_TYPE_POLL_PSP
) {

278 i‡(!
	`queue_dñayed_w‹k
(
cd_d©a
->
˘s_d©a
->
w‹kqueue
,

279 &
cd_d©a
->
p•_pﬁl_w‹k
,

280 
	`m£cs_to_jiffõs
(
cd_d©a
->
p•_pﬁl_öãrvÆ
))) {

281 
	`˘s_w¨n
("Queue detect work whileálready onÅhe queue");

283 
cd_d©a
->
ru¬ög
 = 
åue
;

289  -
ENOTSUPP
;

290 
	}
}

292 
	$°›_ch¨gî_dëe˘
(
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
)

294 i‡(!
cd_d©a
->
ru¬ög
) {

295 
	`˘s_w¨n
("Stop detect while NOTÑunning");

299 
	`˘s_öfo
("Stop detectÅype: %d(%s)",

300 
cd_d©a
->
ty≥
, 
	`ch¨gî_dëe˘_ty≥_°r
(cd_data->type));

302 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_NOTIFY


303 if(
cd_d©a
->
ty≥
 =
CTS_CHGR_DET_TYPE_PSY_NOTIFY
) {

304 i‡(
cd_d©a
->
nŸifõr_ªgi°îed
) {

305 
	`powî_suµly_uƒeg_nŸifõr
(&
cd_d©a
->
psy_nŸifõr
);

306 
cd_d©a
->
nŸifõr_ªgi°îed
 = 
Ál£
;

308 
cd_d©a
->
ru¬ög
 = 
Ál£
;

314 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_POLL


315 if(
cd_d©a
->
ty≥
 =
CTS_CHGR_DET_TYPE_POLL_PSP
) {

316 i‡(!
	`ˇn˚l_dñayed_w‹k_sync
(&
cd_d©a
->
p•_pﬁl_w‹k
)) {

317 
	`˘s_w¨n
("CancelÖollÖsp work while NOTÖending");

319 
cd_d©a
->
ru¬ög
 = 
Ál£
;

326 
	}
}

328 
	$gë_ch¨gî_°©e
(
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
)

330 
powî_suµly
 *
psy
;

331 
powî_suµly_¥›vÆ
 
¥›vÆ
;

332 
ªt
;

334 
	`˘s_dbg
("Get state fromÖsy: '%s'Örop: %d(%s)",

335 
cd_d©a
->
psy_«me
, cd_d©a->
p•
,

336 
	`powî_suµly_¥›_°r
(
cd_d©a
->
p•
));

338 i‡(
cd_d©a
->
psy_«me
 =
NULL
 ||

339 (
psy
 = 
	`powî_suµly_gë_by_«me
(
cd_d©a
->
psy_«me
)Ë=
NULL
) {

340 
	`˘s_îr
("Get state fromÖsy: '%s'Çot found",

341 
cd_d©a
->
psy_«me
);

342  -
EINVAL
;

345 
ªt
 = 
	`POWER_SUPPLY_GET_PROPERTY
(
psy
, 
cd_d©a
->
p•
, &
¥›vÆ
);

346 i‡(
ªt
 < 0) {

347 
	`˘s_îr
("Get state fromÖsy: '%s'Örop: %d(%s) failed",

348 
cd_d©a
->
psy_«me
, cd_d©a->
p•
,

349 
	`powî_suµly_¥›_°r
(
cd_d©a
->
p•
));

350  -
EINVAL
;

354 
cd_d©a
->
°©e
 = !!
¥›vÆ
.
ötvÆ
;

356 
	`˘s_dbg
("Sèã: %s", 
cd_d©a
->
°©e
 ? "ATTACHED" : "DETACHED");

359 
	}
}

361 
	$£t_dev_ch¨gî_°©e_w‹k
(
w‹k_°ru˘
 *
w‹k
)

363 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
;

364 
ªt
;

366 
cd_d©a
 = 
	`c⁄èöî_of
(
w‹k
, 
˘s_ch¨gî_dëe˘_d©a
,

367 
£t_ch¨gî_°©e_w‹k
);

369 
	`˘s_lock_devi˚
(&
cd_d©a
->
˘s_d©a
->
˘s_dev
);

370 
ªt
 = 
	`˘s_£t_dev_ch¨gî_©èched
(&
cd_d©a
->
˘s_d©a
->
˘s_dev
,

371 
cd_d©a
->
°©e
);

372 
	`˘s_u∆ock_devi˚
(&
cd_d©a
->
˘s_d©a
->
˘s_dev
);

373 i‡(
ªt
) {

374 
	`˘s_îr
("Set dev chargeráttachedÅo %s failed %d",

375 
cd_d©a
->
°©e
 ? "ATTACHED" : "DETATCHED", 
ªt
);

377 
cd_d©a
->
°©e
 = !cd_data->state;

379 
	}
}

381 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_NOTIFY


382 
	$psy_nŸify_ˇŒback
(
nŸifõr_block
 *
nb
,

383 
a˘i⁄
, *
d©a
)

385 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
;

386 
powî_suµly
 *
psy
;

387 
boﬁ
 
¥ev_°©e
;

388 
ªt
;

390 i‡(
nb
 =
NULL
 || 
d©a
 == NULL) {

391 
	`˘s_îr
("PSYÇotify withÇotifier(%p) or data(%p) = NULL",

392 
nb
, 
d©a
);

393  
NOTIFY_DONE
;

396 i‡(
a˘i⁄
 !
PSY_EVENT_PROP_CHANGED
) {

397 
	`˘s_dbg
("NŸifyÉvíà%ldÇŸ c¨e", 
a˘i⁄
);

398  
NOTIFY_DONE
;

401 
cd_d©a
 =

402 
	`c⁄èöî_of
(
nb
, 
˘s_ch¨gî_dëe˘_d©a
, 
psy_nŸifõr
);

404 
psy
 = (
powî_suµly
 *)
d©a
;

405 i‡(
	`°rcmp
(
	`POWER_SUPPLY_NAME
(
psy
), 
cd_d©a
->
psy_«me
) != 0) {

406 
	`˘s_dbg
("Notify fromÖower supply '%s'Çot care",

407 
	`POWER_SUPPLY_NAME
(
psy
));

408  
NOTIFY_DONE
;

411 
¥ev_°©e
 = 
cd_d©a
->
°©e
;

413 
ªt
 = 
	`gë_ch¨gî_°©e
(
cd_d©a
);

414 i‡(
ªt
 < 0) {

415 
	`˘s_îr
("Gë sèã faûed %d", 
ªt
);

416  
NOTIFY_DONE
;

419 
	`˘s_öfo
("State changed: %s -> %s",

420 
¥ev_°©e
 ? "ATTACHED" : "DETACHED",

421 
cd_d©a
->
°©e
 ? "ATTACHED" : "DETACHED");

423 i‡(!
	`queue_w‹k
(
cd_d©a
->
˘s_d©a
->
w‹kqueue
,

424 &
cd_d©a
->
£t_ch¨gî_°©e_w‹k
)) {

425 
	`˘s_w¨n
("Set device charger state work is PENDING");

428  
NOTIFY_OK
;

429 
	}
}

432 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_POLL


433 
	$pﬁl_p•_w‹k
(
w‹k_°ru˘
 *
w‹k
)

435 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
;

436 
boﬁ
 
¥ev_°©e
;

437 
ªt
;

439 
	`˘s_dbg
("PollÖsp work");

441 
cd_d©a
 = 
	`c⁄èöî_of
(
	`to_dñayed_w‹k
(
w‹k
),

442 
˘s_ch¨gî_dëe˘_d©a
, 
p•_pﬁl_w‹k
);

444 
¥ev_°©e
 = 
cd_d©a
->
°©e
;

446 
ªt
 = 
	`gë_ch¨gî_°©e
(
cd_d©a
);

447 i‡(
ªt
 < 0) {

448 
	`˘s_îr
("Gë sèã faûed %d", 
ªt
);

450 i‡(
cd_d©a
->
°©e
 !
¥ev_°©e
) {

451 
	`˘s_öfo
("State changed: %s -> %s",

452 
¥ev_°©e
 ? "ATTACHED" : "DETACHED",

453 
cd_d©a
->
°©e
 ? "ATTACHED" : "DETACHED");

455 i‡(!
	`queue_w‹k
(
cd_d©a
->
˘s_d©a
->
w‹kqueue
,

456 &
cd_d©a
->
£t_ch¨gî_°©e_w‹k
)) {

457 
	`˘s_w¨n
("Set device charger state work is PENDING");

462 i‡(!
	`queue_dñayed_w‹k
(
cd_d©a
->
˘s_d©a
->
w‹kqueue
,

463 &
cd_d©a
->
p•_pﬁl_w‹k
,

464 
	`m£cs_to_jiffõs
(
cd_d©a
->
p•_pﬁl_öãrvÆ
))) {

465 
	`˘s_w¨n
("Queue detect work whileálready onÅhe queue");

467 
	}
}

470 
	$öô_ch¨gî_dëe˘
(
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
)

472 
ªt
;

474 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_NOTIFY


475 
cd_d©a
->
psy_nŸifõr
.
nŸifõr_ˇŒ
 = 
psy_nŸify_ˇŒback
;

478 #ifde‡
CFG_CTS_CHARGER_DETECT_PSY_POLL


479 
	`INIT_DELAYED_WORK
(&
cd_d©a
->
p•_pﬁl_w‹k
, 
pﬁl_p•_w‹k
);

482 
	`INIT_WORK
(&
cd_d©a
->
£t_ch¨gî_°©e_w‹k
, 
£t_dev_ch¨gî_°©e_w‹k
);

484 
ªt
 = 
	`gë_ch¨gî_°©e
(
cd_d©a
);

485 i‡(
ªt
) {

486 
	`˘s_îr
("Gë sèã faûed %d", 
ªt
);

490 
	}
}

493 #ifde‡
CONFIG_CTS_SYSFS


494 
¨gc
;

495 *
¨gv
[];

496 
∑r£_¨g
(c⁄° *
buf
, 
size_t
 
cou¡
);

498 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,6,0)

509 
	$k°πoboﬁ
(c⁄° *
s
, 
boﬁ
 *
ªs
)

511 i‡(!
s
)

512  -
EINVAL
;

514 
s
[0]) {

518 *
ªs
 = 
åue
;

523 *
ªs
 = 
Ál£
;

527 
s
[1]) {

530 *
ªs
 = 
åue
;

534 *
ªs
 = 
Ál£
;

543  -
EINVAL
;

544 
	}
}

547 
	#CHARGER_DET_SYSFS_GROUP_NAME
 "ch¨gî-dë"

	)

549 
	$íabÀ_ch¨gî_dëe˘
(
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
)

551 
	`˘s_öfo
("Enable detectÅype: %d(%s)",

552 
cd_d©a
->
ty≥
, 
	`ch¨gî_dëe˘_ty≥_°r
(cd_data->type));

554 
cd_d©a
->
íabÀ
 = 
åue
;

557 
	}
}

559 
	$dißbÀ_ch¨gî_dëe˘
(
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
)

561 
ªt
;

563 
	`˘s_öfo
("Disable detectÅype: %d(%s)",

564 
cd_d©a
->
ty≥
, 
	`ch¨gî_dëe˘_ty≥_°r
(cd_data->type));

566 
ªt
 = 
	`°›_ch¨gî_dëe˘
(
cd_d©a
);

567 i‡(
ªt
) {

568 
	`˘s_îr
("DißbÀ dëe˘ faûed %d", 
ªt
);

571 
cd_d©a
->
íabÀ
 = 
Ál£
;

574 
	}
}

576 
ssize_t
 
	$ch¨gî_dëe˘_íabÀ_show
(
devi˚
 *
dev
,

577 
devi˚_©åibuã
 *
©å
, *
buf
)

579 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

580 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

582 
	`˘s_öfo
("Ród sysf†'"
CHARGER_DET_SYSFS_GROUP_NAME
"/%s'",

583 
©å
->©å.
«me
);

585  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

587 
cd_d©a
->
íabÀ
 ? "ENABLED" : "DISABLED");

588 
	}
}

591 
ssize_t
 
	$ch¨gî_dëe˘_íabÀ_°‹e
(
devi˚
 *
dev
,

592 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

594 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

595 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

596 
boﬁ
 
íabÀ
;

597 
ªt
;

599 
	`˘s_öfo
("Wrôêsysf†'"
CHARGER_DET_SYSFS_GROUP_NAME
"/%s' size %zu",

600 
©å
->©å.
«me
, 
cou¡
);

602 
	`∑r£_¨g
(
buf
, 
cou¡
);

604 i‡(
¨gc
 != 1) {

605 
	`˘s_îr
("InvalidÇum ofárgs");

606  -
EINVAL
;

609 
ªt
 = 
	`k°πoboﬁ
(
¨gv
[0], &
íabÀ
);

610 i‡(
ªt
) {

611 
	`˘s_îr
("InvalidÖaram ofÉnable");

612  
ªt
;

615 i‡(
íabÀ
) {

616 
ªt
 = 
	`íabÀ_ch¨gî_dëe˘
(
cd_d©a
);

618 
ªt
 = 
	`dißbÀ_ch¨gî_dëe˘
(
cd_d©a
);

620 i‡(
ªt
) {

621 
	`˘s_îr
("%s charger detect failed %d",

622 
íabÀ
 ? "E«bÀ" : "DißbÀ", 
ªt
);

623  
ªt
;

626  
cou¡
;

627 
	}
}

628 
DEVICE_ATTR
(
íabÀ
, 
S_IWUSR
 | 
S_IRUGO
,

629 
ch¨gî_dëe˘_íabÀ_show
, 
ch¨gî_dëe˘_íabÀ_°‹e
);

631 
ssize_t
 
	$ch¨gî_dëe˘_ru¬ög_show
(
devi˚
 *
dev
,

632 
devi˚_©åibuã
 *
©å
, *
buf
)

634 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

635 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

637 
	`˘s_öfo
("Ród sysf†'"
CHARGER_DET_SYSFS_GROUP_NAME
"/%s'",

638 
©å
->©å.
«me
);

640  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

642 
cd_d©a
->
ru¬ög
 ? "" : "Not-");

643 
	}
}

646 
ssize_t
 
	$ch¨gî_dëe˘_ru¬ög_°‹e
(
devi˚
 *
dev
,

647 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

649 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

650 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

651 
boﬁ
 
ru¬ög
;

652 
ªt
;

654 
	`˘s_öfo
("Wrôêsysf†'"
CHARGER_DET_SYSFS_GROUP_NAME
"/%s' size %zu",

655 
©å
->©å.
«me
, 
cou¡
);

657 
	`∑r£_¨g
(
buf
, 
cou¡
);

659 i‡(
¨gc
 != 1) {

660 
	`˘s_îr
("InvalidÇum ofárgs");

661  -
EINVAL
;

664 
ªt
 = 
	`k°πoboﬁ
(
¨gv
[0], &
ru¬ög
);

665 i‡(
ªt
) {

666 
	`˘s_îr
("InvalidÖaram ofÑunning");

667  
ªt
;

670 i‡(
ru¬ög
) {

671 
ªt
 = 
	`°¨t_ch¨gî_dëe˘
(
cd_d©a
);

673 
ªt
 = 
	`°›_ch¨gî_dëe˘
(
cd_d©a
);

675 i‡(
ªt
) {

676 
	`˘s_îr
("%s charger detect failed %d",

677 
ru¬ög
 ? "Sèπ" : "St›", 
ªt
);

678  
ªt
;

681  
cou¡
;

682 
	}
}

683 
DEVICE_ATTR
(
ru¬ög
, 
S_IWUSR
 | 
S_IRUGO
,

684 
ch¨gî_dëe˘_ru¬ög_show
, 
ch¨gî_dëe˘_ru¬ög_°‹e
);

686 
	$swôch_ch¨gî_dëe˘_ty≥
(
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
,

687 
˘s_ch¨gî_dëe˘_ty≥
 
ty≥
)

689 
boﬁ
 
ru¬ög
;

691 
	`˘s_öfo
("Switch detectÅypeÅo %d(%s)",

692 
ty≥
, 
	`ch¨gî_dëe˘_ty≥_°r
(type));

694 i‡(
ty≥
 >
CTS_CHGR_DET_TYPE_MAX
) {

695 
	`˘s_îr
("Swôch dëe˘Åy≥ %d invÆid", 
ty≥
);

696  -
EINVAL
;

699 i‡(
cd_d©a
->
ty≥
 ==Åype) {

700 
	`˘s_w¨n
("Switch detectÅypeÉqual");

704 
ru¬ög
 = 
cd_d©a
->running;

706 i‡(
ru¬ög
) {

707 
ªt
 = 
	`°›_ch¨gî_dëe˘
(
cd_d©a
);

708 i‡(
ªt
) {

709 
	`˘s_îr
("St› dëe˘ faûed %d", 
ªt
);

710  
ªt
;

714 
cd_d©a
->
ty≥
 =Åype;

716 i‡(
ru¬ög
) {

717 
ªt
 = 
	`°¨t_ch¨gî_dëe˘
(
cd_d©a
);

718 i‡(
ªt
) {

719 
	`˘s_îr
("Sèπ dëe˘ faûed %d", 
ªt
);

720 
cd_d©a
->
ty≥
 = 
CTS_CHGR_DET_TYPE_NONE
;

721  
ªt
;

726 
	}
}

728 
ssize_t
 
	$ch¨gî_dëe˘_ty≥_show
(
devi˚
 *
dev
,

729 
devi˚_©åibuã
 *
©å
, *
buf
)

731 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

732 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

734 
	`˘s_öfo
("Ród sysf†'"
CHARGER_DET_SYSFS_GROUP_NAME
"/%s'",

735 
©å
->©å.
«me
);

737  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

739 
cd_d©a
->
ty≥
, 
	`ch¨gî_dëe˘_ty≥_°r
(cd_data->type));

740 
	}
}

743 
ssize_t
 
	$ch¨gî_dëe˘_ty≥_°‹e
(
devi˚
 *
dev
,

744 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

746 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

747 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

748 
ty≥
, 
ªt
;

750 
	`˘s_öfo
("Wrôêsysf†'"
CHARGER_DET_SYSFS_GROUP_NAME
"/%s' size %zu",

751 
©å
->©å.
«me
, 
cou¡
);

753 
	`∑r£_¨g
(
buf
, 
cou¡
);

755 i‡(
¨gc
 != 1) {

756 
	`˘s_îr
("");

757  -
EINVAL
;

760 
ty≥
 = 
	`m©ch_°rög
(
ch¨gî_dëe˘_ty≥_ãxt
,

761 
	`ARRAY_SIZE
(
ch¨gî_dëe˘_ty≥_ãxt
), 
¨gv
[0]);

762 i‡(
ty≥
 < 0) {

763 
	`˘s_îr
("InvÆid ch¨gî dëe˘Åy≥: '%s'", 
¨gv
[0]);

764  -
EINVAL
;

767 
ªt
 = 
	`swôch_ch¨gî_dëe˘_ty≥
(
cd_d©a
, 
ty≥
);

768 i‡(
ªt
) {

769 
	`˘s_îr
("Swôch ch¨gî dëe˘Åy≥ faûed %d", 
ªt
);

770  
ªt
;

773  
cou¡
;

774 
	}
}

775 
DEVICE_ATTR
(
ty≥
, 
S_IWUSR
 | 
S_IRUGO
,

776 
ch¨gî_dëe˘_ty≥_show
, 
ch¨gî_dëe˘_ty≥_°‹e
);

778 
ssize_t
 
	$ch¨gî_°©e_show
(
devi˚
 *
dev
,

779 
devi˚_©åibuã
 *
©å
, *
buf
)

781 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

782 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

783 
ªt
;

785 
	`˘s_öfo
("Ród sysf†'"
CHARGER_DET_SYSFS_GROUP_NAME
"/%s'",

786 
©å
->©å.
«me
);

788 
ªt
 = 
	`gë_ch¨gî_°©e
(
cd_d©a
);

789 i‡(
ªt
) {

790  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

791 "Gë ch¨gê°©êÁûed %d\n", 
ªt
);

794  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

796 
cd_d©a
->
°©e
 ? "ATTACHED" : "DETACHED");

797 
	}
}

798 
DEVICE_ATTR
(
°©e
, 
S_IRUGO
, 
ch¨gî_°©e_show
, 
NULL
);

800 
ssize_t
 
	$ch¨gî_dëe˘_∑øm_show
(
devi˚
 *
dev
,

801 
devi˚_©åibuã
 *
©å
, *
buf
)

803 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

804 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

805 
powî_suµly
 *
psy
;

807 
	`˘s_öfo
("Ród sysf†'"
CHARGER_DET_SYSFS_GROUP_NAME
"/%s'",

808 
©å
->©å.
«me
);

810 
psy
 = 
	`powî_suµly_gë_by_«me
(
cd_d©a
->
psy_«me
);

812  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

816 
cd_d©a
->
psy_«me
, 
psy
 =
NULL
 ? "Non-" : "",

817 
cd_d©a
->
p•
, 
	`powî_suµly_¥›_°r
(cd_data->psp),

818 
cd_d©a
->
p•_pﬁl_öãrvÆ
);

819 
	}
}

822 
ssize_t
 
	$ch¨gî_dëe˘_∑øm_°‹e
(
devi˚
 *
dev
,

823 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

825 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

826 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

827 
powî_suµly
 *
psy
;

828 
powî_suµly_¥›vÆ
 
¥›vÆ
;

829 
powî_suµly_¥›îty
 
p•
;

830 
u32
 
öãrvÆ
;

831 
ªt
;

833 
	`˘s_öfo
("Wrôêsysf†'"
CHARGER_DET_SYSFS_GROUP_NAME
"/%s' size %zu",

834 
©å
->©å.
«me
, 
cou¡
);

836 
	`∑r£_¨g
(
buf
, 
cou¡
);

838 i‡(
¨gc
 < 2 ||árgc > 3) {

839 
	`˘s_îr
("InvalidÇum ofárgs");

840  -
EINVAL
;

843 i‡((
psy
 = 
	`powî_suµly_gë_by_«me
(
¨gv
[0])Ë=
NULL
) {

844 
	`˘s_îr
("Powî suµly '%s'ÇŸ found", 
¨gv
[0]);

845  -
EINVAL
;

848 
p•
 = 
	`powî_suµly_¥›_‰om_«me
(
¨gv
[1]);

849 i‡(
p•
 < 0 ||

850 
	`POWER_SUPPLY_GET_PROPERTY
(
psy
, 
p•
, &
¥›vÆ
) < 0) {

851 
	`˘s_îr
("Power supply '%s'Öroperty '%s'Çot valid",

852 
¨gv
[0], 
	`powî_suµly_¥›_°r
(
p•
));

853  -
EINVAL
;

856 
öãrvÆ
 = 
cd_d©a
->
p•_pﬁl_öãrvÆ
;

857 i‡(
¨gc
 > 2) {

858 
ªt
 = 
	`k°πou32
(
¨gv
[2], 0, &
öãrvÆ
);

859 i‡(
ªt
) {

860 
	`˘s_îr
("Arg interval is invalid");

861  -
EINVAL
;

865 i‡(
cd_d©a
->
psy_«me
) {

866 
	`k‰ì
(
cd_d©a
->
psy_«me
);

868 
cd_d©a
->
psy_«me
 = 
	`k°rdup
(
¨gv
[0], 
GFP_KERNEL
);

869 i‡(
cd_d©a
->
psy_«me
 =
NULL
) {

870 
	`˘s_îr
("DupÖower supplyÇame failed");

871  -
ENOMEM
;

874 
cd_d©a
->
p•
 =Ösp;

875 
cd_d©a
->
p•_pﬁl_öãrvÆ
 = 
öãrvÆ
;

877  
cou¡
;

878 
	}
}

879 
DEVICE_ATTR
(
∑øm
, 
S_IWUSR
 | 
S_IRUGO
,

880 
ch¨gî_dëe˘_∑øm_show
, 
ch¨gî_dëe˘_∑øm_°‹e
);

882 
©åibuã
 *
	gch¨gî_dëe˘_©ås
[] = {

883 &
dev_©å_íabÀ
.
©å
,

884 &
dev_©å_ru¬ög
.
©å
,

885 &
dev_©å_ty≥
.
©å
,

886 &
dev_©å_°©e
.
©å
,

887 &
dev_©å_∑øm
.
©å
,

888 
NULL


891 c⁄° 
©åibuã_group
 
	gch¨gî_dëe˘_©å_group
 = {

892 .
«me
 = 
CHARGER_DET_SYSFS_GROUP_NAME
,

893 .
	g©ås
 = 
ch¨gî_dëe˘_©ås
,

897 
	$˘s_öô_ch¨gî_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

899 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
;

900 
ªt
 = 0;

902 
	`˘s_öfo
("Init detect");

904 i‡(
˘s_d©a
 =
NULL
) {

905 
	`˘s_îr
("Init detect with cts_data = NULL");

906  -
EFAULT
;

909 
cd_d©a
 = 
	`kzÆloc
((*cd_d©a), 
GFP_KERNEL
);

910 i‡(
cd_d©a
 =
NULL
) {

911 
	`˘s_îr
("Alloc charger detect data failed");

912  -
ENOMEM
;

915 #ifde‡
CONFIG_CTS_OF


916 
ªt
 = 
	`∑r£_ch¨gî_dëe˘_dt
(
cd_d©a
, 
˘s_d©a
->
devi˚
->
of_node
);

918 #ifde‡
CFG_CTS_DEF_CHGR_DET_ENABLE


919 
cd_d©a
->
íabÀ
 = 
åue
;

921 
cd_d©a
->
íabÀ
 = 
Ál£
;

924 
cd_d©a
->
ty≥
 = 
CFG_CTS_DEF_CHGR_DET_TYPE
;

925 
cd_d©a
->
p•
 = 
CFG_CTS_DEF_CHGR_DET_PSY_PROP
;

926 
cd_d©a
->
p•_pﬁl_öãrvÆ
 = 
CFG_CTS_DEF_CHGR_DET_PSP_POLL_INTERVAL
;

927 
cd_d©a
->
psy_«me
 = 
	`k°rdup
(
CFG_CTS_DEF_CHGR_DET_PSY_NAME
, 
GFP_KERNEL
);

928 i‡(
cd_d©a
->
psy_«me
 =
NULL
) {

929 
	`˘s_îr
("DupÖower supplyÇame failed");

930 
ªt
 = -
ENOMEM
;

933 i‡(
ªt
) {

934 
	`˘s_îr
("Gë dëe˘Ö¨am faûed %d", 
ªt
);

935 
‰ì_cd_d©a
;

938 
	`˘s_öfo
("Dëe˘: %sABLED", 
cd_d©a
->
íabÀ
 ? "EN" : "DIS");

939 
	`˘s_öfo
(" Ty≥ : %s", 
	`ch¨gî_dëe˘_ty≥_°r
(
cd_d©a
->
ty≥
));

940 
	`˘s_öfo
(" PSY Name: %s,Ör›: %d(%s)", 
cd_d©a
->
psy_«me
,

941 
cd_d©a
->
p•
, 
	`powî_suµly_¥›_°r
(cd_data->psp));

942 
	`˘s_öfo
(" Pﬁ»I¡: %dms", 
cd_d©a
->
p•_pﬁl_öãrvÆ
);

944 
ªt
 = 
	`öô_ch¨gî_dëe˘
(
cd_d©a
);

945 i‡(
ªt
) {

946 
	`˘s_îr
("Inô dëe˘ faûed %d", 
ªt
);

947 
‰ì_psy_«me
;

950 #ifde‡
CONFIG_CTS_SYSFS


951 
	`˘s_öfo
("Cª©êsysf†©å grou∞'%s'", 
CHARGER_DET_SYSFS_GROUP_NAME
);

952 
ªt
 = 
	`sysfs_¸óã_group
(&
˘s_d©a
->
devi˚
->
kobj
,

953 &
ch¨gî_dëe˘_©å_group
);

954 i‡(
ªt
) {

955 
	`˘s_w¨n
("Cª©êsysf†©å grou∞Áûed %d", 
ªt
);

957 
cd_d©a
->
sysfs_©å_group_¸óãd
 = 
åue
;

961 
˘s_d©a
->
ch¨gî_dëe˘_d©a
 = 
cd_d©a
;

962 
cd_d©a
->
˘s_d©a
 = cts_data;

966 
‰ì_psy_«me
:

967 
	`k‰ì
(
cd_d©a
->
psy_«me
);

968 
‰ì_cd_d©a
:

969 
	`k‰ì
(
cd_d©a
);

971  
ªt
;

972 
	}
}

974 
	$˘s_deöô_ch¨gî_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

976 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
;

977 
ªt
;

979 
	`˘s_öfo
("Deinit detect");

981 i‡(
˘s_d©a
 =
NULL
) {

982 
	`˘s_îr
("Deinit detect with cts_data = NULL");

983  -
EFAULT
;

986 
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

987 i‡(
cd_d©a
 =
NULL
) {

988 
	`˘s_w¨n
("Deinit detect with charger_detect_data = NULL");

992 i‡(
cd_d©a
->
ru¬ög
) {

993 
ªt
 = 
	`°›_ch¨gî_dëe˘
(
cd_d©a
);

994 i‡(
ªt
) {

995 
	`˘s_îr
("St› dëe˘ faûed %d", 
ªt
);

999 #ifde‡
CONFIG_CTS_SYSFS


1000 i‡(
cd_d©a
->
sysfs_©å_group_¸óãd
) {

1001 
	`˘s_öfo
("Remove sysfsáttr group '%s'",

1002 
CHARGER_DET_SYSFS_GROUP_NAME
);

1003 
	`sysfs_ªmove_group
(&
˘s_d©a
->
devi˚
->
kobj
,

1004 &
ch¨gî_dëe˘_©å_group
);

1005 
cd_d©a
->
sysfs_©å_group_¸óãd
 = 
Ál£
;

1009 i‡(
cd_d©a
->
psy_«me
) {

1010 
	`˘s_öfo
("KfreeÖower supplyÇame");

1011 
	`k‰ì
(
cd_d©a
->
psy_«me
);

1012 
cd_d©a
->
psy_«me
 = 
NULL
;

1015 
	`k‰ì
(
cd_d©a
);

1016 
˘s_d©a
->
ch¨gî_dëe˘_d©a
 = 
NULL
;

1019 
	}
}

1021 
	$˘s_is_ch¨gî_©èched
(
chù⁄e_ts_d©a
 *
˘s_d©a
, 
boﬁ
 *
©èched
)

1023 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
;

1024 
ªt
;

1026 i‡(
˘s_d©a
 =
NULL
) {

1027 
	`˘s_îr
("Get state with cts_data = NULL");

1028  -
EFAULT
;

1031 
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

1032 i‡(
cd_d©a
 =
NULL
) {

1033 
	`˘s_îr
("Get state with charger_detect_data = NULL");

1034  -
ENODEV
;

1037 
	`˘s_öfo
("Get state usingÅype %d(%s)Öaram",

1038 
cd_d©a
->
ty≥
, 
	`ch¨gî_dëe˘_ty≥_°r
(cd_data->type));

1040 
ªt
 = 
	`gë_ch¨gî_°©e
(
cd_d©a
);

1041 i‡(
ªt
) {

1042 
	`˘s_îr
("Gë sèã faûed %d", 
ªt
);

1043  
ªt
;

1046 *
©èched
 = 
cd_d©a
->
°©e
;

1049 
	}
}

1051 
	$˘s_°¨t_ch¨gî_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

1053 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
;

1055 i‡(
˘s_d©a
 =
NULL
) {

1056 
	`˘s_îr
("Start detect with cts_data = NULL");

1057  -
EFAULT
;

1060 
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

1061 i‡(
cd_d©a
 =
NULL
) {

1062 
	`˘s_îr
("Start detect with charger_detect_data = NULL");

1063  -
ENODEV
;

1066  
	`°¨t_ch¨gî_dëe˘
(
cd_d©a
);

1067 
	}
}

1069 
	$˘s_°›_ch¨gî_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

1071 
˘s_ch¨gî_dëe˘_d©a
 *
cd_d©a
;

1073 i‡(
˘s_d©a
 =
NULL
) {

1074 
	`˘s_îr
("Stop detect with cts_data = NULL");

1075  -
EFAULT
;

1078 
cd_d©a
 = 
˘s_d©a
->
ch¨gî_dëe˘_d©a
;

1079 i‡(
cd_d©a
 =
NULL
) {

1080 
	`˘s_îr
("Stop detect with charger_detect_data = NULL");

1081  -
ENODEV
;

1084  
	`°›_ch¨gî_dëe˘
(
cd_d©a
);

1085 
	}
}

	@cts_charger_detect.h

1 #i‚de‡
CTS_CHARGER_DETECT_H


2 
	#CTS_CHARGER_DETECT_H


	)

4 
	~"˘s_c⁄fig.h
"

6 
	gchù⁄e_ts_d©a
;

8 #ifde‡
CONFIG_CTS_CHARGER_DETECT


9 
˘s_öô_ch¨gî_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

10 
˘s_deöô_ch¨gî_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

11 
˘s_°¨t_ch¨gî_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

12 
˘s_°›_ch¨gî_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

13 
˘s_is_ch¨gî_©èched
(
chù⁄e_ts_d©a
 *
˘s_d©a
,

14 
boﬁ
 *
©èched
);

16 
ölöe
 
	$˘s_ch¨gî_dëe˘_öô
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

18  -
ENOTSUPP
;

19 
	}
}

20 
ölöe
 
	$˘s_ch¨gî_dëe˘_deöô
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

22  -
ENOTSUPP
;

23 
	}
}

24 
ölöe
 
	$˘s_°¨t_ch¨gî_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

26  -
ENODEV
;

27 
	}
}

28 
ölöe
 
	$˘s_°›_ch¨gî_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

30  -
ENODEV
;

31 
	}
}

32 
ölöe
 
	$˘s_is_ch¨gî_©èched
(
chù⁄e_ts_d©a
 *
˘s_d©a
,

33 
boﬁ
 *
©èched
)

35  -
ENODEV
;

36 
	}
}

	@cts_config.h

1 #i‚de‡
CTS_CONFIG_H


2 
	#CTS_CONFIG_H


	)

5 
	#CFG_CTS_DRIVER_MAJOR_VERSION
 1

	)

6 
	#CFG_CTS_DRIVER_MINOR_VERSION
 3

	)

7 
	#CFG_CTS_DRIVER_PATCH_VERSION
 1

	)

9 
	#CFG_CTS_DRIVER_VERSION
 "v1.3.1"

	)

12 
	#CFG_CTS_HAS_RESET_PIN


	)

15 #i‚de‡
CONFIG_CTS_I2C_HOST


17 #i‚de‡
CFG_CTS_HAS_RESET_PIN


18 
	#CFG_CTS_HAS_RESET_PIN


	)

21 
	#CFG_CTS_SPI_SPEED_KHZ
 4000

	)

25 
	#CFG_CTS_FORCE_UP


	)

33 
	#CFG_CTS_DRIVER_BUILTIN_FIRMWARE


	)

34 
	#CFG_CTS_FIRMWARE_IN_FS


	)

35 #ifde‡
CFG_CTS_FIRMWARE_IN_FS


36 
	#CFG_CTS_FIRMWARE_FILENAME
 "ICNL9911.bö"

	)

37 
	#CFG_CTS_FIRMWARE_FILEPATH
 "/ëc/fúmw¨e/ICNL9911.bö"

	)

40 #ifde‡
CONFIG_PROC_FS


42 
	#CONFIG_CTS_LEGACY_TOOL


	)

45 #ifde‡
CONFIG_SYSFS


47 
	#CONFIG_CTS_SYSFS


	)

50 
	#CFG_CTS_MAX_TOUCH_NUM
 (10)

	)

54 #ifde‡
CONFIG_CTS_VIRTUALKEY


55 
	#CFG_CTS_MAX_VKEY_NUM
 (4)

	)

56 
	#CFG_CTS_NUM_VKEY
 (3)

	)

57 
	#CFG_CTS_VKEY_KEYCODES
 {
KEY_BACK
, 
KEY_HOME
, 
KEY_MENU
}

	)

62 #ifde‡
CFG_CTS_GESTURE


63 
	#GESTURE_UP
 0x11

	)

64 
	#GESTURE_C
 0x12

	)

65 
	#GESTURE_O
 0x13

	)

66 
	#GESTURE_M
 0x14

	)

67 
	#GESTURE_W
 0x15

	)

68 
	#GESTURE_E
 0x16

	)

69 
	#GESTURE_S
 0x17

	)

70 
	#GESTURE_Z
 0x1d

	)

71 
	#GESTURE_V
 0x1e

	)

72 
	#GESTURE_D_TAP
 0x50

	)

73 
	#GESTURE_DOWN
 0x22

	)

74 
	#GESTURE_LEFT
 0x23

	)

75 
	#GESTURE_RIGHT
 0x24

	)

77 
	#CFG_CTS_NUM_GESTURE
 (13u)

	)

78 
	#CFG_CTS_GESTURE_REPORT_KEY


	)

79 
	#CFG_CTS_GESTURE_KEYMAP
 \

80 {{
GESTURE_C
, 
KEY_C
,}, \

81 {
GESTURE_W
, 
KEY_W
,}, \

82 {
GESTURE_V
, 
KEY_V
,}, \

83 {
GESTURE_D_TAP
, 
KEY_F1
,}, \

84 {
GESTURE_Z
, 
KEY_Z
,}, \

85 {
GESTURE_M
, 
KEY_M
,}, \

86 {
GESTURE_O
, 
KEY_O
,}, \

87 {
GESTURE_E
, 
KEY_E
,}, \

88 {
GESTURE_S
, 
KEY_S
,}, \

89 {
GESTURE_UP
, 
KEY_UP
,}, \

90 {
GESTURE_DOWN
, 
KEY_DOWN
,}, \

91 {
GESTURE_LEFT
, 
KEY_LEFT
,}, \

92 {
GESTURE_RIGHT
, 
KEY_RIGHT
,}, \

93 }

	)

94 
	#CFG_CTS_GESTURE_REPORT_TRACE
 0

	)

99 
	#CONFIG_CTS_CHARGER_DETECT


	)

101 
	#CONFIG_CTS_EARJACK_DETECT


	)

106 #ifde‡
CONFIG_CTS_ESD_PROTECTION


107 
	#CFG_CTS_ESD_PROTECTION_CHECK_PERIOD
 (2 * 
HZ
)

	)

108 
	#CFG_CTS_ESD_FAILED_CONFIRM_CNT
 3

	)

112 
	#CONFIG_CTS_SLOTPROTOCOL


	)

114 #ifde‡
CONFIG_CTS_LEGACY_TOOL


115 
	#CFG_CTS_TOOL_PROC_FILENAME
 "i˙85xx_toﬁ"

	)

118 
	#CFG_CTS_UPDATE_CRCCHECK


	)

123 
	~"˘s_∂©_qcom_c⁄fig.h
"

	@cts_core.c

1 
	#LOG_TAG
 "C‹e"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_sf˘æ.h
"

7 
	~"˘s_•i_Êash.h
"

8 
	~"˘s_fúmw¨e.h
"

9 
	~"˘s_ch¨gî_dëe˘.h
"

10 
	~"˘s_órjack_dëe˘.h
"

12 #ifde‡
CONFIG_CTS_I2C_HOST


13 
	$˘s_i2c_wrôeb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

14 
u32
 
addr
, 
u8
 
b
, 
ªåy
, 
dñay
)

16 
u8
 
buff
[8];

18 
	`˘s_dbg
("WriteÅo slave_addr: 0x%02xÑeg: 0x%0*x val: 0x%02x",

19 
˘s_dev
->
πd©a
.
¶ave_addr
, cts_dev->πd©a.
addr_width
 * 2, 
addr
, 
b
);

21 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

22 
	`put_u«lig√d_be16
(
addr
, 
buff
);

23 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

24 
	`put_u«lig√d_be24
(
addr
, 
buff
);

26 
	`˘s_îr
("Writeb invalidáddress width %u",

27 
˘s_dev
->
πd©a
.
addr_width
);

28  -
EINVAL
;

30 
buff
[
˘s_dev
->
πd©a
.
addr_width
] = 
b
;

32  
	`˘s_∂©_i2c_wrôe
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

33 
buff
, 
˘s_dev
->
πd©a
.
addr_width
 + 1, 
ªåy
 ,
dñay
);

34 
	}
}

36 
	$˘s_i2c_wrôew
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

37 
u32
 
addr
, 
u16
 
w
, 
ªåy
, 
dñay
)

39 
u8
 
buff
[8];

41 
	`˘s_dbg
("WriteÅo slave_addr: 0x%02xÑeg: 0x%0*x val: 0x%04x",

42 
˘s_dev
->
πd©a
.
¶ave_addr
, cts_dev->πd©a.
addr_width
 * 2, 
addr
, 
w
);

44 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

45 
	`put_u«lig√d_be16
(
addr
, 
buff
);

46 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

47 
	`put_u«lig√d_be24
(
addr
, 
buff
);

49 
	`˘s_îr
("Writew invalidáddress width %u",

50 
˘s_dev
->
πd©a
.
addr_width
);

51  -
EINVAL
;

54 
	`put_u«lig√d_À16
(
w
, 
buff
 + 
˘s_dev
->
πd©a
.
addr_width
);

56  
	`˘s_∂©_i2c_wrôe
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

57 
buff
, 
˘s_dev
->
πd©a
.
addr_width
 + 2, 
ªåy
, 
dñay
);

58 
	}
}

60 
	$˘s_i2c_wrôñ
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

61 
u32
 
addr
, u32 
l
, 
ªåy
, 
dñay
)

63 
u8
 
buff
[8];

65 
	`˘s_dbg
("WriteÅo slave_addr: 0x%02xÑeg: 0x%0*x val: 0x%08x",

66 
˘s_dev
->
πd©a
.
¶ave_addr
, cts_dev->πd©a.
addr_width
 * 2, 
addr
, 
l
);

68 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

69 
	`put_u«lig√d_be16
(
addr
, 
buff
);

70 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

71 
	`put_u«lig√d_be24
(
addr
, 
buff
);

73 
	`˘s_îr
("Writel invalidáddress width %u",

74 
˘s_dev
->
πd©a
.
addr_width
);

75  -
EINVAL
;

78 
	`put_u«lig√d_À32
(
l
, 
buff
 + 
˘s_dev
->
πd©a
.
addr_width
);

80  
	`˘s_∂©_i2c_wrôe
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

81 
buff
, 
˘s_dev
->
πd©a
.
addr_width
 + 4, 
ªåy
, 
dñay
);

82 
	}
}

84 
	$˘s_i2c_wrôesb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
,

85 c⁄° 
u8
 *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

87 
ªt
;

88 
u8
 *
d©a
;

89 
size_t
 
max_x„r_size
;

90 
size_t
 
∑ylﬂd_Àn
;

91 
size_t
 
x„r_Àn
;

93 
	`˘s_dbg
("WriteÅo slave_addr: 0x%02xÑeg: 0x%0*xÜen: %zu",

94 
˘s_dev
->
πd©a
.
¶ave_addr
, cts_dev->πd©a.
addr_width
 * 2, 
addr
, 
Àn
);

96 
max_x„r_size
 = 
	`˘s_∂©_gë_max_i2c_x„r_size
(
˘s_dev
->
pd©a
);

97 
d©a
 = 
	`˘s_∂©_gë_i2c_x„r_buf
(
˘s_dev
->
pd©a
, 
Àn
);

98 
Àn
) {

99 
∑ylﬂd_Àn
 =

100 
	`mö
((
size_t
)(
max_x„r_size
 - 
˘s_dev
->
πd©a
.
addr_width
), 
Àn
);

101 
x„r_Àn
 = 
∑ylﬂd_Àn
 + 
˘s_dev
->
πd©a
.
addr_width
;

103 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

104 
	`put_u«lig√d_be16
(
addr
, 
d©a
);

105 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

106 
	`put_u«lig√d_be24
(
addr
, 
d©a
);

108 
	`˘s_îr
("Writesb invalidáddress width %u",

109 
˘s_dev
->
πd©a
.
addr_width
);

110  -
EINVAL
;

113 
	`mem˝y
(
d©a
 + 
˘s_dev
->
πd©a
.
addr_width
, 
§c
, 
∑ylﬂd_Àn
);

115 
ªt
 = 
	`˘s_∂©_i2c_wrôe
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

116 
d©a
, 
x„r_Àn
, 
ªåy
, 
dñay
);

117 i‡(
ªt
) {

118 
	`˘s_îr
("Pœtf‹m i2¯wrôêÁûed %d", 
ªt
);

119  
ªt
;

122 
§c
 +
∑ylﬂd_Àn
;

123 
Àn
 -
∑ylﬂd_Àn
;

124 
addr
 +
∑ylﬂd_Àn
;

128 
	}
}

130 
	$˘s_i2c_ªadb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

131 
u32
 
addr
, 
u8
 *
b
, 
ªåy
, 
dñay
)

133 
u8
 
addr_buf
[4];

135 
	`˘s_dbg
("Readb from slave_addr: 0x%02xÑeg: 0x%0*x",

136 
˘s_dev
->
πd©a
.
¶ave_addr
, cts_dev->πd©a.
addr_width
 * 2, 
addr
);

138 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

139 
	`put_u«lig√d_be16
(
addr
, 
addr_buf
);

140 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

141 
	`put_u«lig√d_be24
(
addr
, 
addr_buf
);

143 
	`˘s_îr
("Readb invalidáddress width %u",

144 
˘s_dev
->
πd©a
.
addr_width
);

145  -
EINVAL
;

148  
	`˘s_∂©_i2c_ªad
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

149 
addr_buf
, 
˘s_dev
->
πd©a
.
addr_width
, 
b
, 1, 
ªåy
, 
dñay
);

150 
	}
}

152 
	$˘s_i2c_ªadw
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

153 
u32
 
addr
, 
u16
 *
w
, 
ªåy
, 
dñay
)

155 
ªt
;

156 
u8
 
addr_buf
[4];

157 
u8
 
buff
[2];

159 
	`˘s_dbg
("Readw from slave_addr: 0x%02xÑeg: 0x%0*x",

160 
˘s_dev
->
πd©a
.
¶ave_addr
, cts_dev->πd©a.
addr_width
 * 2, 
addr
);

162 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

163 
	`put_u«lig√d_be16
(
addr
, 
addr_buf
);

164 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

165 
	`put_u«lig√d_be24
(
addr
, 
addr_buf
);

167 
	`˘s_îr
("Readw invalidáddress width %u",

168 
˘s_dev
->
πd©a
.
addr_width
);

169  -
EINVAL
;

172 
ªt
 = 
	`˘s_∂©_i2c_ªad
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

173 
addr_buf
, 
˘s_dev
->
πd©a
.
addr_width
, 
buff
, 2, 
ªåy
, 
dñay
);

174 i‡(
ªt
 == 0) {

175 *
w
 = 
	`gë_u«lig√d_À16
(
buff
);

178  
ªt
;

179 
	}
}

181 
	$˘s_i2c_ªadl
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

182 
u32
 
addr
, u32 *
l
, 
ªåy
, 
dñay
)

184 
ªt
;

185 
u8
 
addr_buf
[4];

186 
u8
 
buff
[4];

188 
	`˘s_dbg
("Readl from slave_addr: 0x%02xÑeg: 0x%0*x",

189 
˘s_dev
->
πd©a
.
¶ave_addr
, cts_dev->πd©a.
addr_width
 * 2, 
addr
);

191 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

192 
	`put_u«lig√d_be16
(
addr
, 
addr_buf
);

193 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

194 
	`put_u«lig√d_be24
(
addr
, 
addr_buf
);

196 
	`˘s_îr
("Readl invalidáddress width %u",

197 
˘s_dev
->
πd©a
.
addr_width
);

198  -
EINVAL
;

201 
ªt
 = 
	`˘s_∂©_i2c_ªad
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

202 
addr_buf
, 
˘s_dev
->
πd©a
.
addr_width
, 
buff
, 4, 
ªåy
, 
dñay
);

203 i‡(
ªt
 == 0) {

204 *
l
 = 
	`gë_u«lig√d_À32
(
buff
);

207  
ªt
;

208 
	}
}

210 
	$˘s_i2c_ªadsb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

211 
u32
 
addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

213 
ªt
;

214 
u8
 
addr_buf
[4];

215 
size_t
 
max_x„r_size
, 
x„r_Àn
;

217 
	`˘s_dbg
("Readsb from slave_addr: 0x%02xÑeg: 0x%0*xÜen: %zu",

218 
˘s_dev
->
πd©a
.
¶ave_addr
, cts_dev->πd©a.
addr_width
 * 2, 
addr
, 
Àn
);

220 
max_x„r_size
 = 
	`˘s_∂©_gë_max_i2c_x„r_size
(
˘s_dev
->
pd©a
);

221 
Àn
) {

222 
x„r_Àn
 = 
	`mö
(
max_x„r_size
, 
Àn
);

224 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

225 
	`put_u«lig√d_be16
(
addr
, 
addr_buf
);

226 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

227 
	`put_u«lig√d_be24
(
addr
, 
addr_buf
);

229 
	`˘s_îr
("Readsb invalidáddress width %u",

230 
˘s_dev
->
πd©a
.
addr_width
);

231  -
EINVAL
;

234 
ªt
 = 
	`˘s_∂©_i2c_ªad
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

235 
addr_buf
, 
˘s_dev
->
πd©a
.
addr_width
, 
d°
, 
x„r_Àn
, 
ªåy
, 
dñay
);

236 i‡(
ªt
) {

237 
	`˘s_îr
("Pœtf‹m i2¯ªad faûed %d", 
ªt
);

238  
ªt
;

241 
d°
 +
x„r_Àn
;

242 
Àn
 -
x„r_Àn
;

243 
addr
 +
x„r_Àn
;

247 
	}
}

249 
	$˘s_•i_wrôeb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

250 
u32
 
addr
, 
u8
 
b
, 
ªåy
, 
dñay
)

252 
u8
 
buff
[8];

257 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

258 
	`put_u«lig√d_be16
(
addr
, 
buff
);

259 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

260 
	`put_u«lig√d_be24
(
addr
, 
buff
);

262 
	`˘s_îr
("Writeb invalidáddress width %u",

263 
˘s_dev
->
πd©a
.
addr_width
);

264  -
EINVAL
;

266 
buff
[
˘s_dev
->
πd©a
.
addr_width
] = 
b
;

268  
	`˘s_∂©_•i_wrôe
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
, 
buff
,

269 
˘s_dev
->
πd©a
.
addr_width
 + 1, 
ªåy
 ,
dñay
);

271 
	}
}

273 
	$˘s_•i_wrôew
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

274 
u32
 
addr
, 
u16
 
w
, 
ªåy
, 
dñay
)

276 
u8
 
buff
[8];

281 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

282 
	`put_u«lig√d_be16
(
addr
, 
buff
);

283 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

284 
	`put_u«lig√d_be24
(
addr
, 
buff
);

286 
	`˘s_îr
("Writew invalidáddress width %u",

287 
˘s_dev
->
πd©a
.
addr_width
);

288  -
EINVAL
;

291 
	`put_u«lig√d_À16
(
w
, 
buff
 + 
˘s_dev
->
πd©a
.
addr_width
);

293  
	`˘s_∂©_•i_wrôe
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

294 
buff
, 
˘s_dev
->
πd©a
.
addr_width
 + 2, 
ªåy
, 
dñay
);

296 
	}
}

298 
	$˘s_•i_wrôñ
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

299 
u32
 
addr
, u32 
l
, 
ªåy
, 
dñay
)

301 
u8
 
buff
[8];

306 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

307 
	`put_u«lig√d_be16
(
addr
, 
buff
);

308 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

309 
	`put_u«lig√d_be24
(
addr
, 
buff
);

311 
	`˘s_îr
("Writel invalidáddress width %u",

312 
˘s_dev
->
πd©a
.
addr_width
);

313  -
EINVAL
;

316 
	`put_u«lig√d_À32
(
l
, 
buff
 + 
˘s_dev
->
πd©a
.
addr_width
);

318  
	`˘s_∂©_•i_wrôe
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

319 
buff
, 
˘s_dev
->
πd©a
.
addr_width
 + 4, 
ªåy
, 
dñay
);

321 
	}
}

323 
	$˘s_•i_wrôesb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
,

324 c⁄° 
u8
 *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

327 
ªt
;

328 
u8
 *
d©a
;

329 
size_t
 
max_x„r_size
;

330 
size_t
 
∑ylﬂd_Àn
;

331 
size_t
 
x„r_Àn
;

336 
max_x„r_size
 = 
	`˘s_∂©_gë_max_•i_x„r_size
(
˘s_dev
->
pd©a
);

337 
d©a
 = 
	`˘s_∂©_gë_•i_x„r_buf
(
˘s_dev
->
pd©a
, 
Àn
);

338 
Àn
) {

339 
∑ylﬂd_Àn
 =

340 
	`mö
((
size_t
)(
max_x„r_size
 - 
˘s_dev
->
πd©a
.
addr_width
), 
Àn
);

341 
x„r_Àn
 = 
∑ylﬂd_Àn
 + 
˘s_dev
->
πd©a
.
addr_width
;

343 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

344 
	`put_u«lig√d_be16
(
addr
, 
d©a
);

345 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

346 
	`put_u«lig√d_be24
(
addr
, 
d©a
);

348 
	`˘s_îr
("Writesb invalidáddress width %u",

349 
˘s_dev
->
πd©a
.
addr_width
);

350  -
EINVAL
;

353 
	`mem˝y
(
d©a
 + 
˘s_dev
->
πd©a
.
addr_width
, 
§c
, 
∑ylﬂd_Àn
);

355 
ªt
 = 
	`˘s_∂©_•i_wrôe
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

356 
d©a
, 
x„r_Àn
, 
ªåy
, 
dñay
);

357 i‡(
ªt
) {

358 
	`˘s_îr
("Pœtf‹m i2¯wrôêÁûed %d", 
ªt
);

359  
ªt
;

362 
§c
 +
∑ylﬂd_Àn
;

363 
Àn
 -
∑ylﬂd_Àn
;

364 
addr
 +
∑ylﬂd_Àn
;

368 
	}
}

370 
	$˘s_•i_ªadb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

371 
u32
 
addr
, 
u8
 *
b
, 
ªåy
, 
dñay
)

373 
u8
 
addr_buf
[4];

378 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

379 
	`put_u«lig√d_be16
(
addr
, 
addr_buf
);

380 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

381 
	`put_u«lig√d_be24
(
addr
, 
addr_buf
);

383 
	`˘s_îr
("Readb invalidáddress width %u",

384 
˘s_dev
->
πd©a
.
addr_width
);

385  -
EINVAL
;

388  
	`˘s_∂©_•i_ªad
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

389 
addr_buf
, 
˘s_dev
->
πd©a
.
addr_width
, 
b
, 1, 
ªåy
, 
dñay
);

390 
	}
}

392 
	$˘s_•i_ªadw
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

393 
u32
 
addr
, 
u16
 *
w
, 
ªåy
, 
dñay
)

395 
ªt
;

396 
u8
 
addr_buf
[4];

397 
u8
 
buff
[2];

402 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

403 
	`put_u«lig√d_be16
(
addr
, 
addr_buf
);

404 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

405 
	`put_u«lig√d_be24
(
addr
, 
addr_buf
);

407 
	`˘s_îr
("Readw invalidáddress width %u",

408 
˘s_dev
->
πd©a
.
addr_width
);

409  -
EINVAL
;

412 
ªt
 = 
	`˘s_∂©_•i_ªad
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

413 
addr_buf
, 
˘s_dev
->
πd©a
.
addr_width
, 
buff
, 2, 
ªåy
, 
dñay
);

414 i‡(
ªt
 == 0) {

415 *
w
 = 
	`gë_u«lig√d_À16
(
buff
);

418  
ªt
;

419 
	}
}

421 
	$˘s_•i_ªadl
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

422 
u32
 
addr
, u32 *
l
, 
ªåy
, 
dñay
)

424 
ªt
;

425 
u8
 
addr_buf
[4];

426 
u8
 
buff
[4];

431 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

432 
	`put_u«lig√d_be16
(
addr
, 
addr_buf
);

433 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

434 
	`put_u«lig√d_be24
(
addr
, 
addr_buf
);

436 
	`˘s_îr
("Readl invalidáddress width %u",

437 
˘s_dev
->
πd©a
.
addr_width
);

438  -
EINVAL
;

441 
ªt
 = 
	`˘s_∂©_•i_ªad
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

442 
addr_buf
, 
˘s_dev
->
πd©a
.
addr_width
, 
buff
, 4, 
ªåy
, 
dñay
);

443 i‡(
ªt
 == 0) {

444 *
l
 = 
	`gë_u«lig√d_À32
(
buff
);

447  
ªt
;

449 
	}
}

451 
	$˘s_•i_ªadsb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

452 
u32
 
addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

454 
ªt
;

455 
u8
 
addr_buf
[4];

456 
size_t
 
max_x„r_size
, 
x„r_Àn
;

461 
max_x„r_size
 = 
	`˘s_∂©_gë_max_•i_x„r_size
(
˘s_dev
->
pd©a
);

462 
Àn
) {

463 
x„r_Àn
 = 
	`mö
(
max_x„r_size
, 
Àn
);

465 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

466 
	`put_u«lig√d_be16
(
addr
, 
addr_buf
);

467 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

468 
	`put_u«lig√d_be24
(
addr
, 
addr_buf
);

470 
	`˘s_îr
("Readsb invalidáddress width %u",

471 
˘s_dev
->
πd©a
.
addr_width
);

472  -
EINVAL
;

475 
ªt
 = 
	`˘s_∂©_•i_ªad
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

476 
addr_buf
, 
˘s_dev
->
πd©a
.
addr_width
, 
d°
, 
x„r_Àn
, 
ªåy
, 
dñay
);

477 i‡(
ªt
) {

478 
	`˘s_îr
("Pœtf‹m i2¯ªad faûed %d", 
ªt
);

479  
ªt
;

482 
d°
 +
x„r_Àn
;

483 
Àn
 -
x„r_Àn
;

484 
addr
 +
x„r_Àn
;

487 
	}
}

489 
	$˘s_•i_ªadsb_dñay_idÀ
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

490 
u32
 
addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
, 
idÀ
)

492 
ªt
;

493 
u8
 
addr_buf
[4];

494 
size_t
 
max_x„r_size
, 
x„r_Àn
;

499 
max_x„r_size
 = 
	`˘s_∂©_gë_max_•i_x„r_size
(
˘s_dev
->
pd©a
);

500 
Àn
) {

501 
x„r_Àn
 = 
	`mö
(
max_x„r_size
, 
Àn
);

503 i‡(
˘s_dev
->
πd©a
.
addr_width
 == 2) {

504 
	`put_u«lig√d_be16
(
addr
, 
addr_buf
);

505 } i‡(
˘s_dev
->
πd©a
.
addr_width
 == 3) {

506 
	`put_u«lig√d_be24
(
addr
, 
addr_buf
);

508 
	`˘s_îr
("Readsb invalidáddress width %u",

509 
˘s_dev
->
πd©a
.
addr_width
);

510  -
EINVAL
;

513 
ªt
 = 
	`˘s_∂©_•i_ªad_dñay_idÀ
(
˘s_dev
->
pd©a
, cts_dev->
πd©a
.
¶ave_addr
,

514 
addr_buf
, 
˘s_dev
->
πd©a
.
addr_width
, 
d°
, 
x„r_Àn
, 
ªåy
, 
dñay
, 
idÀ
);

515 i‡(
ªt
) {

516 
	`˘s_îr
("Pœtf‹m i2¯ªad faûed %d", 
ªt
);

517  
ªt
;

520 
d°
 +
x„r_Àn
;

521 
Àn
 -
x„r_Àn
;

522 
addr
 +
x„r_Àn
;

525 
	}
}

529 
ölöe
 
	$˘s_dev_wrôeb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

530 
u32
 
addr
, 
u8
 
b
, 
ªåy
, 
dñay
)

532 #ifde‡
CONFIG_CTS_I2C_HOST


533  
	`˘s_i2c_wrôeb
(
˘s_dev
, 
addr
, 
b
, 
ªåy
, 
dñay
);

535  
	`˘s_•i_wrôeb
(
˘s_dev
, 
addr
, 
b
, 
ªåy
, 
dñay
);

537 
	}
}

539 
ölöe
 
	$˘s_dev_wrôew
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

540 
u32
 
addr
, 
u16
 
w
, 
ªåy
, 
dñay
)

542 #ifde‡
CONFIG_CTS_I2C_HOST


543  
	`˘s_i2c_wrôew
(
˘s_dev
, 
addr
, 
w
, 
ªåy
, 
dñay
);

545  
	`˘s_•i_wrôew
(
˘s_dev
, 
addr
, 
w
, 
ªåy
, 
dñay
);

547 
	}
}

549 
ölöe
 
	$˘s_dev_wrôñ
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

550 
u32
 
addr
, u32 
l
, 
ªåy
, 
dñay
)

552 #ifde‡
CONFIG_CTS_I2C_HOST


553  
	`˘s_i2c_wrôñ
(
˘s_dev
, 
addr
, 
l
, 
ªåy
, 
dñay
);

555  
	`˘s_•i_wrôñ
(
˘s_dev
, 
addr
, 
l
, 
ªåy
, 
dñay
);

557 
	}
}

559 
ölöe
 
	$˘s_dev_wrôesb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
,

560 c⁄° 
u8
 *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

562 #ifde‡
CONFIG_CTS_I2C_HOST


563  
	`˘s_i2c_wrôesb
(
˘s_dev
, 
addr
, 
§c
, 
Àn
, 
ªåy
, 
dñay
);

565  
	`˘s_•i_wrôesb
(
˘s_dev
, 
addr
, 
§c
, 
Àn
, 
ªåy
, 
dñay
);

567 
	}
}

569 
ölöe
 
	$˘s_dev_ªadb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

570 
u32
 
addr
, 
u8
 *
b
, 
ªåy
, 
dñay
)

572 #ifde‡
CONFIG_CTS_I2C_HOST


573  
	`˘s_i2c_ªadb
(
˘s_dev
, 
addr
, 
b
, 
ªåy
, 
dñay
);

575  
	`˘s_•i_ªadb
(
˘s_dev
, 
addr
, 
b
, 
ªåy
, 
dñay
);

577 
	}
}

579 
ölöe
 
	$˘s_dev_ªadw
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

580 
u32
 
addr
, 
u16
 *
w
, 
ªåy
, 
dñay
)

582 #ifde‡
CONFIG_CTS_I2C_HOST


583  
	`˘s_i2c_ªadw
(
˘s_dev
, 
addr
, 
w
, 
ªåy
, 
dñay
);

585  
	`˘s_•i_ªadw
(
˘s_dev
, 
addr
, 
w
, 
ªåy
, 
dñay
);;

587 
	}
}

589 
ölöe
 
	$˘s_dev_ªadl
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

590 
u32
 
addr
, u32 *
l
, 
ªåy
, 
dñay
)

592 #ifde‡
CONFIG_CTS_I2C_HOST


593  
	`˘s_i2c_ªadl
(
˘s_dev
, 
addr
, 
l
, 
ªåy
, 
dñay
);

595  
	`˘s_•i_ªadl
(
˘s_dev
, 
addr
, 
l
, 
ªåy
, 
dñay
);

597 
	}
}

599 
ölöe
 
	$˘s_dev_ªadsb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

600 
u32
 
addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

602 #ifde‡
CONFIG_CTS_I2C_HOST


603  
	`˘s_i2c_ªadsb
(
˘s_dev
, 
addr
, 
d°
, 
Àn
, 
ªåy
, 
dñay
);

605  
	`˘s_•i_ªadsb
(
˘s_dev
, 
addr
, 
d°
, 
Àn
, 
ªåy
, 
dñay
);

607 
	}
}

609 
ölöe
 
	$˘s_dev_ªadsb_dñay_idÀ
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

610 
u32
 
addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
, 
idÀ
)

612 #ifde‡
CONFIG_CTS_I2C_HOST


613  
	`˘s_i2c_ªadsb
(
˘s_dev
, 
addr
, 
d°
, 
Àn
, 
ªåy
, 
dñay
);

615  
	`˘s_•i_ªadsb_dñay_idÀ
(
˘s_dev
, 
addr
, 
d°
, 
Àn
, 
ªåy
, 
dñay
, 
idÀ
);

617 
	}
}

620 #ifde‡
CFG_CTS_UPDATE_CRCCHECK


621 
	$˘s_§am_wrôesb_boŸ_¸c_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

622 
size_t
 
Àn
, 
u32
 
¸c
, 
ªåy
)

624 
ªt
 = 0, 
ªåõs
;

626 
ªåõs
 = 0;

628 i‡((
ªt
 = 
	`˘s_dev_wrôñ
(
˘s_dev
, 0x015ff0, 0xCC33555A, 3, 1)) != 0) {

629 
	`˘s_îr
("SRAM wrôesb faûed %d", 
ªt
);

633 i‡((
ªt
 = 
	`˘s_dev_wrôñ
(
˘s_dev
, 0x08fffc, 
¸c
, 3, 1)) != 0) {

634 
	`˘s_îr
("SRAM wrôesb faûed %d", 
ªt
);

638 i‡((
ªt
 = 
	`˘s_dev_wrôñ
(
˘s_dev
, 0x08fff8, 
Àn
, 3, 1)) != 0) {

639 
	`˘s_îr
("SRAM wrôesb faûed %d", 
ªt
);

644 }
ªåõs
++ < 
ªåy
);

646  
ªt
;

647 
	}
}

650 
	$˘s_wrôe_§am_n‹mÆ_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

651 
u32
 
addr
, c⁄° *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

653 
i
, 
ªt
;

654 
u8
 
buff
[5];

656 
i
 = 0; i < 
Àn
; i++) {

657 
	`put_u«lig√d_À32
(
addr
, 
buff
);

658 
buff
[4] = *(
u8
 *)
§c
;

660 
addr
++;

661 
§c
++;

663 
ªt
 = 
	`˘s_dev_wrôesb
(
˘s_dev
,

664 
CTS_DEVICE_FW_REG_DEBUG_INTF
, 
buff
, 5, 
ªåy
, 
dñay
);

665 i‡(
ªt
) {

666 
	`˘s_îr
("WriteÑDEBUG_INTFÜen=5B failed %d",

667 
ªt
);

668  
ªt
;

673 
	}
}

675 
	$˘s_§am_wrôeb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

676 
u32
 
addr
, 
u8
 
b
, 
ªåy
, 
dñay
)

678 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

679  
	`˘s_dev_wrôeb
(
˘s_dev
, 
addr
, 
b
, 
ªåy
, 
dñay
);

681  
	`˘s_wrôe_§am_n‹mÆ_mode
(
˘s_dev
, 
addr
, &
b
, 1, 
ªåy
, 
dñay
);

683 
	}
}

685 
	$˘s_§am_wrôew_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

686 
u32
 
addr
, 
u16
 
w
, 
ªåy
, 
dñay
)

688 
u8
 
buff
[2];

690 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

691  
	`˘s_dev_wrôew
(
˘s_dev
, 
addr
, 
w
, 
ªåy
, 
dñay
);

693 
	`put_u«lig√d_À16
(
w
, 
buff
);

695  
	`˘s_wrôe_§am_n‹mÆ_mode
(
˘s_dev
, 
addr
, 
buff
, 2, 
ªåy
, 
dñay
);

697 
	}
}

699 
	$˘s_§am_wrôñ_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

700 
u32
 
addr
, u32 
l
, 
ªåy
, 
dñay
)

702 
u8
 
buff
[4];

704 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

705  
	`˘s_dev_wrôñ
(
˘s_dev
, 
addr
, 
l
, 
ªåy
, 
dñay
);

707 
	`put_u«lig√d_À32
(
l
, 
buff
);

709  
	`˘s_wrôe_§am_n‹mÆ_mode
(
˘s_dev
, 
addr
, 
buff
, 4, 
ªåy
, 
dñay
);

711 
	}
}

713 
	$˘s_§am_wrôesb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

714 
u32
 
addr
, c⁄° *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

716 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

717  
	`˘s_dev_wrôesb
(
˘s_dev
, 
addr
, 
§c
, 
Àn
, 
ªåy
, 
dñay
);

719  
	`˘s_wrôe_§am_n‹mÆ_mode
(
˘s_dev
, 
addr
, 
§c
, 
Àn
, 
ªåy
, 
dñay
);

721 
	}
}

723 
	$˘s_ˇlc_§am_¸c
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

724 
u32
 
§am_addr
, 
size_t
 
size
, u32 *
¸c
)

726 
	`˘s_öfo
("CÆ¯¸¯‰om søm 0x%06x sizê%zu", 
§am_addr
, 
size
);

728  
˘s_dev
->
hwd©a
->
sf˘æ
->
›s
->
	`ˇlc_§am_¸c
(cts_dev,

729 
§am_addr
, 
size
, 
¸c
);

730 
	}
}

732 
	$˘s_§am_wrôesb_check_¸c_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

733 
u32
 
addr
, c⁄° *
§c
, 
size_t
 
Àn
, u32 
¸c
, 
ªåy
)

735 
ªt
, 
ªåõs
;

737 
ªåõs
 = 0;

739 
u32
 
¸c_§am
;

741 
ªåõs
++;

743 i‡((
ªt
 = 
	`˘s_§am_wrôesb
(
˘s_dev
, 0, 
§c
, 
Àn
)) != 0) {

744 
	`˘s_îr
("SRAM wrôesb faûed %d", 
ªt
);

748 i‡((
ªt
 = 
	`˘s_ˇlc_§am_¸c
(
˘s_dev
, 0, 
Àn
, &
¸c_§am
)) != 0) {

749 
	`˘s_îr
("Get CRC for sram writesb failed %dÑetries %d",

750 
ªt
, 
ªåõs
);

754 i‡(
¸c
 =
¸c_§am
) {

758 
	`˘s_îr
("Check CRC for sram writesb mismatch %x != %xÑetries %d",

759 
¸c
, 
¸c_§am
, 
ªåõs
);

760 
ªt
 = -
EFAULT
;

761 }
ªåõs
 < 
ªåy
);

763  
ªt
;

764 
	}
}

766 
	$˘s_ªad_§am_n‹mÆ_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

767 
u32
 
addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

769 
i
, 
ªt
;

771 
i
 = 0; i < 
Àn
; i++) {

772 
ªt
 = 
	`˘s_dev_wrôñ
(
˘s_dev
,

773 
CTS_DEVICE_FW_REG_DEBUG_INTF
, 
addr
, 
ªåy
, 
dñay
);

774 i‡(
ªt
) {

775 
	`˘s_îr
("Wrôêadd∏tÿrDEBUG_INTF faûed %d", 
ªt
);

776  
ªt
;

779 
ªt
 = 
	`˘s_dev_ªadb
(
˘s_dev
,

780 
CTS_DEVICE_FW_REG_DEBUG_INTF
 + 4, (
u8
 *)
d°
, 
ªåy
, 
dñay
);

781 i‡(
ªt
) {

782 
	`˘s_îr
("Read value fromÑDEBUG_INTF + 4 failed %d",

783 
ªt
);

784  
ªt
;

787 
addr
++;

788 
d°
++;

792 
	}
}

794 
	$˘s_§am_ªadb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

795 
u32
 
addr
, 
u8
 *
b
, 
ªåy
, 
dñay
)

797 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

798  
	`˘s_dev_ªadb
(
˘s_dev
, 
addr
, 
b
, 
ªåy
, 
dñay
);

800  
	`˘s_ªad_§am_n‹mÆ_mode
(
˘s_dev
, 
addr
, 
b
, 1, 
ªåy
, 
dñay
);

802 
	}
}

804 
	$˘s_§am_ªadw_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

805 
u32
 
addr
, 
u16
 *
w
, 
ªåy
, 
dñay
)

807 
ªt
;

808 
u8
 
buff
[2];

810 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

811  
	`˘s_dev_ªadw
(
˘s_dev
, 
addr
, 
w
, 
ªåy
, 
dñay
);

813 
ªt
 = 
	`˘s_ªad_§am_n‹mÆ_mode
(
˘s_dev
, 
addr
, 
buff
, 2, 
ªåy
, 
dñay
);

814 i‡(
ªt
) {

815 
	`˘s_îr
("SRAMÑódw i¿n‹mÆ modêÁûed %d", 
ªt
);

816  
ªt
;

819 *
w
 = 
	`gë_u«lig√d_À16
(
buff
);

823 
	}
}

825 
	$˘s_§am_ªadl_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

826 
u32
 
addr
, u32 *
l
, 
ªåy
, 
dñay
)

828 
ªt
;

829 
u8
 
buff
[4];

831 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

832  
	`˘s_dev_ªadl
(
˘s_dev
, 
addr
, 
l
, 
ªåy
, 
dñay
);

834 
ªt
 = 
	`˘s_ªad_§am_n‹mÆ_mode
(
˘s_dev
, 
addr
, 
buff
, 4, 
ªåy
, 
dñay
);

835 i‡(
ªt
) {

836 
	`˘s_îr
("SRAMÑód»öÇ‹mÆ modêÁûed %d", 
ªt
);

837  
ªt
;

840 *
l
 = 
	`gë_u«lig√d_À32
(
buff
);

844 
	}
}

846 
	$˘s_§am_ªadsb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

847 
u32
 
addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

849 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

850  
	`˘s_dev_ªadsb
(
˘s_dev
, 
addr
, 
d°
, 
Àn
, 
ªåy
, 
dñay
);

852  
	`˘s_ªad_§am_n‹mÆ_mode
(
˘s_dev
, 
addr
, 
d°
, 
Àn
, 
ªåy
, 
dñay
);

854 
	}
}

856 
	$˘s_fw_ªg_wrôeb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

857 
u32
 
ªg_addr
, 
u8
 
b
, 
ªåy
, 
dñay
)

859 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

860 
	`˘s_îr
("WrôebÅÿfwÑeg 0x%04x undîÖrogøm mode", 
ªg_addr
);

861  -
ENODEV
;

864  
	`˘s_dev_wrôeb
(
˘s_dev
, 
ªg_addr
, 
b
, 
ªåy
, 
dñay
);

865 
	}
}

867 
	$˘s_fw_ªg_wrôew_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

868 
u32
 
ªg_addr
, 
u16
 
w
, 
ªåy
, 
dñay
)

870 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

871 
	`˘s_îr
("WrôewÅÿfwÑeg 0x%04x undîÖrogøm mode", 
ªg_addr
);

872  -
ENODEV
;

875  
	`˘s_dev_wrôew
(
˘s_dev
, 
ªg_addr
, 
w
, 
ªåy
, 
dñay
);

876 
	}
}

878 
	$˘s_fw_ªg_wrôñ_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

879 
u32
 
ªg_addr
, u32 
l
, 
ªåy
, 
dñay
)

881 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

882 
	`˘s_îr
("WrôñÅÿfwÑeg 0x%04x undîÖrogøm mode", 
ªg_addr
);

883  -
ENODEV
;

886  
	`˘s_dev_wrôñ
(
˘s_dev
, 
ªg_addr
, 
l
, 
ªåy
, 
dñay
);

887 
	}
}

889 
	$˘s_fw_ªg_wrôesb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

890 
u32
 
ªg_addr
, c⁄° *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

892 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

893 
	`˘s_îr
("WrôesbÅÿfwÑeg 0x%04x undîÖrogøm mode", 
ªg_addr
);

894  -
ENODEV
;

897  
	`˘s_dev_wrôesb
(
˘s_dev
, 
ªg_addr
, 
§c
, 
Àn
, 
ªåy
, 
dñay
);

898 
	}
}

900 
	$˘s_fw_ªg_ªadb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

901 
u32
 
ªg_addr
, 
u8
 *
b
, 
ªåy
, 
dñay
)

903 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

904 
	`˘s_îr
("Readb from fwÑeg underÖrogram mode");

905  -
ENODEV
;

908  
	`˘s_dev_ªadb
(
˘s_dev
, 
ªg_addr
, 
b
, 
ªåy
, 
dñay
);

909 
	}
}

911 
	$˘s_fw_ªg_ªadw_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

912 
u32
 
ªg_addr
, 
u16
 *
w
, 
ªåy
, 
dñay
)

914 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

915 
	`˘s_îr
("Readw from fwÑeg underÖrogram mode");

916  -
ENODEV
;

919  
	`˘s_dev_ªadw
(
˘s_dev
, 
ªg_addr
, 
w
, 
ªåy
, 
dñay
);

920 
	}
}

922 
	$˘s_fw_ªg_ªadl_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

923 
u32
 
ªg_addr
, u32 *
l
, 
ªåy
, 
dñay
)

925 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

926 
	`˘s_îr
("Readl from fwÑeg underÖrogram mode");

927  -
ENODEV
;

930  
	`˘s_dev_ªadl
(
˘s_dev
, 
ªg_addr
, 
l
, 
ªåy
, 
dñay
);

931 
	}
}

933 
	$˘s_fw_ªg_ªadsb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

934 
u32
 
ªg_addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

936 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

937 
	`˘s_îr
("Readsb from fwÑeg underÖrogram mode");

938  -
ENODEV
;

941  
	`˘s_dev_ªadsb
(
˘s_dev
, 
ªg_addr
, 
d°
, 
Àn
, 
ªåy
, 
dñay
);

942 
	}
}

943 
	$˘s_fw_ªg_ªadsb_ªåy_dñay_idÀ
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

944 
u32
 
ªg_addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
, 
idÀ
)

946 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

947 
	`˘s_îr
("Readsb from fwÑeg underÖrogram mode");

948  -
ENODEV
;

951  
	`˘s_dev_ªadsb_dñay_idÀ
(
˘s_dev
, 
ªg_addr
, 
d°
, 
Àn
, 
ªåy
, 
dñay
, 
idÀ
);

952 
	}
}

955 
	$˘s_hw_ªg_wrôeb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

956 
u32
 
ªg_addr
, 
u8
 
b
, 
ªåy
, 
dñay
)

958  
	`˘s_§am_wrôeb_ªåy
(
˘s_dev
, 
ªg_addr
, 
b
, 
ªåy
, 
dñay
);

959 
	}
}

961 
	$˘s_hw_ªg_wrôew_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

962 
u32
 
ªg_addr
, 
u16
 
w
, 
ªåy
, 
dñay
)

964  
	`˘s_§am_wrôew_ªåy
(
˘s_dev
, 
ªg_addr
, 
w
, 
ªåy
, 
dñay
);

965 
	}
}

967 
	$˘s_hw_ªg_wrôñ_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

968 
u32
 
ªg_addr
, u32 
l
, 
ªåy
, 
dñay
)

970  
	`˘s_§am_wrôñ_ªåy
(
˘s_dev
, 
ªg_addr
, 
l
, 
ªåy
, 
dñay
);

971 
	}
}

973 
	$˘s_hw_ªg_wrôesb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

974 
u32
 
ªg_addr
, c⁄° *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

976  
	`˘s_§am_wrôesb_ªåy
(
˘s_dev
, 
ªg_addr
, 
§c
, 
Àn
, 
ªåy
, 
dñay
);

977 
	}
}

979 
	$˘s_hw_ªg_ªadb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

980 
u32
 
ªg_addr
, 
u8
 *
b
, 
ªåy
, 
dñay
)

982  
	`˘s_§am_ªadb_ªåy
(
˘s_dev
, 
ªg_addr
, 
b
, 
ªåy
, 
dñay
);

983 
	}
}

985 
	$˘s_hw_ªg_ªadw_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

986 
u32
 
ªg_addr
, 
u16
 *
w
, 
ªåy
, 
dñay
)

988  
	`˘s_§am_ªadw_ªåy
(
˘s_dev
, 
ªg_addr
, 
w
, 
ªåy
, 
dñay
);

989 
	}
}

991 
	$˘s_hw_ªg_ªadl_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

992 
u32
 
ªg_addr
, u32 *
l
, 
ªåy
, 
dñay
)

994  
	`˘s_§am_ªadl_ªåy
(
˘s_dev
, 
ªg_addr
, 
l
, 
ªåy
, 
dñay
);

995 
	}
}

997 
	$˘s_hw_ªg_ªadsb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

998 
u32
 
ªg_addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

1000  
	`˘s_§am_ªadsb_ªåy
(
˘s_dev
, 
ªg_addr
, 
d°
, 
Àn
, 
ªåy
, 
dñay
);

1001 
	}
}

1003 c⁄° 
˘s_sf˘æ
 
	gi˙l9911_sf˘æ
 = {

1004 .
ªg_ba£
 = 0x34000,

1005 .
	gxchg_§am_ba£
 = (80 - 1) * 1024,

1006 .
	gxchg_§am_size
 = 1024,

1007 .
	g›s
 = &
˘s_sf˘æv2_›s


1010 c⁄° 
˘s_sf˘æ
 
	gi˙l9911s_sf˘æ
 = {

1011 .
ªg_ba£
 = 0x34000,

1012 .
	gxchg_§am_ba£
 = (64 - 1) * 1024,

1013 .
	gxchg_§am_size
 = 1024,

1014 .
	g›s
 = &
˘s_sf˘æv2_›s


1017 c⁄° 
˘s_sf˘æ
 
	gi˙l9911c_sf˘æ
 = {

1018 .
ªg_ba£
 = 0x34000,

1019 .
	gxchg_§am_ba£
 = (64 - 1) * 1024,

1020 .
	gxchg_§am_size
 = 1024,

1021 .
	g›s
 = &
˘s_sf˘æv2_›s


1024 
	#CTS_DEV_HW_REG_DDI_REG_CTRL
 (0x3002Cu)

	)

1026 
	$i˙l9911_£t_ac˚ss_ddi_ªg
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
íabÀ
)

1028 
ªt
;

1029 
u8
 
ac˚ss_Êag
;

1031 
	`˘s_öfo
("ICNL9911 %†ac˚s†ddòªg", 
íabÀ
 ? "enable" : "disable");

1033 
ªt
 = 
	`˘s_hw_ªg_ªadb
(
˘s_dev
, 
CTS_DEV_HW_REG_DDI_REG_CTRL
, &
ac˚ss_Êag
);

1034 i‡(
ªt
) {

1035 
	`˘s_îr
("Ród HW_REG_DDI_REG_CTRL faûed %d", 
ªt
);

1036  
ªt
;

1039 
ac˚ss_Êag
 = 
íabÀ
 ? (access_flag | 0x01) : (access_flag & (~0x01));

1040 
ªt
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 
CTS_DEV_HW_REG_DDI_REG_CTRL
, 
ac˚ss_Êag
);

1041 i‡(
ªt
) {

1042 
	`˘s_îr
("WrôêHW_REG_DDI_REG_CTRL %02x faûed %d", 
ac˚ss_Êag
, 
ªt
);

1043  
ªt
;

1046 
ªt
 = 
	`˘s_hw_ªg_wrôew
(
˘s_dev
, 0x3DFF0, 
íabÀ
 ? 0x4BB4 : 0xB44B);

1047 i‡(
ªt
) {

1048 
	`˘s_îr
("WriteÖassword failed %d");

1049 
dißbÀ_ac˚ss_ddi_ªg
;

1054 
dißbÀ_ac˚ss_ddi_ªg
: {

1055 
r
;

1057 
ac˚ss_Êag
 = 
íabÀ
 ? (access_flag & (~0x01)) : (access_flag | 0x01);

1058 
r
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 
CTS_DEV_HW_REG_DDI_REG_CTRL
, 
ac˚ss_Êag
);

1059 i‡(
r
) {

1060 
	`˘s_îr
("");

1064  
ªt
;

1065 
	}
}

1067 
	$i˙l9911s_£t_ac˚ss_ddi_ªg
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
íabÀ
)

1069 
ªt
;

1070 
u8
 
ac˚ss_Êag
;

1072 
	`˘s_öfo
("ICNL9911S %†ac˚s†ddòªg", 
íabÀ
 ? "enable" : "disable");

1074 
ªt
 = 
	`˘s_hw_ªg_ªadb
(
˘s_dev
, 
CTS_DEV_HW_REG_DDI_REG_CTRL
, &
ac˚ss_Êag
);

1075 i‡(
ªt
) {

1076 
	`˘s_îr
("Ród HW_REG_DDI_REG_CTRL faûed %d", 
ªt
);

1077  
ªt
;

1080 
ac˚ss_Êag
 = 
íabÀ
 ? (access_flag | 0x01) : (access_flag & (~0x01));

1081 
ªt
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 
CTS_DEV_HW_REG_DDI_REG_CTRL
, 
ac˚ss_Êag
);

1082 i‡(
ªt
) {

1083 
	`˘s_îr
("WrôêHW_REG_DDI_REG_CTRL %02x faûed %d", 
ac˚ss_Êag
, 
ªt
);

1084  
ªt
;

1087 
ªt
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 0x30074, 
íabÀ
 ? 1 : 0);

1088 i‡(
ªt
) {

1089 
	`˘s_îr
("Wrôê0x30074 faûed %d", 
ac˚ss_Êag
, 
ªt
);

1090  
ªt
;

1093 
ªt
 = 
	`˘s_hw_ªg_wrôew
(
˘s_dev
, 0x3DFF0, 
íabÀ
 ? 0x595A : 0x5A5A);

1094 i‡(
ªt
) {

1095 
	`˘s_îr
("WriteÖasswordÅo F0 failed %d");

1096  
ªt
;

1098 
ªt
 = 
	`˘s_hw_ªg_wrôew
(
˘s_dev
, 0x3DFF4, 
íabÀ
 ? 0xA6A5 : 0x5A5A);

1099 i‡(
ªt
) {

1100 
	`˘s_îr
("WriteÖasswordÅo F1 failed %d");

1101  
ªt
;

1105 
	}
}

1107 c⁄° 
˘s_devi˚_hwd©a
 
	g˘s_devi˚_hwd©as
[] = {

1109 .
«me
 = "ICNL9911",

1110 .
	ghwid
 = 
CTS_DEV_HWID_ICNL9911
,

1111 .
	gfwid
 = 
CTS_DEV_FWID_ICNL9911
,

1112 .
	gnum_row
 = 32,

1113 .
	gnum_cﬁ
 = 18,

1114 .
	g§am_size
 = 80 * 1024,

1116 .
	g¥ogøm_addr_width
 = 3,

1118 .
	gsf˘æ
 = &
i˙l9911_sf˘æ
,

1119 .
	gíabÀ_ac˚ss_ddi_ªg
 = 
i˙l9911_£t_ac˚ss_ddi_ªg
,

1122 .
	g«me
 = "ICNL9911S",

1123 .
	ghwid
 = 
CTS_DEV_HWID_ICNL9911S
,

1124 .
	gfwid
 = 
CTS_DEV_FWID_ICNL9911S
,

1125 .
	gnum_row
 = 32,

1126 .
	gnum_cﬁ
 = 18,

1127 .
	g§am_size
 = 64 * 1024,

1129 .
	g¥ogøm_addr_width
 = 3,

1131 .
	gsf˘æ
 = &
i˙l9911s_sf˘æ
,

1132 .
	gíabÀ_ac˚ss_ddi_ªg
 = 
i˙l9911s_£t_ac˚ss_ddi_ªg
,

1135 .
	g«me
 = "ICNL9911C",

1136 .
	ghwid
 = 
CTS_DEV_HWID_ICNL9911C
,

1137 .
	gfwid
 = 
CTS_DEV_FWID_ICNL9911C
,

1138 .
	gnum_row
 = 32,

1139 .
	gnum_cﬁ
 = 18,

1140 .
	g§am_size
 = 64 * 1024,

1142 .
	g¥ogøm_addr_width
 = 3,

1144 .
	gsf˘æ
 = &
i˙l9911c_sf˘æ
,

1145 .
	gíabÀ_ac˚ss_ddi_ªg
 = 
i˙l9911s_£t_ac˚ss_ddi_ªg
,

1149 
	$˘s_öô_devi˚_hwd©a
(
˘s_devi˚
 *
˘s_dev
,

1150 
u32
 
hwid
, 
u16
 
fwid
)

1152 
i
;

1154 
	`˘s_öfo
("Inô h¨dw¨êd©®hwid: %06x fwid: %04x", 
hwid
, 
fwid
);

1156 
i
 = 0; i < 
	`ARRAY_SIZE
(
˘s_devi˚_hwd©as
); i++) {

1157 i‡(
hwid
 =
˘s_devi˚_hwd©as
[
i
].hwid ||

1158 
fwid
 =
˘s_devi˚_hwd©as
[
i
].fwid) {

1159 
˘s_dev
->
hwd©a
 = &
˘s_devi˚_hwd©as
[
i
];

1164  -
EINVAL
;

1165 
	}
}

1167 
	$˘s_lock_devi˚
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

1169 
	`˘s_dbg
("*** Lock ***");

1171 
	`π_muãx_lock
(&
˘s_dev
->
pd©a
->
dev_lock
);

1172 
	}
}

1174 
	$˘s_u∆ock_devi˚
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

1176 
	`˘s_dbg
("### Un-Lock ###");

1178 
	`π_muãx_u∆ock
(&
˘s_dev
->
pd©a
->
dev_lock
);

1179 
	}
}

1181 
	$˘s_£t_w‹k_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 
mode
)

1183 
	`˘s_öfo
("Së w‹k modêtÿ%u", 
mode
);

1185  
	`˘s_fw_ªg_wrôeb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_WORK_MODE
, 
mode
);

1186 
	}
}

1188 
	$˘s_gë_w‹k_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
mode
)

1190  
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_WORK_MODE
, 
mode
);

1191 
	}
}

1193 
	$˘s_gë_fúmw¨e_vîsi⁄
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u16
 *
vîsi⁄
)

1195 
ªt
 = 
	`˘s_fw_ªg_ªadw
(
˘s_dev
, 
CTS_DEVICE_FW_REG_VERSION
, 
vîsi⁄
);

1197 i‡(
ªt
) {

1198 *
vîsi⁄
 = 0;

1200 *
vîsi⁄
 = 
	`be16_to_˝up
(version);

1203  
ªt
;

1204 
	}
}

1206 
	$˘s_gë_ddi_vîsi⁄
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
vîsi⁄
)

1208 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_DDI_VERSION
, 
vîsi⁄
);

1210 i‡(
ªt
) {

1211 *
vîsi⁄
 = 0;

1213  
ªt
;

1214 
	}
}

1216 
	$˘s_gë_lib_vîsi⁄
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u16
 *
lib_vîsi⁄
)

1218 
u8
 
maö_vîsi⁄
, 
sub_vîsi⁄
;

1219 
ªt
;

1221 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_FW_LIB_MAIN_VERSION
, &
maö_vîsi⁄
);

1222 i‡(
ªt
) {

1223 
	`˘s_îr
("Gë fwÜib maö vîsi⁄ faûed %d", 
ªt
);

1224  
ªt
;

1227 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_FW_LIB_SUB_VERSION
, &
sub_vîsi⁄
);

1228 i‡(
ªt
) {

1229 
	`˘s_îr
("Gë fwÜib sub vîsi⁄ faûed %d", 
ªt
);

1230  
ªt
;

1233 *
lib_vîsi⁄
 = (
maö_vîsi⁄
 << 8Ë+ 
sub_vîsi⁄
;

1235 
	}
}

1238 
	$˘s_gë_d©a_ªady_Êag
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
Êag
)

1240  
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_DATA_READY
, 
Êag
);

1241 
	}
}

1243 
	$˘s_˛r_d©a_ªady_Êag
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

1245  
	`˘s_fw_ªg_wrôeb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_DATA_READY
, 0);

1246 
	}
}

1248 
	$˘s_£nd_comm™d
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 
cmd
)

1250 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

1251 
	`˘s_w¨n
("Síd comm™d %u whûêchù i¿¥ogøm mode", 
cmd
);

1252  -
ENODEV
;

1255  
	`˘s_fw_ªg_wrôeb_ªåy
(
˘s_dev
, 
CTS_DEVICE_FW_REG_CMD
, 
cmd
, 3, 0);

1256 
	}
}

1258 
	$˘s_gë_touchöfo
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

1259 
˘s_devi˚_touch_öfo
 *
touch_öfo
)

1261 
	`˘s_dbg
("GetÅouch info");

1263 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

1264 
	`˘s_w¨n
("GetÅouch info inÖrogram mode");

1265  -
ENODEV
;

1268 i‡(
˘s_dev
->
πd©a
.
su•íded
) {

1269 
	`˘s_w¨n
("GetÅouch info while is suspended");

1270  -
ENODEV
;

1273  
	`˘s_fw_ªg_ªadsb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_TOUCH_INFO
,

1274 
touch_öfo
, (*touch_info));

1275 
	}
}

1277 
	$˘s_gë_∑√l_∑øm
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

1278 *
∑øm
, 
size_t
 
size
)

1280 
	`˘s_öfo
("GetÖanelÖarameter");

1282 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

1283 
	`˘s_w¨n
("GetÖanelÖarameter inÖrogram mode");

1284  -
ENODEV
;

1287  
	`˘s_fw_ªg_ªadsb
(
˘s_dev
,

1288 
CTS_DEVICE_FW_REG_PANEL_PARAM
, 
∑øm
, 
size
);

1289 
	}
}

1291 
	$˘s_£t_∑√l_∑øm
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

1292 c⁄° *
∑øm
, 
size_t
 
size
)

1294 
	`˘s_öfo
("SetÖanelÖarameter");

1296 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

1297 
	`˘s_w¨n
("SetÖanelÖarameter inÖrogram mode");

1298  -
ENODEV
;

1300  
	`˘s_fw_ªg_wrôesb
(
˘s_dev
,

1301 
CTS_DEVICE_FW_REG_PANEL_PARAM
, 
∑øm
, 
size
);

1302 
	}
}

1304 
	$˘s_gë_x_ªsﬁuti⁄
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u16
 *
ªsﬁuti⁄
)

1306  
	`˘s_fw_ªg_ªadw
(
˘s_dev
, 
CTS_DEVICE_FW_REG_X_RESOLUTION
, 
ªsﬁuti⁄
);

1307 
	}
}

1309 
	$˘s_gë_y_ªsﬁuti⁄
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u16
 *
ªsﬁuti⁄
)

1311  
	`˘s_fw_ªg_ªadw
(
˘s_dev
, 
CTS_DEVICE_FW_REG_Y_RESOLUTION
, 
ªsﬁuti⁄
);

1312 
	}
}

1314 
	$˘s_gë_num_rows
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
num_rows
)

1316  
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_NUM_TX
, 
num_rows
);

1317 
	}
}

1319 
	$˘s_gë_num_cﬁs
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
num_cﬁs
)

1321  
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_NUM_RX
, 
num_cﬁs
);

1322 
	}
}

1324 
	#CTS_DEV_FW_ESD_PROTECTION_ON
 (3)

	)

1325 
	#CTS_DEV_FW_ESD_PROTECTION_OFF
 (1)

	)

1327 
	$˘s_gë_dev_esd_¥Ÿe˘i⁄
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 *
íabÀ
)

1329 
ªt
;

1330 
u8
 
vÆ
;

1332 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_ESD_PROTECTION
, &
vÆ
);

1333 i‡(
ªt
 == 0) {

1334 *
íabÀ
 = (
vÆ
 =
CTS_DEV_FW_ESD_PROTECTION_ON
);

1337  
ªt
;

1338 
	}
}

1340 
	$˘s_£t_dev_esd_¥Ÿe˘i⁄
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
íabÀ
)

1342 
	`˘s_öfo
("%†ESDÖrŸe˘i⁄", 
íabÀ
 ? "Enable" : "Disable");

1344  
	`˘s_fw_ªg_wrôeb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_ESD_PROTECTION
,

1345 
íabÀ
 ? 
CTS_DEV_FW_ESD_PROTECTION_ON
 : 
CTS_DEV_FW_ESD_PROTECTION_OFF
);

1346 
	}
}

1348 #ifde‡
CONFIG_CTS_LEGACY_TOOL


1349 
	$˘s_íabÀ_gë_øwd©a
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

1351 
	`˘s_öfo
("Enable getÑaw/diff data");

1352  
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_ENABLE_READ_RAWDATA
);

1353 
	}
}

1355 
	$˘s_dißbÀ_gë_øwd©a
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

1357 
	`˘s_öfo
("Disable getÑaw/diff data");

1358  
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_DISABLE_READ_RAWDATA
);

1359 
	}
}

1361 
	$tsd©a_Êù_x
(*
tsd©a
, 
u8
 
fw_rows
, u8 
fw_cﬁs
)

1363 
u8
 
r
, 
c
;

1364 
u16
 *
d©a
;

1366 
d©a
 = (
u16
 *)
tsd©a
;

1367 
r
 = 0;Ñ < 
fw_rows
;Ñ++) {

1368 
c
 = 0; c < 
fw_cﬁs
 / 2; c++) {

1369 
	`sw≠
(
d©a
[
r
 * 
fw_cﬁs
 + 
c
],

1370 
d©a
[
r
 * 
fw_cﬁs
 + 
	`wøp
(fw_cﬁs, 
c
)]);

1373 
	}
}

1375 
	$tsd©a_Êù_y
(*
tsd©a
, 
u8
 
fw_rows
, u8 
fw_cﬁs
)

1377 
u8
 
r
, 
c
;

1378 
u16
 *
d©a
;

1380 
d©a
 = (
u16
 *)
tsd©a
;

1381 
r
 = 0;Ñ < 
fw_rows
 / 2;Ñ++) {

1382 
c
 = 0; c < 
fw_cﬁs
; c++) {

1383 
	`sw≠
(
d©a
[
r
 * 
fw_cﬁs
 + 
c
],

1384 
d©a
[
	`wøp
(
fw_rows
, 
r
Ë* 
fw_cﬁs
 + 
c
]);

1387 
	}
}

1389 
	$˘s_gë_øwd©a
(c⁄° 
˘s_devi˚
 *
˘s_dev
, *
buf
)

1391 
i
, 
ªt
;

1392 
u8
 
ªady
;

1393 
u8
 
ªåõs
 = 5;

1395 
	`˘s_öfo
("GetÑawdata");

1397 
i
 = 0; i < 1000; i++) {

1398 
	`mdñay
(1);

1399 
ªt
 = 
	`˘s_gë_d©a_ªady_Êag
(
˘s_dev
, &
ªady
);

1400 i‡(
ªt
) {

1401 
	`˘s_îr
("Gë d©®ªady fœg faûed %d", 
ªt
);

1402 
gë_øw_exô
;

1404 i‡(
ªady
) {

1408 i‡(
i
 == 1000) {

1409 
ªt
 = -
ENODEV
;

1410 
gë_øw_exô
;

1413 
ªt
 = 
	`˘s_fw_ªg_ªadsb_dñay_idÀ
(
˘s_dev
, 
CTS_DEVICE_FW_REG_RAW_DATA
,

1414 
buf
,
˘s_dev
->
fwd©a
.
rows
*˘s_dev->fwd©a.
cﬁs
*2, 500);

1415 i‡(
ªt
) {

1416 
	`˘s_îr
("RódÑawd©®Áûed %d", 
ªt
);

1418 } --
ªåõs
 > 0 && 
ªt
 != 0);

1420 i‡(
˘s_dev
->
fwd©a
.
Êù_x
) {

1421 
	`tsd©a_Êù_x
(
buf
, 
˘s_dev
->
fwd©a
.
rows
, cts_dev->fwd©a.
cﬁs
);

1423 i‡(
˘s_dev
->
fwd©a
.
Êù_y
) {

1424 
	`tsd©a_Êù_y
(
buf
, 
˘s_dev
->
fwd©a
.
rows
, cts_dev->fwd©a.
cﬁs
);

1427 i‡(
	`˘s_˛r_d©a_ªady_Êag
(
˘s_dev
)) {

1428 
	`˘s_îr
("Clear dataÑeady flag failed");

1429 
ªt
 = -
ENODEV
;

1431 
gë_øw_exô
:

1432  
ªt
;

1433 
	}
}

1435 
	$˘s_gë_diffd©a
(c⁄° 
˘s_devi˚
 *
˘s_dev
, *
buf
)

1437 
i
, 
j
, 
ªt
;

1438 
u8
 
ªady
;

1439 
u8
 
ªåõs
 = 5;

1440 
u8
 *
ˇche_buf
;

1442 
	`˘s_öfo
("Get diffdata");

1443 
ˇche_buf
 = 
	`kzÆloc
(

1444 (
˘s_dev
->
fwd©a
.
rows
 + 2Ë* (˘s_dev->fwd©a.
cﬁs
 + 2Ë* 2, 
GFP_KERNEL
);

1445 i‡(
ˇche_buf
 =
NULL
) {

1446 
	`˘s_îr
("Get diffdata: mallocÉrror");

1447 
ªt
 = -
ENOMEM
;

1448 
gë_diff_exô
;

1451 
i
 = 0; i < 1000; i++) {

1452 
	`mdñay
(1);

1453 
ªt
 = 
	`˘s_gë_d©a_ªady_Êag
(
˘s_dev
, &
ªady
);

1454 i‡(
ªt
) {

1455 
	`˘s_îr
("Gë d©®ªady fœg faûed %d", 
ªt
);

1456 
gë_diff_‰ì_buf
;

1458 i‡(
ªady
) {

1462 i‡(
i
 == 1000) {

1463 
ªt
 = -
ENODEV
;

1464 
gë_diff_‰ì_buf
;

1467 
ªt
 = 
	`˘s_fw_ªg_ªadsb_dñay_idÀ
(
˘s_dev
, 
CTS_DEVICE_FW_REG_DIFF_DATA
,

1468 
ˇche_buf
,(
˘s_dev
->
fwd©a
.
rows
+2)*(˘s_dev->fwd©a.
cﬁs
+2)*2, 500);

1469 i‡(
ªt
) {

1470 
	`˘s_îr
("Ród diffd©®Áûed %d", 
ªt
);

1472 } --
ªåõs
 > 0 && 
ªt
 != 0);

1474 
i
 = 0; i < 
˘s_dev
->
fwd©a
.
rows
; i++) {

1475 
j
 = 0; j < 
˘s_dev
->
fwd©a
.
cﬁs
; j++) {

1476 ((
u8
 *)
buf
)[2 * (
i
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
j
)] =

1477 
ˇche_buf
[2 * ((
i
+1)*(
˘s_dev
->
fwd©a
.
cﬁs
+2)+
j
+1)];

1478 ((
u8
 *)
buf
)[2*(
i
*
˘s_dev
->
fwd©a
.
cﬁs
 + 
j
)+1] =

1479 
ˇche_buf
[2*((
i
+1)*(
˘s_dev
->
fwd©a
.
cﬁs
+2)+
j
+1)+1];

1483 i‡(
˘s_dev
->
fwd©a
.
Êù_x
) {

1484 
	`tsd©a_Êù_x
(
buf
, 
˘s_dev
->
fwd©a
.
rows
, cts_dev->fwd©a.
cﬁs
);

1486 i‡(
˘s_dev
->
fwd©a
.
Êù_y
) {

1487 
	`tsd©a_Êù_y
(
buf
, 
˘s_dev
->
fwd©a
.
rows
, cts_dev->fwd©a.
cﬁs
);

1490 i‡(
	`˘s_˛r_d©a_ªady_Êag
(
˘s_dev
)) {

1491 
	`˘s_îr
("Clear dataÑeady flag failed");

1492 
ªt
 = -
ENODEV
;

1494 
gë_diff_‰ì_buf
:

1495 
	`k‰ì
(
ˇche_buf
);

1496 
gë_diff_exô
:

1497  
ªt
;

1498 
	}
}

1501 
	$˘s_gë_dev_boŸ_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

1502 
u8
 *
boŸ_mode
)

1504 
ªt
;

1506 
ªt
 = 
	`˘s_hw_ªg_ªadb_ªåy
(
˘s_dev
,

1507 
CTS_DEV_HW_REG_CURRENT_MODE
, 
boŸ_mode
, 5, 10);

1508 i‡(
ªt
) {

1509 
	`˘s_îr
("Ród boŸ modêÁûed %d", 
ªt
);

1510  
ªt
;

1513 *
boŸ_mode
 &
CTS_DEV_BOOT_MODE_MASK
;

1515 
	`˘s_öfo
("Cuº dev boŸ mode: %u(%s)", *
boŸ_mode
,

1516 
	`˘s_dev_boŸ_mode2°r
(*
boŸ_mode
));

1518 
	}
}

1520 
	$˘s_£t_dev_boŸ_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

1521 
u8
 
boŸ_mode
)

1523 
ªt
;

1525 
	`˘s_öfo
("Së dev boŸ modêtÿ%u(%s)", 
boŸ_mode
,

1526 
	`˘s_dev_boŸ_mode2°r
(
boŸ_mode
));

1528 
ªt
 = 
	`˘s_hw_ªg_wrôeb_ªåy
(
˘s_dev
, 
CTS_DEV_HW_REG_BOOT_MODE
,

1529 
boŸ_mode
, 5, 5);

1530 i‡(
ªt
) {

1531 
	`˘s_îr
("WrôêhwÑegi°î BOOT_MODE faûed %d", 
ªt
);

1532  
ªt
;

1536 
	}
}

1538 
	$˘s_öô_fwd©a
(
˘s_devi˚
 *
˘s_dev
)

1540 
˘s_devi˚_fwd©a
 *
fwd©a
 = &
˘s_dev
->fwdata;

1541 
u8
 
vÆ
;

1542 
ªt
;

1544 
	`˘s_öfo
("Init firmware data");

1546 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

1547 
	`˘s_îr
("Init firmware data while inÖrogram mode");

1548  -
EINVAL
;

1551 
ªt
 = 
	`˘s_gë_fúmw¨e_vîsi⁄
(
˘s_dev
, &
fwd©a
->
vîsi⁄
);

1552 i‡(
ªt
) {

1553 
	`˘s_îr
("Ród fúmw¨êvîsi⁄ faûed %d", 
ªt
);

1554  
ªt
;

1556 
	`˘s_öfo
(" %-24s: %04x", "Fúmw¨êvîsi⁄", 
fwd©a
->
vîsi⁄
);

1558 
ªt
 = 
	`˘s_gë_lib_vîsi⁄
(
˘s_dev
, &
fwd©a
->
lib_vîsi⁄
);

1559 i‡(
ªt
) {

1560 
	`˘s_îr
("Ród fúmw¨êLib vîsi⁄ faûed %d", 
ªt
);

1562 
	`˘s_öfo
(" %-24s: v%x.%x", "FimrwareÜib verion",

1563 (
u8
)(
fwd©a
->
lib_vîsi⁄
 >> 8),

1564 (
u8
)(
fwd©a
->
lib_vîsi⁄
));

1566 
ªt
 = 
	`˘s_gë_ddi_vîsi⁄
(
˘s_dev
, &
fwd©a
->
ddi_vîsi⁄
);

1567 i‡(
ªt
) {

1568 
	`˘s_îr
("Ród ddòvîsi⁄ faûed %d", 
ªt
);

1569  
ªt
;

1571 
	`˘s_öfo
(" %-24s: %02x", "DDI inô codêvîi⁄", 
fwd©a
->
ddi_vîsi⁄
);

1573 
ªt
 = 
	`˘s_gë_x_ªsﬁuti⁄
(
˘s_dev
, &
fwd©a
->
ªs_x
);

1574 i‡(
ªt
) {

1575 
	`˘s_îr
("Ród fúmw¨êXÑesﬁti⁄ faûed %d", 
ªt
);

1576  
ªt
;

1578 
	`˘s_öfo
(" %-24s: %u", "XÑesﬁuti⁄", 
fwd©a
->
ªs_x
);

1580 
ªt
 = 
	`˘s_gë_y_ªsﬁuti⁄
(
˘s_dev
, &
fwd©a
->
ªs_y
);

1581 i‡(
ªt
) {

1582 
	`˘s_îr
("Ród fúmw¨êYÑesﬁuti⁄ faûed %d", 
ªt
);

1583  
ªt
;

1585 
	`˘s_öfo
(" %-24s: %u", "YÑesﬁuti⁄", 
fwd©a
->
ªs_y
);

1587 
ªt
 = 
	`˘s_gë_num_rows
(
˘s_dev
, &
fwd©a
->
rows
);

1588 i‡(
ªt
) {

1589 
	`˘s_îr
("Ród fúmw¨ênum TX faûed %d", 
ªt
);

1590  
ªt
;

1592 
	`˘s_öfo
(" %-24s: %u", "NumÑows", 
fwd©a
->
rows
);

1594 
ªt
 = 
	`˘s_gë_num_cﬁs
(
˘s_dev
, &
fwd©a
->
cﬁs
);

1595 i‡(
ªt
) {

1596 
	`˘s_îr
("Ród fúmw¨ênum RX faûed %d", 
ªt
);

1597  
ªt
;

1599 
	`˘s_öfo
(" %-24s: %u", "Num cﬁs", 
fwd©a
->
cﬁs
);

1601 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_FLAG_BITS
, &
vÆ
);

1602 i‡(
ªt
) {

1603 
	`˘s_îr
("Ród FW_REG_FLIP_X/Y faûed %d", 
ªt
);

1604  
ªt
;

1606 
˘s_dev
->
fwd©a
.
Êù_x
 = !!(
vÆ
 & 
	`BIT
(2));

1607 
˘s_dev
->
fwd©a
.
Êù_y
 = !!(
vÆ
 & 
	`BIT
(3));

1608 
	`˘s_öfo
(" %-24s: %s", "Flip X",

1609 
˘s_dev
->
fwd©a
.
Êù_x
 ? "True" : "Flase");

1610 
	`˘s_öfo
(" %-24s: %s", "Flip Y",

1611 
˘s_dev
->
fwd©a
.
Êù_y
 ? "True" : "Flase");

1613 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_SWAP_AXES
, &
vÆ
);

1614 i‡(
ªt
) {

1615 
	`˘s_îr
("Ród FW_REG_SWAP_AXES faûed %d", 
ªt
);

1616  
ªt
;

1618 
	`˘s_öfo
(" %-24s: %s", "Swapáxes",

1619 
˘s_dev
->
fwd©a
.
sw≠_axes
 ? "True" : "Flase");

1621 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

1622 
CTS_DEVICE_FW_REG_INT_MODE
, &
fwd©a
->
öt_mode
);

1623 i‡(
ªt
) {

1624 
	`˘s_îr
("Ród fúmw¨êI¡ modêÁûed %d", 
ªt
);

1625  
ªt
;

1627 
	`˘s_öfo
(" %-24s: %s", "IntÖolarity",

1628 (
fwd©a
->
öt_mode
 == 0) ? "LOW" : "HIGH");

1630 
ªt
 = 
	`˘s_fw_ªg_ªadw
(
˘s_dev
,

1631 
CTS_DEVICE_FW_REG_INT_KEEP_TIME
, &
fwd©a
->
öt_kìp_time
);

1632 i‡(
ªt
) {

1633 
	`˘s_îr
("Ród fúmw¨êI¡ kì∞timêÁûed %d", 
ªt
);

1634  
ªt
;

1636 
	`˘s_öfo
(" %-24s: %d", "I¡ kì∞time", 
fwd©a
->
öt_kìp_time
);

1638 
ªt
 = 
	`˘s_fw_ªg_ªadw
(
˘s_dev
,

1639 
CTS_DEVICE_FW_REG_RAWDATA_TARGET
, &
fwd©a
->
øwd©a_èrgë
);

1640 i‡(
ªt
) {

1641 
	`˘s_îr
("Ród fúmw¨êRaw de° vÆuêÁûed %d", 
ªt
);

1642  
ªt
;

1644 
	`˘s_öfo
(" %-24s: %d", "RawÅ¨gë vÆue", 
fwd©a
->
øwd©a_èrgë
);

1647 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

1648 
CTS_DEVICE_FW_REG_ESD_PROTECTION
, &
fwd©a
->
esd_mëhod
);

1649 i‡(
ªt
) {

1650 
	`˘s_îr
("Ród fúmw¨êEsd mëhod faûed %d", 
ªt
);

1651  
ªt
;

1653 
	`˘s_öfo
(" %-24s: %d", "Esd mëhod", 
fwd©a
->
esd_mëhod
);

1655 #ifde‡
CONFIG_CTS_EARJACK_DETECT


1656 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

1657 
CTS_DEVICE_FW_REG_EARJACK_DETECT_SUPP
, &
vÆ
);

1658 i‡(
ªt
) {

1659 
	`˘s_îr
("Ród fúmw¨êórjack dëe˘ suµ‹àÁûed %d", 
ªt
);

1660  
ªt
;

1662 
fwd©a
->
suµ_hódph⁄e_ˇbÀ_ªje˘
 = !!(
vÆ
 & 
	`BIT
(0));

1663 
	`˘s_öfo
(" %-24s: %s", "Headphone cableÑeject",

1664 
fwd©a
->
suµ_hódph⁄e_ˇbÀ_ªje˘
 ? "True" : "False");

1668 
	}
}

1670 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


1671 
	$˘s_show_fw_log
(
˘s_devi˚
 *
˘s_dev
)

1673 
u8
 
Àn
, 
max_Àn
;

1674 
ªt
;

1675 
u8
 *
d©a
;

1677 
max_Àn
 = 
	`˘s_∂©_gë_max_fw_log_size
(
˘s_dev
->
pd©a
);

1678 
d©a
 = 
	`˘s_∂©_gë_fw_log_buf
(
˘s_dev
->
pd©a
, 
max_Àn
);

1679 
ªt
 = 
	`˘s_fw_ªg_ªadsb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_TOUCH_INFO
+1, &
Àn
, 1);

1680 i‡(
ªt
) {

1681 
	`˘s_îr
("Get i2cÖrint bufÜenÉrror");

1684 i‡(
Àn
 >
max_Àn
) {

1685 
Àn
 = 
max_Àn
 - 1;

1687 
ªt
 = 
	`˘s_fw_ªg_ªadsb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_TOUCH_INFO
+2, 
d©a
, 
Àn
);

1688 i‡(
ªt
) {

1689 
	`˘s_îr
("Get i2cÖrint bufÉrror");

1692 
d©a
[
Àn
] = '\0';

1693 
	`¥ötk
("CTS-FW_LOG %s", 
d©a
);

1694 
	`˘s_fw_log_show_föish
(
˘s_dev
);

1695 
	}
}

1698 
	$˘s_úq_h™dÀr
(
˘s_devi˚
 *
˘s_dev
)

1700 
ªt
;

1702 
	`˘s_dbg
("Enter IRQ handler");

1704 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

1705 
	`˘s_îr
("IRQÅriggered inÖrogram mode");

1706  -
EINVAL
;

1709 i‡(
	`u∆ikñy
(
˘s_dev
->
πd©a
.
su•íded
)) {

1710 #ifde‡
CFG_CTS_GESTURE


1711 i‡(
˘s_dev
->
πd©a
.
ge°uª_wakeup_íabÀd
) {

1712 
˘s_devi˚_ge°uª_öfo
 
ge°uª_öfo
;

1714 
	`˘s_öfo
("Get gesture info");

1715 
ªt
 = 
	`˘s_gë_ge°uª_öfo
(
˘s_dev
,

1716 &
ge°uª_öfo
, 
CFG_CTS_GESTURE_REPORT_TRACE
);

1717 i‡(
ªt
) {

1718 
	`˘s_w¨n
("Gë ge°uª infÿÁûed %d", 
ªt
);

1725 
	`˘s_öfo
("Set deviceÉnter gesture mode");

1726 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_SUSPEND_WITH_GESTURE
);

1728 
ªt
 = 
	`˘s_∂©_¥o˚ss_ge°uª_öfo
(
˘s_dev
->
pd©a
, &
ge°uª_öfo
);

1729 i‡(
ªt
) {

1730 
	`˘s_îr
("Pro˚s†ge°uª infÿÁûed %d", 
ªt
);

1731  
ªt
;

1734 
	`˘s_w¨n
("IRQÅriggered while device suspended "

1739 
˘s_devi˚_touch_öfo
 *
touch_öfo
;

1741 
touch_öfo
 = &
˘s_dev
->
pd©a
->touch_info;

1742 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


1743 
ªt
 = 
	`˘s_fw_ªg_ªadsb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_TOUCH_INFO
, 
touch_öfo
, 1);

1744 i‡(
ªt
) {

1745 
	`˘s_îr
("Gë vkey_°©êÁûed %d", 
ªt
);

1746  
ªt
;

1749 i‡(
touch_öfo
->
vkey_°©e
 =
CTS_FW_LOG_REDIRECT_SIGN
) {

1750 i‡(
	`˘s_is_fw_log_ªdúe˘
(
˘s_dev
)) {

1751 
	`˘s_show_fw_log
(
˘s_dev
);

1756 
ªt
 = 
	`˘s_gë_touchöfo
(
˘s_dev
, 
touch_öfo
);

1757 i‡(
ªt
) {

1758 
	`˘s_îr
("GëÅouch infÿÁûed %d", 
ªt
);

1759  
ªt
;

1762 
	`˘s_dbg
("Touch info: vkey_state %x,Çum_msg %u",

1763 
touch_öfo
->
vkey_°©e
,Åouch_öfo->
num_msg
);

1765 
ªt
 = 
	`˘s_∂©_¥o˚ss_touch_msg
(
˘s_dev
->
pd©a
,

1766 
touch_öfo
->
msgs
,Åouch_öfo->
num_msg
);

1767 i‡(
ªt
) {

1768 
	`˘s_îr
("Pro˚s†touch msg faûed %d", 
ªt
);

1769  
ªt
;

1772 #ifde‡
CONFIG_CTS_VIRTUALKEY


1773 
ªt
 = 
	`˘s_∂©_¥o˚ss_vkey
(
˘s_dev
->
pd©a
, 
touch_öfo
->
vkey_°©e
);

1774 i‡(
ªt
) {

1775 
	`˘s_îr
("Pro˚s†vkey faûed %d", 
ªt
);

1776  
ªt
;

1782 
	}
}

1784 
boﬁ
 
	$˘s_is_devi˚_su•íded
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

1786  
˘s_dev
->
πd©a
.
su•íded
;

1787 
	}
}

1789 
	$˘s_su•íd_devi˚
(
˘s_devi˚
 *
˘s_dev
)

1791 
ªt
;

1793 
	`˘s_öfo
("Suspend device");

1795 i‡(
˘s_dev
->
πd©a
.
su•íded
) {

1796 
	`˘s_w¨n
("Suspend device whileálready suspended");

1799 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

1800 
	`˘s_öfo
("QuitÖrogramming mode before suspend");

1801 
ªt
 = 
	`˘s_íãr_n‹mÆ_mode
(
˘s_dev
);

1802 i‡(
ªt
) {

1803 
	`˘s_îr
("FaûedÅÿexôÖrogøm modêbef‹êsu•íd:%d", 
ªt
);

1804  
ªt
;

1807 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
,

1808 
˘s_dev
->
πd©a
.
ge°uª_wakeup_íabÀd
 ?

1809 
CTS_CMD_SUSPEND_WITH_GESTURE
 : 
CTS_CMD_SUSPEND
);

1811 i‡(
ªt
){

1812 
	`˘s_îr
("Su•íd devi˚ faûed %d", 
ªt
);

1814  
ªt
;

1817 
	`˘s_öfo
("Device suspended ...");

1818 
˘s_dev
->
πd©a
.
su•íded
 = 
åue
;

1821 
	}
}

1823 
	$˘s_ªsume_devi˚
(
˘s_devi˚
 *
˘s_dev
)

1825 
ªt
 = 0;

1826 
ªåõs
 = 3;

1828 
	`˘s_öfo
("Resume device");

1831 --
ªåõs
 >= 0) {

1832 #ifde‡
CFG_CTS_HAS_RESET_PIN


1833 
	`˘s_∂©_ª£t_devi˚
(
˘s_dev
->
pd©a
);

1835 
	`˘s_£t_n‹mÆ_addr
(
˘s_dev
);

1836 #ifde‡
CONFIG_CTS_I2C_HOST


1837 i‡(
	`˘s_∂©_is_i2c_⁄löe
(
˘s_dev
->
pd©a
, 
CTS_DEV_NORMAL_MODE_I2CADDR
))

1839 i‡(
	`˘s_∂©_is_n‹mÆ_mode
(
˘s_dev
->
pd©a
))

1846 i‡(
ªåõs
 < 0) {

1847 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
;

1849 
	`˘s_öfo
("Need update firmware whenÑesume");

1850 
fúmw¨e
 = 
	`˘s_ªque°_fúmw¨e
(
˘s_dev
->
hwd©a
->
hwid
,

1851 
˘s_dev
->
hwd©a
->
fwid
, 0);

1852 i‡(
fúmw¨e
) {

1853 
ªt
 = 
	`˘s_upd©e_fúmw¨e
(
˘s_dev
, 
fúmw¨e
, 
åue
);

1854 
	`˘s_ªÀa£_fúmw¨e
(
fúmw¨e
);

1856 i‡(
ªt
) {

1857 
	`˘s_îr
("Upd©êdeÁu… fúmw¨êÁûed %d", 
ªt
);

1858 
îr_£t_¥ogøm_mode
;

1861 
	`˘s_îr
("Request default firmware failed %d, "

1862 "∂ó£ upd©êm™uÆly!!", 
ªt
);

1864 
îr_£t_¥ogøm_mode
;

1868 #ifde‡
CONFIG_CTS_CHARGER_DETECT


1869 i‡(
	`˘s_is_ch¨gî_exi°
(
˘s_dev
)) {

1870 
r
 = 
	`˘s_£t_dev_ch¨gî_©èched
(
˘s_dev
, 
åue
);

1871 i‡(
r
) {

1872 
	`˘s_îr
("Së dev ch¨gîáâached faûed %d", 
r
);

1877 #ifde‡
CONFIG_CTS_EARJACK_DETECT


1878 i‡(
˘s_dev
->
fwd©a
.
suµ_hódph⁄e_ˇbÀ_ªje˘
 &&

1879 
	`˘s_is_órjack_exi°
(
˘s_dev
)) {

1880 
r
 = 
	`˘s_£t_dev_órjack_©èched
(
˘s_dev
, 
åue
);

1881 i‡(
r
) {

1882 
	`˘s_îr
("Së devÉ¨jackáâached faûed %d", 
r
);

1887 #ifde‡
CONFIG_CTS_GLOVE


1888 i‡(
	`˘s_is_glove_íabÀd
(
˘s_dev
)) {

1889 
	`˘s_íãr_glove_mode
(
˘s_dev
);

1893 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


1894 i‡(
	`˘s_is_fw_log_ªdúe˘
(
˘s_dev
)) {

1895 
	`˘s_íabÀ_fw_log_ªdúe˘
(
˘s_dev
);

1899 
˘s_dev
->
πd©a
.
su•íded
 = 
Ál£
;

1902 
îr_£t_¥ogøm_mode
:

1903 
˘s_dev
->
πd©a
.
¥ogøm_mode
 = 
åue
;

1904 
˘s_dev
->
πd©a
.
¶ave_addr
 = 
CTS_DEV_PROGRAM_MODE_I2CADDR
;

1905 
˘s_dev
->
πd©a
.
addr_width
 = 
CTS_DEV_PROGRAM_MODE_ADDR_WIDTH
;

1907  
ªt
;

1908 
	}
}

1910 
boﬁ
 
	$˘s_is_devi˚_¥ogøm_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

1912  
˘s_dev
->
πd©a
.
¥ogøm_mode
;

1913 
	}
}

1915 
ölöe
 
	$˘s_öô_πd©a_wôh_n‹mÆ_mode
(
˘s_devi˚
 *
˘s_dev
)

1917 
	`mem£t
(&
˘s_dev
->
πd©a
, 0, (cts_dev->rtdata));

1919 
	`˘s_£t_n‹mÆ_addr
(
˘s_dev
);

1920 
˘s_dev
->
πd©a
.
su•íded
 = 
Ál£
;

1921 
˘s_dev
->
πd©a
.
upd©ög
 = 
Ál£
;

1922 
˘s_dev
->
πd©a
.
ã°ög
 = 
Ál£
;

1923 
˘s_dev
->
πd©a
.
fw_log_ªdúe˘_íabÀd
 = 
Ál£
;

1924 
˘s_dev
->
πd©a
.
glove_mode_íabÀd
 = 
Ál£
;

1925 
	}
}

1927 
	$˘s_íãr_¥ogøm_mode
(
˘s_devi˚
 *
˘s_dev
)

1929 c⁄° 
u8
 
magic_num
[] = {0xCC, 0x33, 0x55, 0x5A};

1930 
u8
 
boŸ_mode
;

1931 
ªt
;

1933 
	`˘s_öfo
("EnterÖrogram mode");

1935 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

1936 
	`˘s_w¨n
("EnterÖrogram mode whileálredy in");

1940 #ifde‡
CONFIG_CTS_I2C_HOST


1941 
ªt
 = 
	`˘s_∂©_i2c_wrôe
(
˘s_dev
->
pd©a
,

1942 
CTS_DEV_PROGRAM_MODE_I2CADDR
, 
magic_num
, 4, 5, 10);

1943 i‡(
ªt
) {

1944 
	`˘s_îr
("Write magicÇumberÅo i2c_dev: 0x%02x failed %d",

1945 
CTS_DEV_PROGRAM_MODE_I2CADDR
, 
ªt
);

1946  
ªt
;

1949 
	`˘s_£t_¥ogøm_addr
(
˘s_dev
);

1951 
ªt
 = 
	`˘s_hw_ªg_wrôeb_ªåy
(
˘s_dev
, 0x37001, 0x0F, 5, 1);

1952 i‡(
ªt
) {

1953 
	`˘s_îr
("Write i2c deglitchÑegister failed\n");

1957 
	`˘s_£t_¥ogøm_addr
(
˘s_dev
);

1958 
	`˘s_∂©_ª£t_devi˚
(
˘s_dev
->
pd©a
);

1959 
ªt
 = 
	`˘s_∂©_•i_wrôe
(
˘s_dev
->
pd©a
,

1960 0xcc, &
magic_num
[1], 3, 5, 10);

1961 i‡(
ªt
) {

1962 
	`˘s_îr
("Write magicÇumberÅo i2c_dev: 0x%02x failed %d",

1963 
CTS_DEV_PROGRAM_MODE_SPIADDR
, 
ªt
);

1964  
ªt
;

1967 
ªt
 = 
	`˘s_gë_dev_boŸ_mode
(
˘s_dev
, &
boŸ_mode
);

1968 i‡(
ªt
) {

1969 
	`˘s_îr
("Ród BOOT_MODE faûed %d", 
ªt
);

1970  
ªt
;

1973 #ifde‡
CONFIG_CTS_I2C_HOST


1974 i‡(
boŸ_mode
 !
CTS_DEV_BOOT_MODE_I2C_PROGRAM
)

1976 i‡(
boŸ_mode
 !
CTS_DEV_BOOT_MODE_SPI_PROGRAM
)

1979 
	`˘s_îr
("BOOT_MODEÑódback %u !I2C/SPI PROMGRAM mode", 
boŸ_mode
);

1980  -
EFAULT
;

1984 
	}
}

1986 c⁄° *
	$˘s_dev_boŸ_mode2°r
(
u8
 
boŸ_mode
)

1988 
	#ˇ£_boŸ_mode
(
mode
) \

1989 
CTS_DEV_BOOT_MODE_
 ## 
mode
:  #modê"-BOOT"

	)

1991 
boŸ_mode
) {

1992 
	`ˇ£_boŸ_mode
(
FLASH
);

1993 
	`ˇ£_boŸ_mode
(
I2C_PROGRAM
);

1994 
	`ˇ£_boŸ_mode
(
SRAM
);

1995 
	`ˇ£_boŸ_mode
(
SPI_PROGRAM
);

1999 #unde‡
ˇ£_boŸ_mode


2000 
	}
}

2002 
	$˘s_íãr_n‹mÆ_mode
(
˘s_devi˚
 *
˘s_dev
)

2004 
ªt
 = 0;

2005 
u8
 
boŸ_mode
;

2006 
ªåõs
;

2007 
u16
 
fwid
 = 
CTS_DEV_FWID_INVALID
;

2008 
u8
 
auto_boŸ
 = 0;

2009 
u8
 
fú°_boŸ
 = 1;

2011 
	`˘s_öfo
("EnterÇormal mode");

2013 i‡(!
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

2014 
	`˘s_w¨n
("EnterÇormal mode whileálready in");

2018 i‡(
˘s_dev
->
πd©a
.
has_Êash
) {

2019 
auto_boŸ
 = 1;

2021 #ifde‡
CFG_CTS_UPDATE_CRCCHECK


2022 i‡(
˘s_dev
->
hwd©a
->
hwid
 =
CTS_DEV_HWID_ICNL9911S
) {

2023 
auto_boŸ
 = 1;

2026 
ªåõs
 = 5;Ñetries >= 0;Ñetries--) {

2027 i‡(
fú°_boŸ
 =1 || 
auto_boŸ
 == 0) {

2028 
	`˘s_£t_¥ogøm_addr
(
˘s_dev
);

2029 
ªt
 = 
	`˘s_£t_dev_boŸ_mode
(
˘s_dev
, 
CTS_DEV_BOOT_MODE_SRAM
);

2030 i‡(
ªt
) {

2031 
	`˘s_îr
("Së BOOT_MODEÅÿSRAM faûed %d,ÅryÅÿª£àdevi˚", 
ªt
);

2033 
	`mdñay
(30);

2035 
fú°_boŸ
 = 0;

2036 #ifde‡
CONFIG_CTS_I2C_HOST


2037 i‡(
	`˘s_∂©_is_i2c_⁄löe
(
˘s_dev
->
pd©a
, 
CTS_DEV_NORMAL_MODE_I2CADDR
)) {

2038 
	`˘s_£t_n‹mÆ_addr
(
˘s_dev
);

2041 
	`˘s_£t_n‹mÆ_addr
(
˘s_dev
);

2043 
ªt
 = 
	`˘s_gë_dev_boŸ_mode
(
˘s_dev
, &
boŸ_mode
);

2044 i‡(
ªt
) {

2045 
	`˘s_îr
("Gë BOOT_MODE faûed %d", 
ªt
);

2047 i‡(
boŸ_mode
 !
CTS_DEV_BOOT_MODE_SRAM
) {

2048 
	`˘s_îr
("Curr boot mode %u(%s) != SRAM_BOOT",

2049 
boŸ_mode
, 
	`˘s_dev_boŸ_mode2°r
(boot_mode));

2054 
ªt
 = 
	`˘s_gë_fwid
(
˘s_dev
, &
fwid
);

2055 i‡(
ªt
) {

2056 
	`˘s_îr
("Gë fúmw¨êid faûed %d,Ñërõ†%d", 
ªt
, 
ªåõs
);

2058 i‡(
fwid
 =
CTS_DEV_FWID_ICNL9911
 || fwid =
CTS_DEV_FWID_ICNL9911S
)

2060 
	`˘s_öfo
("Gë fúmw¨êid suc˚ssfu»0x%02x", 
fwid
);

2064 
	`˘s_∂©_ª£t_devi˚
(
˘s_dev
->
pd©a
);

2066 i‡(
ªåõs
 >= 0) {

2067 
ªt
 = 
	`˘s_öô_fwd©a
(
˘s_dev
);

2068 i‡(
ªt
) {

2069 
	`˘s_îr
("Devi˚ inô fúmw¨êd©®Áûed %d", 
ªt
);

2070  
ªt
;

2074 
	`˘s_£t_¥ogøm_addr
(
˘s_dev
);

2075  
ªt
;

2076 
	}
}

2078 
boﬁ
 
	$˘s_is_devi˚_íabÀd
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

2080  
˘s_dev
->
íabÀd
;

2081 
	}
}

2083 
	$˘s_°¨t_devi˚
(
˘s_devi˚
 *
˘s_dev
)

2085 #i‡
	`deföed
(
CONFIG_CTS_ESD_PROTECTION
Ë|| deföed(
CONFIG_CTS_CHARGER_DETECT
Ë|| deföed(
CONFIG_CTS_EARJACK_DETECT
)

2086 
chù⁄e_ts_d©a
 *
˘s_d©a
 =

2087 
	`c⁄èöî_of
(
˘s_dev
, 
chù⁄e_ts_d©a
, cts_dev);

2089 
ªt
;

2091 
	`˘s_öfo
("Start device...");

2093 i‡(
	`˘s_is_devi˚_íabÀd
(
˘s_dev
)) {

2094 
	`˘s_w¨n
("Start device whileálready started");

2098 #ifde‡
CONFIG_CTS_ESD_PROTECTION


2099 
	`˘s_íabÀ_esd_¥Ÿe˘i⁄
(
˘s_d©a
);

2102 #ifde‡
CONFIG_CTS_CHARGER_DETECT


2103 
	`˘s_°¨t_ch¨gî_dëe˘
(
˘s_d©a
);

2106 #ifde‡
CONFIG_CTS_EARJACK_DETECT


2107 i‡(
˘s_dev
->
fwd©a
.
suµ_hódph⁄e_ˇbÀ_ªje˘
) {

2108 
	`˘s_°¨t_órjack_dëe˘
(
˘s_d©a
);

2112 i‡((
ªt
 = 
	`˘s_∂©_íabÀ_úq
(
˘s_dev
->
pd©a
)) < 0) {

2113 
	`˘s_îr
("E«bÀ IRQ faûed %d", 
ªt
);

2114  
ªt
;

2117 
˘s_dev
->
íabÀd
 = 
åue
;

2119 
	`˘s_öfo
("Start device successfully");

2122 
	}
}

2124 
	$˘s_°›_devi˚
(
˘s_devi˚
 *
˘s_dev
)

2126 
chù⁄e_ts_d©a
 *
˘s_d©a
 =

2127 
	`c⁄èöî_of
(
˘s_dev
, 
chù⁄e_ts_d©a
, cts_dev);

2128 
ªt
;

2130 
	`˘s_öfo
("Stop device...");

2132 i‡(!
	`˘s_is_devi˚_íabÀd
(
˘s_dev
)) {

2133 
	`˘s_w¨n
("Stop device while halted");

2137 i‡(
	`˘s_is_fúmw¨e_upd©ög
(
˘s_dev
)) {

2138 
	`˘s_w¨n
("Stop device while firmware updating,ÖleaseÅryágain");

2139  -
EAGAIN
;

2142 i‡((
ªt
 = 
	`˘s_∂©_dißbÀ_úq
(
˘s_dev
->
pd©a
)) < 0) {

2143 
	`˘s_îr
("DißbÀ IRQ faûed %d", 
ªt
);

2144  
ªt
;

2147 
˘s_dev
->
íabÀd
 = 
Ál£
;

2149 #ifde‡
CONFIG_CTS_ESD_PROTECTION


2150 
	`˘s_dißbÀ_esd_¥Ÿe˘i⁄
(
˘s_d©a
);

2153 #ifde‡
CONFIG_CTS_CHARGER_DETECT


2154 
	`˘s_°›_ch¨gî_dëe˘
(
˘s_d©a
);

2157 #ifde‡
CONFIG_CTS_EARJACK_DETECT


2158 i‡(
˘s_dev
->
fwd©a
.
suµ_hódph⁄e_ˇbÀ_ªje˘
) {

2159 
	`˘s_°›_órjack_dëe˘
(
˘s_d©a
);

2163 
	`Êush_w‹kqueue
(
˘s_d©a
->
w‹kqueue
);

2165 
ªt
 = 
	`˘s_∂©_ªÀa£_Æl_touch
(
˘s_dev
->
pd©a
);

2166 i‡(
ªt
) {

2167 
	`˘s_îr
("Rñó£áŒÅouch faûed %d", 
ªt
);

2168  
ªt
;

2171 #ifde‡
CONFIG_CTS_VIRTUALKEY


2172 
ªt
 = 
	`˘s_∂©_ªÀa£_Æl_vkey
(
˘s_dev
->
pd©a
);

2173 i‡(
ªt
) {

2174 
	`˘s_îr
("Rñó£áŒ vkey faûed %d", 
ªt
);

2175  
ªt
;

2180 
	}
}

2182 #ifde‡
CONFIG_CTS_ESD_PROTECTION


2183 
	$˘s_°¨t_devi˚_esdªcovî
(
˘s_devi˚
 *
˘s_dev
)

2185 
ªt
;

2187 
	`˘s_öfo
("Start device...");

2189 i‡(
	`˘s_is_devi˚_íabÀd
(
˘s_dev
)) {

2190 
	`˘s_w¨n
("Start device whileálready started");

2194 i‡((
ªt
 = 
	`˘s_∂©_íabÀ_úq
(
˘s_dev
->
pd©a
)) < 0) {

2195 
	`˘s_îr
("E«bÀ IRQ faûed %d", 
ªt
);

2196  
ªt
;

2199 
˘s_dev
->
íabÀd
 = 
åue
;

2201 
	`˘s_öfo
("Start device successfully");

2204 
	}
}

2206 
	$˘s_°›_devi˚_esdªcovî
(
˘s_devi˚
 *
˘s_dev
)

2208 
chù⁄e_ts_d©a
 *
˘s_d©a
 =

2209 
	`c⁄èöî_of
(
˘s_dev
, 
chù⁄e_ts_d©a
, cts_dev);

2210 
ªt
;

2212 
	`˘s_öfo
("Stop device...");

2214 i‡(!
	`˘s_is_devi˚_íabÀd
(
˘s_dev
)) {

2215 
	`˘s_w¨n
("Stop device while halted");

2219 i‡(
	`˘s_is_fúmw¨e_upd©ög
(
˘s_dev
)) {

2220 
	`˘s_w¨n
("Stop device while firmware updating,ÖleaseÅryágain");

2221  -
EAGAIN
;

2224 i‡((
ªt
 = 
	`˘s_∂©_dißbÀ_úq
(
˘s_dev
->
pd©a
)) < 0) {

2225 
	`˘s_îr
("DißbÀ IRQ faûed %d", 
ªt
);

2226  
ªt
;

2229 
˘s_dev
->
íabÀd
 = 
Ál£
;

2231 
	`Êush_w‹kqueue
(
˘s_d©a
->
w‹kqueue
);

2233 
ªt
 = 
	`˘s_∂©_ªÀa£_Æl_touch
(
˘s_dev
->
pd©a
);

2234 i‡(
ªt
) {

2235 
	`˘s_îr
("Rñó£áŒÅouch faûed %d", 
ªt
);

2236  
ªt
;

2239 #ifde‡
CONFIG_CTS_VIRTUALKEY


2240 
ªt
 = 
	`˘s_∂©_ªÀa£_Æl_vkey
(
˘s_dev
->
pd©a
);

2241 i‡(
ªt
) {

2242 
	`˘s_îr
("Rñó£áŒ vkey faûed %d", 
ªt
);

2243  
ªt
;

2248 
	}
}

2251 
boﬁ
 
	$˘s_is_fwid_vÆid
(
u16
 
fwid
)

2253 
i
;

2255 
i
 = 0; i < 
	`ARRAY_SIZE
(
˘s_devi˚_hwd©as
); i++) {

2256 i‡(
˘s_devi˚_hwd©as
[
i
].
fwid
 == fwid) {

2257  
åue
;

2261  
Ál£
;

2262 
	}
}

2264 
boﬁ
 
	$˘s_is_hwid_vÆid
(
u32
 
hwid
)

2266 
i
;

2268 
i
 = 0; i < 
	`ARRAY_SIZE
(
˘s_devi˚_hwd©as
); i++) {

2269 i‡(
˘s_devi˚_hwd©as
[
i
].
hwid
 == hwid) {

2270  
åue
;

2274  
Ál£
;

2275 
	}
}

2277 
	$˘s_gë_fwid
(
˘s_devi˚
 *
˘s_dev
, 
u16
 *
fwid
)

2279 
ªt
;

2281 
	`˘s_öfo
("Get device firmware id");

2283 i‡(
˘s_dev
->
hwd©a
) {

2284 *
fwid
 = 
˘s_dev
->
hwd©a
->fwid;

2288 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

2289 
	`˘s_îr
("Get device firmware id while inÖrogram mode");

2290 
ªt
 = -
ENODEV
;

2291 
îr_out
;

2294 
ªt
 = 
	`˘s_fw_ªg_ªadw_ªåy
(
˘s_dev
,

2295 
CTS_DEVICE_FW_REG_CHIP_TYPE
, 
fwid
, 5, 1);

2296 i‡(
ªt
) {

2297 
îr_out
;

2300 *
fwid
 = 
	`be16_to_˝u
(*fwid);

2302 
	`˘s_öfo
("Devi˚ fúmw¨êid: %04x", *
fwid
);

2304 i‡(!
	`˘s_is_fwid_vÆid
(*
fwid
)) {

2305 
	`˘s_w¨n
("Gë invÆid fúmw¨êid %04x", *
fwid
);

2306 
ªt
 = -
EINVAL
;

2307 
îr_out
;

2312 
îr_out
:

2313 *
fwid
 = 
CTS_DEV_FWID_INVALID
;

2314  
ªt
;

2315 
	}
}

2317 
	$˘s_gë_hwid
(
˘s_devi˚
 *
˘s_dev
, 
u32
 *
hwid
)

2319 
ªt
;

2321 
	`˘s_öfo
("Get device hardware id");

2323 i‡(
˘s_dev
->
hwd©a
) {

2324 *
hwid
 = 
˘s_dev
->
hwd©a
->hwid;

2328 
	`˘s_öfo
("Device hardware dataÇot initialized,ÅryÅoÑead fromÑegister");

2330 i‡(!
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

2331 
ªt
 = 
	`˘s_íãr_¥ogøm_mode
(
˘s_dev
);

2332 i‡(
ªt
) {

2333 
	`˘s_îr
("E¡îÖrogøm modêÁûed %d", 
ªt
);

2334 
îr_out
;

2338 
ªt
 = 
	`˘s_hw_ªg_ªadl_ªåy
(
˘s_dev
, 
CTS_DEV_HW_REG_HARDWARE_ID
, 
hwid
, 5, 0);

2339 i‡(
ªt
) {

2340 
îr_out
;

2343 *
hwid
 = 
	`À32_to_˝u
(*hwid);

2344 *
hwid
 &= 0XFFFFFFF0;

2345 
	`˘s_öfo
("Devi˚ h¨dw¨êid: %04x", *
hwid
);

2347 i‡(!
	`˘s_is_hwid_vÆid
(*
hwid
)) {

2348 
	`˘s_w¨n
("Devi˚ h¨dw¨êid %04x invÆid", *
hwid
);

2349 
ªt
 = -
EINVAL
;

2350 
îr_out
;

2355 
îr_out
:

2356 *
hwid
 = 
CTS_DEV_HWID_INVALID
;

2357  
ªt
;

2358 
	}
}

2360 
	$˘s_¥obe_devi˚
(
˘s_devi˚
 *
˘s_dev
)

2362 
ªt
, 
ªåõs
 = 0;

2363 
u16
 
fwid
 = 
CTS_DEV_FWID_INVALID
;

2364 
u32
 
hwid
 = 
CTS_DEV_HWID_INVALID
;

2365 
u16
 
devi˚_fw_vî
 = 0;

2366 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
 = 
NULL
;

2368 
	`˘s_öfo
("Probe device");

2370 
ªad_fwid
:

2371 #ifde‡
CONFIG_CTS_I2C_HOST


2372 i‡(!
	`˘s_∂©_is_i2c_⁄löe
(
˘s_dev
->
pd©a
, 
CTS_DEV_NORMAL_MODE_I2CADDR
)) {

2373 
	`˘s_w¨n
("Normal mode i2cáddr is offline");

2376 i‡(!
	`˘s_∂©_is_n‹mÆ_mode
(
˘s_dev
->
pd©a
)) {

2377 
	`˘s_w¨n
("Normal mode spiáddr is offline");

2381 
	`˘s_öô_πd©a_wôh_n‹mÆ_mode
(
˘s_dev
);

2382 
ªt
 = 
	`˘s_gë_fwid
(
˘s_dev
, &
fwid
);

2383 i‡(
ªt
) {

2384 
	`˘s_îr
("Gë fúmw¨êid faûed %d,Ñërõ†%d", 
ªt
, 
ªåõs
);

2386 
ªt
 = 
	`˘s_fw_ªg_ªadw_ªåy
(
˘s_dev
,

2387 
CTS_DEVICE_FW_REG_VERSION
, &
devi˚_fw_vî
, 5, 0);

2388 i‡(
ªt
) {

2389 
	`˘s_îr
("Ród fúmw¨êvîsi⁄ faûed %d", 
ªt
);

2390 
devi˚_fw_vî
 = 0;

2393 
devi˚_fw_vî
 = 
	`be16_to_˝u
(device_fw_ver);

2394 
	`˘s_öfo
("Devi˚ fúmw¨êvîsi⁄: %04x", 
devi˚_fw_vî
);

2396 
öô_hwd©a
;

2402 
ªt
 = 
	`˘s_gë_hwid
(
˘s_dev
, &
hwid
);

2403 i‡(
ªt
 || 
hwid
 =
CTS_DEV_HWID_INVALID
) {

2404 
ªåõs
++;

2406 
	`˘s_îr
("Gë h¨dw¨êid faûed %dÑërõ†%d", 
ªt
, 
ªåõs
);

2408 i‡(
ªåõs
 < 3) {

2409 
	`˘s_∂©_ª£t_devi˚
(
˘s_dev
->
pd©a
);

2410 
ªad_fwid
;

2412  -
ENODEV
;

2416 
öô_hwd©a
:

2417 
ªt
 = 
	`˘s_öô_devi˚_hwd©a
(
˘s_dev
, 
hwid
, 
fwid
);

2418 i‡(
ªt
) {

2419 
	`˘s_îr
("Devi˚ hwid: %06x fwid: %04xÇŸ found", 
hwid
, 
fwid
);

2420  -
ENODEV
;

2423 #ifde‡
CFG_CTS_FIRMWARE_FORCE_UPDATE


2424 
	`˘s_w¨n
("Force update firmware");

2425 
fúmw¨e
 = 
	`˘s_ªque°_fúmw¨e
(
CTS_DEV_HWID_ANY
, 
CTS_DEV_FWID_ANY
, 0);

2427 
fúmw¨e
 = 
	`˘s_ªque°_fúmw¨e
(
hwid
, 
fwid
, 
devi˚_fw_vî
);

2431 
ªåõs
 = 0;

2432 
upd©e_fúmw¨e
:

2433 i‡(
fúmw¨e
) {

2434 ++
ªåõs
;

2435 
ªt
 = 
	`˘s_upd©e_fúmw¨e
(
˘s_dev
, 
fúmw¨e
, 
åue
);

2436 i‡(
ªt
) {

2437 
	`˘s_îr
("Upd©êfúmw¨êÁûed %dÑërõ†%d", 
ªt
, 
ªåõs
);

2439 i‡(
ªåõs
 < 3) {

2440 
	`˘s_∂©_ª£t_devi˚
(
˘s_dev
->
pd©a
);

2441 
upd©e_fúmw¨e
;

2443 
	`˘s_ªÀa£_fúmw¨e
(
fúmw¨e
);

2444  
ªt
;

2447 
	`˘s_ªÀa£_fúmw¨e
(
fúmw¨e
);

2450 i‡(
fwid
 =
CTS_DEV_FWID_INVALID
) {

2452  -
ENODEV
;

2454 
ªt
 = 
	`˘s_öô_fwd©a
(
˘s_dev
);

2455 i‡(
ªt
) {

2456 
	`˘s_îr
("Devi˚ inô fúmw¨êd©®Áûed %d", 
ªt
);

2457  
ªt
;

2463 
	}
}

2465 #ifde‡
CFG_CTS_GESTURE


2466 
	$˘s_íabÀ_ge°uª_wakeup
(
˘s_devi˚
 *
˘s_dev
)

2468 
	`˘s_öfo
("Enable gesture wakeup");

2469 
˘s_dev
->
πd©a
.
ge°uª_wakeup_íabÀd
 = 
åue
;

2470 
	}
}

2472 
	$˘s_dißbÀ_ge°uª_wakeup
(
˘s_devi˚
 *
˘s_dev
)

2474 
	`˘s_öfo
("Disable gesture wakeup");

2475 
˘s_dev
->
πd©a
.
ge°uª_wakeup_íabÀd
 = 
Ál£
;

2476 
	}
}

2478 
boﬁ
 
	$˘s_is_ge°uª_wakeup_íabÀd
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

2480  
˘s_dev
->
πd©a
.
ge°uª_wakeup_íabÀd
;

2481 
	}
}

2483 
	$˘s_gë_ge°uª_öfo
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

2484 *
ge°uª_öfo
, 
boﬁ
 
åa˚_poöt
)

2486 
ªt
;

2488 
	`˘s_öfo
("Get gesture info");

2490 i‡(
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

2491 
	`˘s_w¨n
("Get gesture info inÖrogram mode");

2492  -
ENODEV
;

2495 i‡(!
˘s_dev
->
πd©a
.
su•íded
) {

2496 
	`˘s_w¨n
("Get gesture info whileÇot suspended");

2497  -
ENODEV
;

2500 i‡(!
˘s_dev
->
πd©a
.
ge°uª_wakeup_íabÀd
) {

2501 
	`˘s_w¨n
("Get gesture info while gesture wakeupÇotÉnabled");

2502  -
ENODEV
;

2505 
ªt
 = 
	`˘s_fw_ªg_ªadsb
(
˘s_dev
,

2506 
CTS_DEVICE_FW_REG_GESTURE_INFO
, 
ge°uª_öfo
, 2);

2507 if(
ªt
) {

2508 
	`˘s_îr
("Ród ge°uª infÿhódî faûed %d", 
ªt
);

2509  
ªt
;

2512 i‡(
åa˚_poöt
) {

2513 
ªt
 = 
	`˘s_fw_ªg_ªadsb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_GESTURE_INFO
 + 2,

2514 
ge°uª_öfo
 + 2,

2515 (((
u8
 *)
ge°uª_öfo
))[1] * (
˘s_devi˚_ge°uª_poöt
));

2516 if(
ªt
) {

2517 
	`˘s_îr
("Ród ge°uªÅø˚Öoöt†Áûed %d", 
ªt
);

2518  
ªt
;

2523 
	}
}

2526 #ifde‡
CONFIG_CTS_ESD_PROTECTION


2527 
	$˘s_esd_¥Ÿe˘i⁄_w‹k
(
w‹k_°ru˘
 *
w‹k
)

2529 
chù⁄e_ts_d©a
 *
˘s_d©a
;

2530 
ªt
;

2532 
	`˘s_öfo
("ESDÖrotection work");

2533 
˘s_d©a
 = 
	`c⁄èöî_of
(
w‹k
, 
chù⁄e_ts_d©a
, 
esd_w‹k
.work);

2534 
	`˘s_lock_devi˚
(&
˘s_d©a
->
˘s_dev
);

2535 #ifde‡
CONFIG_CTS_I2C_HOST


2536 i‡(!
	`˘s_∂©_is_i2c_⁄löe
(
˘s_d©a
->
pd©a
, 
CTS_DEV_NORMAL_MODE_I2CADDR
))

2538 i‡(!
	`˘s_∂©_is_n‹mÆ_mode
(
˘s_d©a
->
pd©a
))

2541 
˘s_d©a
->
esd_check_Áû_˙t
++;

2543 i‡((
˘s_d©a
->
esd_check_Áû_˙t
 % 2) == 0) {

2544 
	`˘s_îr
("ESDÖrotectionÑeadÇormal mode failed,Ñeset chip!");

2545 
ªt
 = 
	`˘s_∂©_ª£t_devi˚
(
˘s_d©a
->
pd©a
);

2546 i‡(
ªt
) {

2547 
	`˘s_îr
("ESDÖrŸe˘i⁄Ñe£àchù faûed %d", 
ªt
);

2551 
˘s_d©a
->
esd_check_Áû_˙t
 = 0;

2554 i‡(
˘s_d©a
->
esd_check_Áû_˙t
 >
CFG_CTS_ESD_FAILED_CONFIRM_CNT
) {

2555 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
;

2557 
	`˘s_w¨n
("ESDÖrotection check failed, update firmware!!!");

2558 
	`˘s_°›_devi˚_esdªcovî
(&
˘s_d©a
->
˘s_dev
);

2559 
fúmw¨e
 = 
	`˘s_ªque°_fúmw¨e
(
˘s_d©a
->
˘s_dev
.
hwd©a
->
hwid
,

2560 
˘s_d©a
->
˘s_dev
.
hwd©a
->
fwid
, 0);

2561 i‡(
fúmw¨e
) {

2562 
ªt
 = 
	`˘s_upd©e_fúmw¨e
(&
˘s_d©a
->
˘s_dev
, 
fúmw¨e
, 
åue
);

2563 
	`˘s_ªÀa£_fúmw¨e
(
fúmw¨e
);

2565 i‡(
ªt
) {

2566 
	`˘s_îr
("Upd©êdeÁu… fúmw¨êÁûed %d", 
ªt
);

2569 
	`˘s_îr
("Request default firmware failed %d, "

2570 "∂ó£ upd©êm™uÆly!!", 
ªt
);

2572 
	`˘s_°¨t_devi˚_esdªcovî
(&
˘s_d©a
->
˘s_dev
);

2573 
˘s_d©a
->
esd_check_Áû_˙t
 = 0;

2575 
	`queue_dñayed_w‹k
(
˘s_d©a
->
esd_w‹kqueue
,

2576 &
˘s_d©a
->
esd_w‹k
, 
CFG_CTS_ESD_PROTECTION_CHECK_PERIOD
);

2578 
	`˘s_u∆ock_devi˚
(&
˘s_d©a
->
˘s_dev
);

2579 
	}
}

2581 
	$˘s_íabÀ_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

2583 i‡(
˘s_d©a
->
esd_w‹kqueue
 && !˘s_d©a->
esd_íabÀd
) {

2584 
	`˘s_öfo
("ESDÖrotectionÉnable");

2586 
˘s_d©a
->
esd_íabÀd
 = 
åue
;

2587 
˘s_d©a
->
esd_check_Áû_˙t
 = 0;

2588 
	`queue_dñayed_w‹k
(
˘s_d©a
->
esd_w‹kqueue
,

2589 &
˘s_d©a
->
esd_w‹k
, 
CFG_CTS_ESD_PROTECTION_CHECK_PERIOD
);

2591 
	}
}

2593 
	$˘s_dißbÀ_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

2595 i‡(
˘s_d©a
->
esd_w‹kqueue
 && cts_d©a->
esd_íabÀd
) {

2596 
	`˘s_öfo
("ESDÖrotection disable");

2598 
˘s_d©a
->
esd_íabÀd
 = 
Ál£
;

2599 
	`ˇn˚l_dñayed_w‹k
(&
˘s_d©a
->
esd_w‹k
);

2600 
	`Êush_w‹kqueue
(
˘s_d©a
->
esd_w‹kqueue
);

2602 
	}
}

2604 
	$˘s_öô_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

2606 
	`˘s_öfo
("Init ESDÖrotection");

2608 
	`INIT_DELAYED_WORK
(&
˘s_d©a
->
esd_w‹k
, 
˘s_esd_¥Ÿe˘i⁄_w‹k
);

2610 
˘s_d©a
->
esd_íabÀd
 = 
Ál£
;

2611 
˘s_d©a
->
esd_check_Áû_˙t
 = 0;

2612 
	}
}

2614 
	$˘s_deöô_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

2616 
	`˘s_öfo
("De-Init ESDÖrotection");

2618 i‡(
˘s_d©a
->
esd_w‹kqueue
 && cts_d©a->
esd_íabÀd
) {

2619 
˘s_d©a
->
esd_íabÀd
 = 
Ál£
;

2620 
	`ˇn˚l_dñayed_w‹k
(&
˘s_d©a
->
esd_w‹k
);

2622 
	}
}

2625 #ifde‡
CONFIG_CTS_GLOVE


2626 
	$˘s_íãr_glove_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

2628 
	`˘s_öfo
("Enter glove mode");

2630 
ªt
 = 
	`˘s_fw_ªg_wrôeb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_GLOVE_MODE
, 1);

2631 i‡(
ªt
) {

2632 
	`˘s_îr
("Enable Glove modeÉrr");

2635 
˘s_dev
->
πd©a
.
glove_mode_íabÀd
 = 
åue
;

2637  
ªt
;

2638 
	}
}

2640 
	$˘s_exô_glove_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

2642 
	`˘s_öfo
("Exit glove mode");

2644 
ªt
 = 
	`˘s_fw_ªg_wrôeb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_GLOVE_MODE
, 0);

2645 i‡(
ªt
) {

2646 
	`˘s_îr
("Exit Glove modeÉrr");

2649 
˘s_dev
->
πd©a
.
glove_mode_íabÀd
 = 
Ál£
;

2651  
ªt
;

2652 
	}
}

2654 
	$˘s_is_glove_íabÀd
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

2656  
˘s_dev
->
πd©a
.
glove_mode_íabÀd
;

2657 
	}
}

2661 #ifde‡
CONFIG_CTS_CHARGER_DETECT


2662 
boﬁ
 
	$˘s_is_ch¨gî_exi°
(
˘s_devi˚
 *
˘s_dev
)

2664 
chù⁄e_ts_d©a
 *
˘s_d©a
;

2665 
boﬁ
 
©èched
 = 
Ál£
;

2666 
ªt
;

2668 
˘s_d©a
 = 
	`c⁄èöî_of
(
˘s_dev
, 
chù⁄e_ts_d©a
, cts_dev);

2670 
ªt
 = 
	`˘s_is_ch¨gî_©èched
(
˘s_d©a
, &
©èched
);

2671 i‡(
ªt
) {

2672 
	`˘s_îr
("Gë ch¨gî sèã faûed %d", 
ªt
);

2675 
˘s_dev
->
πd©a
.
ch¨gî_exi°
 = 
©èched
;

2677  
©èched
;

2678 
	}
}

2680 
	$˘s_£t_dev_ch¨gî_©èched
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
©èched
)

2682 
ªt
;

2684 
	`˘s_öfo
("Së dev ch¨gî %s", 
©èched
 ? "ATTACHED" : "DETATCHED");

2685 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
,

2686 
©èched
 ? 
CTS_CMD_CHARGER_ATTACHED
 : 
CTS_CMD_CHARGER_DETACHED
);

2687 i‡(
ªt
) {

2688 i‡(
ªt
) {

2689 
	`˘s_îr
("Send CMD_CHARGER_%s failed %d",

2690 
©èched
 ? "ATTACHED" : "DETACHED", 
ªt
);

2694  
ªt
;

2695 
	}
}

2698 #ifde‡
CONFIG_CTS_EARJACK_DETECT


2699 
boﬁ
 
	$˘s_is_órjack_exi°
(
˘s_devi˚
 *
˘s_dev
)

2701 
chù⁄e_ts_d©a
 *
˘s_d©a
;

2702 
boﬁ
 
©èched
 = 
Ál£
;

2703 
ªt
;

2705 
˘s_d©a
 = 
	`c⁄èöî_of
(
˘s_dev
, 
chù⁄e_ts_d©a
, cts_dev);

2707 
ªt
 = 
	`˘s_is_órjack_©èched
(
˘s_d©a
, &
©èched
);

2708 i‡(
ªt
) {

2709 
	`˘s_îr
("GëÉ¨jack sèã faûed %d", 
ªt
);

2712  
©èched
;

2713 
	}
}

2715 
	$˘s_£t_dev_órjack_©èched
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
©èched
)

2717 
ªt
;

2719 
	`˘s_öfo
("Së devÉ¨jack %s", 
©èched
 ? "ATTACHED" : "DETATCHED");

2720 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
,

2721 
©èched
 ? 
CTS_CMD_EARJACK_ATTACHED
 : 
CTS_CMD_EARJACK_DETACHED
);

2722 i‡(
ªt
) {

2723 
	`˘s_îr
("Send CMD_EARJACK_%s failed %d",

2724 
©èched
 ? "ATTACHED" : "DETACHED", 
ªt
);

2727  
ªt
;

2728 
	}
}

2731 
	$˘s_íabÀ_fw_log_ªdúe˘
(
˘s_devi˚
 *
˘s_dev
)

2733 
ªt
;

2735 
	`˘s_öfo
("FwÜogÑedirectÉnable");

2736 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_ENABLE_FW_LOG_REDIRECT
);

2737 i‡(
ªt
) {

2738 
	`˘s_îr
("Síd CTS_CMD_ENABLE_FW_LOG_REDIRECT faûed %d", 
ªt
);

2740 
˘s_dev
->
πd©a
.
fw_log_ªdúe˘_íabÀd
 = 
åue
;

2742  
ªt
;

2743 
	}
}

2745 
	$˘s_dißbÀ_fw_log_ªdúe˘
(
˘s_devi˚
 *
˘s_dev
)

2747 
ªt
;

2749 
	`˘s_öfo
("FwÜogÑedirect disable");

2750 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_DISABLE_FW_LOG_REDIRECT
);

2751 i‡(
ªt
) {

2752 
	`˘s_îr
("Síd CTS_CMD_DISABLE_FW_LOG_REDIRECT faûed %d", 
ªt
);

2754 
˘s_dev
->
πd©a
.
fw_log_ªdúe˘_íabÀd
 = 
Ál£
;

2756  
ªt
;

2757 
	}
}

2759 
boﬁ
 
	$˘s_is_fw_log_ªdúe˘
(
˘s_devi˚
 *
˘s_dev
)

2761  
˘s_dev
->
πd©a
.
fw_log_ªdúe˘_íabÀd
;

2762 
	}
}

2764 
	$˘s_fw_log_show_föish
(
˘s_devi˚
 *
˘s_dev
)

2766 
ªt
;

2768 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_FW_LOG_SHOW_FINISH
);

2769 i‡(
ªt
) {

2770 
	`˘s_îr
("Síd CTS_CMD_FW_LOG_SHOW_FINISH faûed %d", 
ªt
);

2773  
ªt
;

2774 
	}
}

2776 
	$˘s_gë_com≥nßã_ˇp
(
˘s_devi˚
 *
˘s_dev
, 
u8
 *
ˇp
)

2778 
i
, 
ªt
;

2779 
u8
 
auto_ˇlib_comp_ˇp_íabÀd
;

2781 i‡(
˘s_dev
 =
NULL
 || 
ˇp
 == NULL) {

2782 
	`˘s_îr
("Get compensate cap with cts_dev(%p) or cap(%p) = NULL",

2783 
˘s_dev
, 
ˇp
);

2784  -
EINVAL
;

2787 i‡(
˘s_dev
->
hwd©a
->
hwid
 =
CTS_DEV_HWID_ICNL9911
 &&

2788 
˘s_dev
->
fwd©a
.
lib_vîsi⁄
 < 0x0500) {

2789 
	`˘s_îr
("ICNL9911Üib version 0x%04x < v5.0 "

2791 
˘s_dev
->
fwd©a
.
lib_vîsi⁄
);

2792  -
ENOTSUPP
;

2795 
	`˘s_öfo
("Get compensate cap");

2798 
	`˘s_öfo
(" - Getáuto calib comp capÉnable");

2799 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

2800 
CTS_DEVICE_FW_REG_AUTO_CALIB_COMP_CAP_ENABLE
,

2801 &
auto_ˇlib_comp_ˇp_íabÀd
);

2802 i‡(
ªt
) {

2803 
	`˘s_îr
("Gëáutÿˇlib com∞ˇ∞íabÀ faûed %d", 
ªt
);

2804  
ªt
;

2808 i‡(
auto_ˇlib_comp_ˇp_íabÀd
) {

2809 
u8
 
auto_ˇlib_comp_ˇp_d⁄e
;

2811 
	`˘s_öfo
(" - Waitáuto calib comp cap done...");

2813 
i
 = 0;

2815 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

2816 
CTS_DEVICE_FW_REG_AUTO_CALIB_COMP_CAP_DONE
,

2817 &
auto_ˇlib_comp_ˇp_d⁄e
);

2818 i‡(
ªt
) {

2819 
	`˘s_îr
("Gëáutÿˇlib com∞ˇ∞d⁄êÁûed %d", 
ªt
);

2821 i‡(
auto_ˇlib_comp_ˇp_d⁄e
) {

2822 
íabÀ_ªad_com≥nßã_ˇp
;

2826 
	`mdñay
(5);

2827 } ++
i
 < 100);

2829 
	`˘s_îr
("Waitáuto calib comp cap doneÅimeout");

2830  -
ETIMEDOUT
;

2833 
íabÀ_ªad_com≥nßã_ˇp
:

2834 
	`˘s_öfo
(" - EnableÑead comp cap");

2835 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_ENABLE_READ_CNEG
);

2836 i‡(
ªt
) {

2837 
	`˘s_îr
("E«bÀÑód com∞ˇ∞Áûed %d",
ªt
);

2838  
ªt
;

2842 
	`˘s_öfo
(" - Wait comp capÑeady...");

2843 
i
 = 0;

2845 
u8
 
ªady
;

2847 
	`mdñay
(5);

2849 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

2850 
CTS_DEVICE_FW_REG_COMPENSATE_CAP_READY
, &
ªady
);

2851 i‡(
ªt
) {

2852 
	`˘s_îr
("Ród com∞ˇ∞ªady faûed %d", 
ªt
);

2854 i‡(
ªady
) {

2855 
ªad_com≥nßã_ˇp
;

2858 } ++
i
 < 100);

2860 
	`˘s_îr
("Wait comp capÑeadyÅimeout");

2861  -
ETIMEDOUT
;

2863 
ªad_com≥nßã_ˇp
:

2865 
	`˘s_öfo
(" - Read comp cap");

2866 
ªt
 = 
	`˘s_fw_ªg_ªadsb_dñay_idÀ
(
˘s_dev
,

2867 
CTS_DEVICE_FW_REG_COMPENSATE_CAP
, 
ˇp
,

2868 
˘s_dev
->
hwd©a
->
num_row
 * cts_dev->hwd©a->
num_cﬁ
,

2870 i‡(
ªt
) {

2871 
	`˘s_îr
("Ród com∞ˇ∞Áûed %d",
ªt
);

2875 
	`˘s_öfo
(" - Clear comp capÑeady");

2876 
i
 = 0;

2878 
r
;

2879 
u8
 
ªady
;

2881 
r
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_DISABLE_READ_CNEG
);

2882 i‡(
r
) {

2883 
	`˘s_îr
("Síd cmd DISABLE_READ_CNEG faûed %d", 
r
);

2887 
	`mdñay
(5);

2888 
r
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

2889 
CTS_DEVICE_FW_REG_COMPENSATE_CAP_READY
, &
ªady
);

2890 i‡(
r
) {

2891 
	`˘s_îr
("Re-Check com∞ˇ∞ªady faûed %d", 
r
);

2895 i‡(
ªady
) {

2896 
	`˘s_w¨n
("Comp capÑeady is still set");

2899  
ªt
;

2901 }++
i
 < 100);

2903 
	`˘s_w¨n
("Clr comp capÑeady failed,ÅryÅo doÑeset!");

2906 
	`˘s_∂©_ª£t_devi˚
(
˘s_dev
->
pd©a
);

2908 #ifde‡
CONFIG_CTS_CHARGER_DETECT


2909 i‡(
	`˘s_is_ch¨gî_exi°
(
˘s_dev
)) {

2910 
r
 = 
	`˘s_£t_dev_ch¨gî_©èched
(
˘s_dev
, 
åue
);

2911 i‡(
r
) {

2912 
	`˘s_îr
("Së dev ch¨gîáâached faûed %d", 
r
);

2917 #ifde‡
CONFIG_CTS_EARJACK_DETECT


2918 i‡(
˘s_dev
->
fwd©a
.
suµ_hódph⁄e_ˇbÀ_ªje˘
 &&

2919 
	`˘s_is_órjack_exi°
(
˘s_dev
)) {

2920 
r
 = 
	`˘s_£t_dev_órjack_©èched
(
˘s_dev
, 
åue
);

2921 i‡(
r
) {

2922 
	`˘s_îr
("Së devÉ¨jackáâached faûed %d", 
r
);

2927 #ifde‡
CONFIG_CTS_GLOVE


2928 i‡(
	`˘s_is_glove_íabÀd
(
˘s_dev
)) {

2929 
r
 = 
	`˘s_íãr_glove_mode
(
˘s_dev
);

2930 i‡(
r
) {

2931 
	`˘s_îr
("E¡î dev glovêmodêÁûed %d", 
r
);

2936 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


2937 i‡(
	`˘s_is_fw_log_ªdúe˘
(
˘s_dev
)) {

2938 
r
 = 
	`˘s_íabÀ_fw_log_ªdúe˘
(
˘s_dev
);

2939 i‡(
r
) {

2940 
	`˘s_îr
("E«bÀ fwÜogÑedúe˘ faûed %d", 
r
);

2945  
ªt
;

2946 
	}
}

2948 
fûe
 *
	g˘s_log_fûp
 = 
NULL
;

2949 
	g˘s_log_to_fûe_Àvñ
 = 0;

2950 
˘s_wrôe_fûe
(
fûe
 *
fûp
, c⁄° *
d©a
, 
size_t
 
size
);

2952 *
	g˘s_log_buf„r
 = 
NULL
;

2953 
	g˘s_log_buf_size
 = 0;

2954 
	g˘s_log_buf_wr_size
 = 0;

2956 
boﬁ
 
	g˘s_log_ªdúe˘
 = 
Ál£
;

2958 
	$˘s_°¨t_drivî_log_ªdúe˘
(c⁄° *
fûï©h
, 
boﬁ
 
≠≥nd_to_fûe
,

2959 *
log_buf„r
, 
log_buf_size
, 
log_Àvñ
)

2961 
	#START_BANNER
 \

2962 ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"

	)

2964 
ªt
 = 0;

2966 
	`˘s_öfo
("Start driverÜogÑedirect");

2968 
˘s_log_to_fûe_Àvñ
 = 
log_Àvñ
;

2970 i‡(
log_buf„r
 && 
log_buf_size
) {

2971 
	`˘s_öfo
(" - Start driverÜogÅo buffer: %p size: %dÜevel: %d",

2972 
log_buf„r
, 
log_buf_size
, 
log_Àvñ
);

2973 
˘s_log_buf„r
 = 
log_buf„r
;

2974 
˘s_log_buf_size
 = 
log_buf_size
;

2975 
˘s_log_buf_wr_size
 = 0;

2978 i‡(
fûï©h
 && filepath[0]) {

2979 
	`˘s_öfo
(" - Start driverÜogÅo file : '%s'Üevel: %d",

2980 
fûï©h
, 
log_Àvñ
);

2981 
˘s_log_fûp
 = 
	`fûp_›í
(
fûï©h
,

2982 
O_WRONLY
 | 
O_CREAT
 | (
≠≥nd_to_fûe
 ? 
O_APPEND
 : 
O_TRUNC
),

2983 
S_IRUGO
 | 
S_IWUGO
);

2984 i‡(
	`IS_ERR
(
˘s_log_fûp
)) {

2985 
ªt
 = 
	`PTR_ERR
(
˘s_log_fûp
);

2986 
˘s_log_fûp
 = 
NULL
;

2987 
	`˘s_îr
("Open file '%s' for driverÜog failed %d",

2988 
fûï©h
, 
ªt
);

2990 
	`˘s_wrôe_fûe
(
˘s_log_fûp
, 
START_BANNER
, 
	`°æí
(START_BANNER));

2994 
˘s_log_ªdúe˘
 = 
åue
;

2996  
ªt
;

2997 #unde‡
START_BANNER


2998 
	}
}

3000 
	$˘s_°›_drivî_log_ªdúe˘
()

3002 
	#END_BANNER
 \

3003 "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n"

	)

3005 
˘s_log_ªdúe˘
 = 
Ál£
;

3007 
	`˘s_öfo
("Stop driverÜogÑedirect");

3009 i‡(
˘s_log_fûp
) {

3010 
ªt
;

3012 
	`˘s_öfo
(" - Stop driverÜogÅo file");

3014 
	`˘s_wrôe_fûe
(
˘s_log_fûp
, 
END_BANNER
, 
	`°æí
(END_BANNER));

3015 
ªt
 = 
	`fûp_˛o£
(
˘s_log_fûp
, 
NULL
);

3016 i‡(
ªt
) {

3017 
	`˘s_îr
("Clo£ drivîÜog fûêÁûed %d", 
ªt
);

3019 
˘s_log_fûp
 = 
NULL
;

3022 i‡(
˘s_log_buf„r
) {

3023 
	`˘s_öfo
(" - Stop driverÜogÅo buffer");

3025 
˘s_log_buf„r
 = 
NULL
;

3026 
˘s_log_buf_size
 = 0;

3027 
˘s_log_buf_wr_size
 = 0;

3030 #unde‡
END_BANNER


3031 
	}
}

3033 
	$˘s_gë_drivî_log_ªdúe˘_size
()

3035 i‡(
˘s_log_ªdúe˘
 && 
˘s_log_buf„r
 && 
˘s_log_buf_wr_size
) {

3036  
˘s_log_buf_wr_size
;

3040 
	}
}

3042 
	$˘s_log
(
Àvñ
, c⁄° *
fmt
, ...)

3044 
va_li°
 
¨gs
;

3046 
	`va_°¨t
(
¨gs
, 
fmt
);

3048 i‡(
˘s_log_ªdúe˘
) {

3049 i‡(
˘s_log_buf„r
 &&

3050 
˘s_log_buf_wr_size
 < 
˘s_log_buf_size
 &&

3051 
Àvñ
 <
˘s_log_to_fûe_Àvñ
)

3053 
˘s_log_buf_wr_size
 +
	`vs˙¥ötf
(
˘s_log_buf„r
 + cts_log_buf_wr_size,

3054 
˘s_log_buf_size
 - 
˘s_log_buf_wr_size
, 
fmt
, 
¨gs
);

3057 i‡(
˘s_log_fûp
 !
NULL
 && 
Àvñ
 <
˘s_log_to_fûe_Àvñ
) {

3058 
buf
[512];

3059 
cou¡
 = 
	`vs˙¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

3061 
	`˘s_wrôe_fûe
(
˘s_log_fûp
, 
buf
, 
cou¡
);

3065 i‡(
Àvñ
 < 
CTS_DRIVER_LOG_DEBUG
 || 
˘s_show_debug_log
) {

3066 
	`v¥ötk
(
fmt
, 
¨gs
);

3069 
	`va_íd
(
¨gs
);

3070 
	}
}

	@cts_core.h

1 #i‚de‡
CTS_CORE_H


2 
	#CTS_CORE_H


	)

4 
	~"˘s_c⁄fig.h
"

6 
	e˘s_dev_hw_ªg
 {

7 
	mCTS_DEV_HW_REG_HARDWARE_ID
 = 0x30000u,

8 
	mCTS_DEV_HW_REG_CLOCK_GATING
 = 0x30004u,

9 
	mCTS_DEV_HW_REG_RESET_CONFIG
 = 0x30008u,

10 
	mCTS_DEV_HW_REG_BOOT_MODE
 = 0x30010u,

11 
	mCTS_DEV_HW_REG_CURRENT_MODE
 = 0x30011u,

14 
	e˘s_dev_boŸ_mode
 {

15 
	mCTS_DEV_BOOT_MODE_FLASH
 = 1,

16 
	mCTS_DEV_BOOT_MODE_I2C_PROGRAM
 = 2,

17 
	mCTS_DEV_BOOT_MODE_SRAM
 = 3,

18 
	mCTS_DEV_BOOT_MODE_SPI_PROGRAM
 = 5,

19 
	mCTS_DEV_BOOT_MODE_MASK
 = 7,

23 
	#CTS_DEV_NORMAL_MODE_I2CADDR
 (0x48)

	)

24 
	#CTS_DEV_PROGRAM_MODE_I2CADDR
 (0x30)

	)

25 
	#CTS_DEV_NORMAL_MODE_ADDR_WIDTH
 (2)

	)

26 
	#CTS_DEV_PROGRAM_MODE_ADDR_WIDTH
 (3)

	)

27 
	#CTS_DEV_NORMAL_MODE_SPIADDR
 (0xF0)

	)

28 
	#CTS_DEV_PROGRAM_MODE_SPIADDR
 (0x60)

	)

31 
	e˘s_devi˚_fw_ªg
 {

32 
	mCTS_DEVICE_FW_REG_WORK_MODE
 = 0x0000,

33 
	mCTS_DEVICE_FW_REG_SYS_BUSY
 = 0x0001,

34 
	mCTS_DEVICE_FW_REG_DATA_READY
 = 0x0002,

35 
	mCTS_DEVICE_FW_REG_CMD
 = 0x0004,

36 
	mCTS_DEVICE_FW_REG_POWER_MODE
 = 0x0005,

37 
	mCTS_DEVICE_FW_REG_FW_LIB_MAIN_VERSION
 = 0x0009,

38 
	mCTS_DEVICE_FW_REG_CHIP_TYPE
 = 0x000A,

39 
	mCTS_DEVICE_FW_REG_VERSION
 = 0x000C,

40 
	mCTS_DEVICE_FW_REG_DDI_VERSION
 = 0x0010,

41 
	mCTS_DEVICE_FW_REG_GET_WORK_MODE
 = 0x003F,

42 
	mCTS_DEVICE_FW_REG_AUTO_CALIB_COMP_CAP_DONE
 = 0x0046,

43 
	mCTS_DEVICE_FW_REG_FW_LIB_SUB_VERSION
 = 0x0047,

44 
	mCTS_DEVICE_FW_REG_COMPENSATE_CAP_READY
 = 0x004E,

46 
	mCTS_DEVICE_FW_REG_TOUCH_INFO
 = 0x1000,

47 
	mCTS_DEVICE_FW_REG_RAW_DATA
 = 0x2000,

48 
	mCTS_DEVICE_FW_REG_DIFF_DATA
 = 0x3000,

49 
	mCTS_DEVICE_FW_REG_GESTURE_INFO
 = 0x7000,

51 
	mCTS_DEVICE_FW_REG_PANEL_PARAM
 = 0x8000,

52 
	mCTS_DEVICE_FW_REG_NUM_TX
 = 0x8007,

53 
	mCTS_DEVICE_FW_REG_NUM_RX
 = 0x8008,

54 
	mCTS_DEVICE_FW_REG_INT_KEEP_TIME
 = 0x8047,

55 
	mCTS_DEVICE_FW_REG_RAWDATA_TARGET
 = 0x8049,

56 
	mCTS_DEVICE_FW_REG_X_RESOLUTION
 = 0x8090,

57 
	mCTS_DEVICE_FW_REG_Y_RESOLUTION
 = 0x8092,

58 
	mCTS_DEVICE_FW_REG_SWAP_AXES
 = 0x8094,

59 
	mCTS_DEVICE_FW_REG_GLOVE_MODE
 = 0x8095,

60 
	mCTS_DEVICE_FW_REG_TEST_WITH_DISPLAY_ON
 = 0x80A3,

61 
	mCTS_DEVICE_FW_REG_INT_MODE
 = 0x80D8,

62 
	mCTS_DEVICE_FW_REG_EARJACK_DETECT_SUPP
 = 0x8113,

63 
	mCTS_DEVICE_FW_REG_AUTO_CALIB_COMP_CAP_ENABLE
 = 0x8114,

64 
	mCTS_DEVICE_FW_REG_ESD_PROTECTION
 = 0x8156,

65 
	mCTS_DEVICE_FW_REG_FLAG_BITS
 = 0x8158,

67 
	mCTS_DEVICE_FW_REG_COMPENSATE_CAP
 = 0xA000,

68 
	mCTS_DEVICE_FW_REG_DEBUG_INTF
 = 0xF000,

72 
	e˘s_dev_hwid
 {

73 
	mCTS_DEV_HWID_ICNL9911
 = 0x990100u,

74 
	mCTS_DEV_HWID_ICNL9911S
 = 0x990110u,

75 
	mCTS_DEV_HWID_ICNL9911C
 = 0x991110u,

77 
	mCTS_DEV_HWID_ANY
 = 0,

78 
	mCTS_DEV_HWID_INVALID
 = 0xFFFFFFFFu,

83 
	e˘s_dev_fwid
 {

84 
	mCTS_DEV_FWID_ICNL9911
 = 0x9911u,

85 
	mCTS_DEV_FWID_ICNL9911S
 = 0x9964u,

86 
	mCTS_DEV_FWID_ICNL9911C
 = 0x9954u,

88 
	mCTS_DEV_FWID_ANY
 = 0u,

89 
	mCTS_DEV_FWID_INVALID
 = 0xFFFFu

93 
	e˘s_fúmw¨e_cmd
 {

94 
	mCTS_CMD_RESET
 = 1,

95 
	mCTS_CMD_SUSPEND
 = 2,

96 
	mCTS_CMD_ENTER_WRITE_PARA_TO_FLASH_MODE
 = 3,

97 
	mCTS_CMD_WRITE_PARA_TO_FLASH
 = 4,

98 
	mCTS_CMD_WRTITE_INT_HIGH
 = 5,

99 
	mCTS_CMD_WRTITE_INT_LOW
 = 6,

100 
	mCTS_CMD_RELASE_INT_TEST
 = 7,

101 
	mCTS_CMD_RECOVERY_TX_VOL
 = 0x10,

102 
	mCTS_CMD_DEC_TX_VOL_1
 = 0x11,

103 
	mCTS_CMD_DEC_TX_VOL_2
 = 0x12,

104 
	mCTS_CMD_DEC_TX_VOL_3
 = 0x13,

105 
	mCTS_CMD_DEC_TX_VOL_4
 = 0x14,

106 
	mCTS_CMD_DEC_TX_VOL_5
 = 0x15,

107 
	mCTS_CMD_DEC_TX_VOL_6
 = 0x16,

108 
	mCTS_CMD_ENABLE_READ_RAWDATA
 = 0x20,

109 
	mCTS_CMD_DISABLE_READ_RAWDATA
 = 0x21,

110 
	mCTS_CMD_SUSPEND_WITH_GESTURE
 = 0x40,

111 
	mCTS_CMD_QUIT_GESTURE_MONITOR
 = 0x41,

112 
	mCTS_CMD_CHARGER_ATTACHED
 = 0x55,

113 
	mCTS_CMD_EARJACK_ATTACHED
 = 0x57,

114 
	mCTS_CMD_EARJACK_DETACHED
 = 0x58,

115 
	mCTS_CMD_CHARGER_DETACHED
 = 0x66,

116 
	mCTS_CMD_ENABLE_FW_LOG_REDIRECT
 = 0x86,

117 
	mCTS_CMD_DISABLE_FW_LOG_REDIRECT
 = 0x87,

118 
	mCTS_CMD_ENABLE_READ_CNEG
 = 0x88,

119 
	mCTS_CMD_DISABLE_READ_CNEG
 = 0x89,

120 
	mCTS_CMD_FW_LOG_SHOW_FINISH
 = 0xE0,

124 #¥agm®
∑ck
(1)

126 
	s˘s_devi˚_touch_msg
 {

127 
u8
 
	mid
;

128 
__À16
 
	mx
;

129 
__À16
 
	my
;

130 
u8
 
	m¥essuª
;

131 
u8
 
	mevít
;

133 
	#CTS_DEVICE_TOUCH_EVENT_NONE
 (0)

	)

134 
	#CTS_DEVICE_TOUCH_EVENT_DOWN
 (1)

	)

135 
	#CTS_DEVICE_TOUCH_EVENT_MOVE
 (2)

	)

136 
	#CTS_DEVICE_TOUCH_EVENT_STAY
 (3)

	)

137 
	#CTS_DEVICE_TOUCH_EVENT_UP
 (4)

	)

142 
	s˘s_devi˚_touch_öfo
 {

143 
u8
 
	mvkey_°©e
;

144 
u8
 
	mnum_msg
;

146 
˘s_devi˚_touch_msg
 
	mmsgs
[
CFG_CTS_MAX_TOUCH_NUM
];

150 
	s˘s_devi˚_ge°uª_poöt
 {

151 
__À16
 
	mx
;

152 
__À16
 
	my
;

153 
u8
 
	m¥essuª
;

154 
u8
 
	mevít
;

158 
	s˘s_devi˚_ge°uª_öfo
 {

159 
u8
 
	mge°uª_id
;

160 
	#CTS_GESTURE_UP
 (0x11)

	)

161 
	#CTS_GESTURE_C
 (0x12)

	)

162 
	#CTS_GESTURE_O
 (0x13)

	)

163 
	#CTS_GESTURE_M
 (0x14)

	)

164 
	#CTS_GESTURE_W
 (0x15)

	)

165 
	#CTS_GESTURE_E
 (0x16)

	)

166 
	#CTS_GESTURE_S
 (0x17)

	)

167 
	#CTS_GESTURE_B
 (0x18)

	)

168 
	#CTS_GESTURE_T
 (0x19)

	)

169 
	#CTS_GESTURE_H
 (0x1A)

	)

170 
	#CTS_GESTURE_F
 (0x1B)

	)

171 
	#CTS_GESTURE_X
 (0x1C)

	)

172 
	#CTS_GESTURE_Z
 (0x1D)

	)

173 
	#CTS_GESTURE_V
 (0x1E)

	)

174 
	#CTS_GESTURE_D_TAP
 (0x50)

	)

176 
u8
 
	mnum_poöts
;

178 
	#CTS_CHIP_MAX_GESTURE_TRACE_POINT
 (64u)

	)

179 
˘s_devi˚_ge°uª_poöt
 
	mpoöts
[
CTS_CHIP_MAX_GESTURE_TRACE_POINT
];

182 #¥agm®
∑ck
()

185 
	g˘s_devi˚
;

187 
	e˘s_¸c_ty≥
 {

188 
	mCTS_CRC16
 = 1,

189 
	mCTS_CRC32
 = 2,

193 
	s˘s_devi˚_hwd©a
 {

194 c⁄° *
	m«me
;

195 
u32
 
	mhwid
;

196 
u16
 
	mfwid
;

197 
u8
 
	mnum_row
;

198 
u8
 
	mnum_cﬁ
;

199 
u32
 
	m§am_size
;

202 
u8
 
	m¥ogøm_addr_width
;

204 c⁄° 
˘s_sf˘æ
 *
	msf˘æ
;

206 (*
	míabÀ_ac˚ss_ddi_ªg
)(
˘s_devi˚
 *
	m˘s_dev
, 
boﬁ
 
	míabÀ
);

210 
	s˘s_devi˚_fwd©a
 {

211 
u16
 
	mvîsi⁄
;

212 
u16
 
	mªs_x
;

213 
u16
 
	mªs_y
;

214 
u8
 
	mrows
;

215 
u8
 
	mcﬁs
;

216 
boﬁ
 
	mÊù_x
;

217 
boﬁ
 
	mÊù_y
;

218 
boﬁ
 
	msw≠_axes
;

219 
u8
 
	mddi_vîsi⁄
;

220 
u8
 
	möt_mode
;

221 
u8
 
	mesd_mëhod
;

222 
u16
 
	mlib_vîsi⁄
;

223 
u16
 
	möt_kìp_time
;

224 
u16
 
	møwd©a_èrgë
;

225 #ifde‡
CONFIG_CTS_EARJACK_DETECT


226 
boﬁ
 
	msuµ_hódph⁄e_ˇbÀ_ªje˘
;

231 
	s˘s_devi˚_πd©a
 {

232 
u8
 
	m¶ave_addr
;

233 
	maddr_width
;

234 
boﬁ
 
	m¥ogøm_mode
;

235 
boﬁ
 
	mhas_Êash
;

237 
boﬁ
 
	msu•íded
;

238 
boﬁ
 
	mupd©ög
;

239 
boﬁ
 
	mã°ög
;

241 
boﬁ
 
	mge°uª_wakeup_íabÀd
;

242 
boﬁ
 
	mch¨gî_exi°
;

243 
boﬁ
 
	mfw_log_ªdúe˘_íabÀd
;

244 
boﬁ
 
	mglove_mode_íabÀd
;

247 
	s˘s_devi˚
 {

248 
˘s_∂©f‹m_d©a
 *
	mpd©a
;

250 c⁄° 
˘s_devi˚_hwd©a
 *
	mhwd©a
;

251 
˘s_devi˚_fwd©a
 
	mfwd©a
;

252 
˘s_devi˚_πd©a
 
	mπd©a
;

253 c⁄° 
˘s_Êash
 *
	mÊash
;

254 
boﬁ
 
	míabÀd
;

258 
	g˘s_∂©f‹m_d©a
;

260 
	schù⁄e_ts_d©a
 {

261 #ifde‡
CONFIG_CTS_I2C_HOST


262 
i2c_˛õ¡
 *
	mi2c_˛õ¡
;

264 
•i_devi˚
 *
	m•i_˛õ¡
;

267 
devi˚
 *
	mdevi˚
;

269 
˘s_devi˚
 
	m˘s_dev
;

271 
˘s_∂©f‹m_d©a
 *
	mpd©a
;

273 
w‹kqueue_°ru˘
 *
	mw‹kqueue
;

275 #ifde‡
CONFIG_CTS_ESD_PROTECTION


276 
w‹kqueue_°ru˘
 *
	mesd_w‹kqueue
;

277 
dñayed_w‹k
 
	mesd_w‹k
;

278 
boﬁ
 
	mesd_íabÀd
;

279 
	mesd_check_Áû_˙t
;

282 #ifde‡
CONFIG_CTS_CHARGER_DETECT


283 *
	mch¨gî_dëe˘_d©a
;

286 #ifde‡
CONFIG_CTS_EARJACK_DETECT


287 *
	mórjack_dëe˘_d©a
;

290 #ifde‡
CONFIG_CTS_LEGACY_TOOL


291 
¥oc_dú_íåy
 *
	m¥ocfs_íåy
;

296 
ölöe
 
u32
 
	$gë_u«lig√d_À24
(c⁄° *
p
)

298 c⁄° 
u8
 *
puc
 = (c⁄° u8 *)
p
;

299  (
puc
[0] | (puc[1] << 8) | (puc[2] << 16));

300 
	}
}

302 
ölöe
 
u32
 
	$gë_u«lig√d_be24
(c⁄° *
p
)

304 c⁄° 
u8
 *
puc
 = (c⁄° u8 *)
p
;

305  (
puc
[2] | (puc[1] << 8) | (puc[0] << 16));

306 
	}
}

308 
ölöe
 
	$put_u«lig√d_be24
(
u32
 
v
, *
p
)

310 
u8
 *
puc
 = (u8 *)
p
;

312 
puc
[0] = (
v
 >> 16) & 0xFF;

313 
puc
[1] = (
v
 >> 8 ) & 0xFF;

314 
puc
[2] = (
v
 >> 0 ) & 0xFF;

315 
	}
}

317 
	#wøp
(
max
,
x
Ë((maxË- 1 - (x))

	)

319 
˘s_lock_devi˚
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

320 
˘s_u∆ock_devi˚
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

322 
˘s_§am_wrôeb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

323 
u32
 
addr
, 
u8
 
b
, 
ªåy
, 
dñay
);

324 
˘s_§am_wrôew_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

325 
u32
 
addr
, 
u16
 
w
, 
ªåy
, 
dñay
);

326 
˘s_§am_wrôñ_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

327 
u32
 
addr
, u32 
l
, 
ªåy
, 
dñay
);

328 
˘s_§am_wrôesb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

329 
u32
 
addr
, c⁄° *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
);

330 
˘s_§am_wrôesb_check_¸c_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

331 
u32
 
addr
, c⁄° *
§c
, 
size_t
 
Àn
, u32 
¸c
, 
ªåy
);

333 
˘s_§am_ªadb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

334 
u32
 
addr
, 
u8
 *
b
, 
ªåy
, 
dñay
);

335 
˘s_§am_ªadw_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

336 
u32
 
addr
, 
u16
 *
w
, 
ªåy
, 
dñay
);

337 
˘s_§am_ªadl_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

338 
u32
 
addr
, u32 *
l
, 
ªåy
, 
dñay
);

339 
˘s_§am_ªadsb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

340 
u32
 
addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
);

342 
˘s_fw_ªg_wrôeb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

343 
u32
 
ªg_addr
, 
u8
 
b
, 
ªåy
, 
dñay
);

344 
˘s_fw_ªg_wrôew_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

345 
u32
 
ªg_addr
, 
u16
 
w
, 
ªåy
, 
dñay
);

346 
˘s_fw_ªg_wrôñ_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

347 
u32
 
ªg_addr
, u32 
l
, 
ªåy
, 
dñay
);

348 
˘s_fw_ªg_wrôesb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

349 
u32
 
ªg_addr
, c⁄° *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
);

351 
˘s_fw_ªg_ªadb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

352 
u32
 
ªg_addr
, 
u8
 *
b
, 
ªåy
, 
dñay
);

353 
˘s_fw_ªg_ªadw_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

354 
u32
 
ªg_addr
, 
u16
 *
w
, 
ªåy
, 
dñay
);

355 
˘s_fw_ªg_ªadl_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

356 
u32
 
ªg_addr
, u32 *
l
, 
ªåy
, 
dñay
);

357 
˘s_fw_ªg_ªadsb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

358 
u32
 
ªg_addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
);

359 
˘s_fw_ªg_ªadsb_ªåy_dñay_idÀ
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

360 
u32
 
ªg_addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
, 
idÀ
);

362 
˘s_hw_ªg_wrôeb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

363 
u32
 
ªg_addr
, 
u8
 
b
, 
ªåy
, 
dñay
);

364 
˘s_hw_ªg_wrôew_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

365 
u32
 
ªg_addr
, 
u16
 
w
, 
ªåy
, 
dñay
);

366 
˘s_hw_ªg_wrôñ_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

367 
u32
 
ªg_addr
, u32 
l
, 
ªåy
, 
dñay
);

368 
˘s_hw_ªg_wrôesb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

369 
u32
 
ªg_addr
, c⁄° *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
);

371 
˘s_hw_ªg_ªadb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

372 
u32
 
ªg_addr
, 
u8
 *
b
, 
ªåy
, 
dñay
);

373 
˘s_hw_ªg_ªadw_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

374 
u32
 
ªg_addr
, 
u16
 *
w
, 
ªåy
, 
dñay
);

375 
˘s_hw_ªg_ªadl_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

376 
u32
 
ªg_addr
, u32 *
l
, 
ªåy
, 
dñay
);

377 
˘s_hw_ªg_ªadsb_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

378 
u32
 
ªg_addr
, *
d°
, 
size_t
 
Àn
, 
ªåy
, 
dñay
);

380 
ölöe
 
	$˘s_fw_ªg_wrôeb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, 
u8
 
b
)

382  
	`˘s_fw_ªg_wrôeb_ªåy
(
˘s_dev
, 
ªg_addr
, 
b
, 1, 0);

383 
	}
}

385 
ölöe
 
	$˘s_fw_ªg_wrôew
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, 
u16
 
w
)

387  
	`˘s_fw_ªg_wrôew_ªåy
(
˘s_dev
, 
ªg_addr
, 
w
, 1, 0);

388 
	}
}

390 
ölöe
 
	$˘s_fw_ªg_wrôñ
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, u32 
l
)

392  
	`˘s_fw_ªg_wrôñ_ªåy
(
˘s_dev
, 
ªg_addr
, 
l
, 1, 0);

393 
	}
}

395 
ölöe
 
	$˘s_fw_ªg_wrôesb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
,

396 c⁄° *
§c
, 
size_t
 
Àn
)

398  
	`˘s_fw_ªg_wrôesb_ªåy
(
˘s_dev
, 
ªg_addr
, 
§c
, 
Àn
, 1, 0);

399 
	}
}

401 
ölöe
 
	$˘s_fw_ªg_ªadb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, 
u8
 *
b
)

403  
	`˘s_fw_ªg_ªadb_ªåy
(
˘s_dev
, 
ªg_addr
, 
b
, 1, 0);

404 
	}
}

406 
ölöe
 
	$˘s_fw_ªg_ªadw
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, 
u16
 *
w
)

408  
	`˘s_fw_ªg_ªadw_ªåy
(
˘s_dev
, 
ªg_addr
, 
w
, 1, 0);

409 
	}
}

411 
ölöe
 
	$˘s_fw_ªg_ªadl
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, u32 *
l
)

413  
	`˘s_fw_ªg_ªadl_ªåy
(
˘s_dev
, 
ªg_addr
, 
l
, 1, 0);

414 
	}
}

416 
ölöe
 
	$˘s_fw_ªg_ªadsb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

417 
u32
 
ªg_addr
, *
d°
, 
size_t
 
Àn
)

419  
	`˘s_fw_ªg_ªadsb_ªåy
(
˘s_dev
, 
ªg_addr
, 
d°
, 
Àn
, 1, 0);

420 
	}
}

422 
ölöe
 
	$˘s_fw_ªg_ªadsb_dñay_idÀ
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

423 
u32
 
ªg_addr
, *
d°
, 
size_t
 
Àn
, 
idÀ
)

425  
	`˘s_fw_ªg_ªadsb_ªåy_dñay_idÀ
(
˘s_dev
, 
ªg_addr
, 
d°
, 
Àn
, 1, 0, 
idÀ
);

426 
	}
}

428 
ölöe
 
	$˘s_hw_ªg_wrôeb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, 
u8
 
b
)

430  
	`˘s_hw_ªg_wrôeb_ªåy
(
˘s_dev
, 
ªg_addr
, 
b
, 1, 0);

431 
	}
}

433 
ölöe
 
	$˘s_hw_ªg_wrôew
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, 
u16
 
w
)

435  
	`˘s_hw_ªg_wrôew_ªåy
(
˘s_dev
, 
ªg_addr
, 
w
, 1, 0);

436 
	}
}

438 
ölöe
 
	$˘s_hw_ªg_wrôñ
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, u32 
l
)

440  
	`˘s_hw_ªg_wrôñ_ªåy
(
˘s_dev
, 
ªg_addr
, 
l
, 1, 0);

441 
	}
}

443 
ölöe
 
	$˘s_hw_ªg_wrôesb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
,

444 c⁄° *
§c
, 
size_t
 
Àn
)

446  
	`˘s_hw_ªg_wrôesb_ªåy
(
˘s_dev
, 
ªg_addr
, 
§c
, 
Àn
, 1, 0);

447 
	}
}

449 
ölöe
 
	$˘s_hw_ªg_ªadb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, 
u8
 *
b
)

451  
	`˘s_hw_ªg_ªadb_ªåy
(
˘s_dev
, 
ªg_addr
, 
b
, 1, 0);

452 
	}
}

454 
ölöe
 
	$˘s_hw_ªg_ªadw
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, 
u16
 *
w
)

456  
	`˘s_hw_ªg_ªadw_ªåy
(
˘s_dev
, 
ªg_addr
, 
w
, 1, 0);

457 
	}
}

459 
ölöe
 
	$˘s_hw_ªg_ªadl
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
ªg_addr
, u32 *
l
)

461  
	`˘s_hw_ªg_ªadl_ªåy
(
˘s_dev
, 
ªg_addr
, 
l
, 1, 0);

462 
	}
}

464 
ölöe
 
	$˘s_hw_ªg_ªadsb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

465 
u32
 
ªg_addr
, *
d°
, 
size_t
 
Àn
)

467  
	`˘s_hw_ªg_ªadsb_ªåy
(
˘s_dev
, 
ªg_addr
, 
d°
, 
Àn
, 1, 0);

468 
	}
}

470 
ölöe
 
	$˘s_§am_wrôeb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
, 
u8
 
b
)

472  
	`˘s_§am_wrôeb_ªåy
(
˘s_dev
, 
addr
, 
b
, 1, 0);

473 
	}
}

475 
ölöe
 
	$˘s_§am_wrôew
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
, 
u16
 
w
)

477  
	`˘s_§am_wrôew_ªåy
(
˘s_dev
, 
addr
, 
w
, 1, 0);

478 
	}
}

480 
ölöe
 
	$˘s_§am_wrôñ
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
, u32 
l
)

482  
	`˘s_§am_wrôñ_ªåy
(
˘s_dev
, 
addr
, 
l
, 1, 0);

483 
	}
}

485 
ölöe
 
	$˘s_§am_wrôesb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
,

486 c⁄° *
§c
, 
size_t
 
Àn
)

488  
	`˘s_§am_wrôesb_ªåy
(
˘s_dev
, 
addr
, 
§c
, 
Àn
, 1, 0);

489 
	}
}

491 
ölöe
 
	$˘s_§am_ªadb
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
, 
u8
 *
b
)

493  
	`˘s_§am_ªadb_ªåy
(
˘s_dev
, 
addr
, 
b
, 1, 0);

494 
	}
}

496 
ölöe
 
	$˘s_§am_ªadw
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
, 
u16
 *
w
)

498  
	`˘s_§am_ªadw_ªåy
(
˘s_dev
, 
addr
, 
w
, 1, 0);

499 
	}
}

501 
ölöe
 
	$˘s_§am_ªadl
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
, u32 *
l
)

503  
	`˘s_§am_ªadl_ªåy
(
˘s_dev
, 
addr
, 
l
, 1, 0);

504 
	}
}

506 
ölöe
 
	$˘s_§am_ªadsb
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

507 
u32
 
addr
, *
d°
, 
size_t
 
Àn
)

509  
	`˘s_§am_ªadsb_ªåy
(
˘s_dev
, 
addr
, 
d°
, 
Àn
, 1, 0);

510 
	}
}

512 #ifde‡
CONFIG_CTS_I2C_HOST


513 
ölöe
 
	$˘s_£t_¥ogøm_addr
(
˘s_devi˚
 *
˘s_dev
)

515 
˘s_dev
->
πd©a
.
¶ave_addr
 = 
CTS_DEV_PROGRAM_MODE_I2CADDR
;

516 
˘s_dev
->
πd©a
.
¥ogøm_mode
 = 
åue
;

517 
˘s_dev
->
πd©a
.
addr_width
 = 
CTS_DEV_PROGRAM_MODE_ADDR_WIDTH
;

518 
	}
}

520 
ölöe
 
	$˘s_£t_n‹mÆ_addr
(
˘s_devi˚
 *
˘s_dev
)

522 
˘s_dev
->
πd©a
.
¶ave_addr
 = 
CTS_DEV_NORMAL_MODE_I2CADDR
;

523 
˘s_dev
->
πd©a
.
¥ogøm_mode
 = 
Ál£
;

524 
˘s_dev
->
πd©a
.
addr_width
 = 
CTS_DEV_NORMAL_MODE_ADDR_WIDTH
;

525 
	}
}

527 
ölöe
 
	$˘s_£t_¥ogøm_addr
(
˘s_devi˚
 *
˘s_dev
)

529 
˘s_dev
->
πd©a
.
¶ave_addr
 = 
CTS_DEV_PROGRAM_MODE_SPIADDR
;

530 
˘s_dev
->
πd©a
.
¥ogøm_mode
 = 
åue
;

531 
˘s_dev
->
πd©a
.
addr_width
 = 
CTS_DEV_PROGRAM_MODE_ADDR_WIDTH
;

532 
	}
}

534 
ölöe
 
	$˘s_£t_n‹mÆ_addr
(
˘s_devi˚
 *
˘s_dev
)

536 
˘s_dev
->
πd©a
.
¶ave_addr
 = 
CTS_DEV_NORMAL_MODE_SPIADDR
;

537 
˘s_dev
->
πd©a
.
¥ogøm_mode
 = 
Ál£
;

538 
˘s_dev
->
πd©a
.
addr_width
 = 
CTS_DEV_NORMAL_MODE_ADDR_WIDTH
;

539 
	}
}

542 
˘s_úq_h™dÀr
(
˘s_devi˚
 *
˘s_dev
);

544 
boﬁ
 
˘s_is_devi˚_su•íded
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

545 
˘s_su•íd_devi˚
(
˘s_devi˚
 *
˘s_dev
);

546 
˘s_ªsume_devi˚
(
˘s_devi˚
 *
˘s_dev
);

548 
boﬁ
 
˘s_is_devi˚_¥ogøm_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

549 
˘s_íãr_¥ogøm_mode
(
˘s_devi˚
 *
˘s_dev
);

550 
˘s_íãr_n‹mÆ_mode
(
˘s_devi˚
 *
˘s_dev
);

552 
˘s_¥obe_devi˚
(
˘s_devi˚
 *
˘s_dev
);

553 
˘s_£t_w‹k_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 
mode
);

554 
˘s_gë_w‹k_mode
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
mode
);

555 
˘s_gë_fúmw¨e_vîsi⁄
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u16
 *
vîsi⁄
);

556 
˘s_gë_ddi_vîsi⁄
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
vîsi⁄
);

557 
˘s_gë_lib_vîsi⁄
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u16
 *
lib_vîsi⁄
);

558 
˘s_gë_d©a_ªady_Êag
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
Êag
);

559 
˘s_˛r_d©a_ªady_Êag
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

560 
˘s_£nd_comm™d
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 
cmd
);

561 
˘s_gë_∑√l_∑øm
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

562 *
∑øm
, 
size_t
 
size
);

563 
˘s_£t_∑√l_∑øm
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

564 c⁄° *
∑øm
, 
size_t
 
size
);

565 
˘s_gë_x_ªsﬁuti⁄
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u16
 *
ªsﬁuti⁄
);

566 
˘s_gë_y_ªsﬁuti⁄
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u16
 *
ªsﬁuti⁄
);

567 
˘s_gë_num_rows
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
num_rows
);

568 
˘s_gë_num_cﬁs
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
num_cﬁs
);

569 
˘s_gë_dev_esd_¥Ÿe˘i⁄
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 *
íabÀ
);

570 
˘s_£t_dev_esd_¥Ÿe˘i⁄
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
íabÀ
);

571 
˘s_íabÀ_gë_øwd©a
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

572 
˘s_dißbÀ_gë_øwd©a
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

573 
˘s_gë_øwd©a
(c⁄° 
˘s_devi˚
 *
˘s_dev
, *
buf
);

574 
˘s_gë_diffd©a
(c⁄° 
˘s_devi˚
 *
˘s_dev
, *
buf
);

575 
˘s_gë_com≥nßã_ˇp
(
˘s_devi˚
 *
˘s_dev
, 
u8
 *
ˇp
);

576 
˘s_gë_fwid
(
˘s_devi˚
 *
˘s_dev
, 
u16
 *
fwid
);

577 
˘s_gë_hwid
(
˘s_devi˚
 *
˘s_dev
, 
u32
 *
hwid
);

579 #ifde‡
CFG_CTS_GESTURE


580 
˘s_íabÀ_ge°uª_wakeup
(
˘s_devi˚
 *
˘s_dev
);

581 
˘s_dißbÀ_ge°uª_wakeup
(
˘s_devi˚
 *
˘s_dev
);

582 
boﬁ
 
˘s_is_ge°uª_wakeup_íabÀd
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

583 
˘s_gë_ge°uª_öfo
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

584 *
ge°uª_öfo
, 
boﬁ
 
åa˚_poöt
);

587 #ifde‡
CONFIG_CTS_ESD_PROTECTION


588 
˘s_öô_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

589 
˘s_íabÀ_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

590 
˘s_dißbÀ_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

591 
˘s_deöô_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

593 
ölöe
 
	$˘s_öô_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
Ë{
	}
}

594 
ölöe
 
	$˘s_íabÀ_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
Ë{
	}
}

595 
ölöe
 
	$˘s_dißbÀ_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
Ë{
	}
}

596 
ölöe
 
	$˘s_deöô_esd_¥Ÿe˘i⁄
(
chù⁄e_ts_d©a
 *
˘s_d©a
Ë{
	}
}

599 #ifde‡
CONFIG_CTS_GLOVE


600 
˘s_íãr_glove_mode
(
˘s_devi˚
 *
˘s_dev
);

601 
˘s_exô_glove_mode
(
˘s_devi˚
 *
˘s_dev
);

602 
˘s_is_glove_íabÀd
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

604 
ölöe
 
	$˘s_íãr_glove_mode
(
˘s_devi˚
 *
˘s_dev
Ë{ 0;
	}
}

605 
ölöe
 
	$˘s_exô_glove_mode
(
˘s_devi˚
 *
˘s_dev
Ë{ 0;
	}
}

606 
ölöe
 
	$˘s_is_glove_íabÀd
(c⁄° 
˘s_devi˚
 *
˘s_dev
Ë{ 0;
	}
}

609 #ifde‡
CONFIG_CTS_CHARGER_DETECT


610 
boﬁ
 
˘s_is_ch¨gî_exi°
(
˘s_devi˚
 *
˘s_dev
);

611 
˘s_£t_dev_ch¨gî_©èched
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
©èched
);

613 
ölöe
 
boﬁ
 
	$˘s_is_ch¨gî_exi°
(
˘s_devi˚
 *
˘s_dev
Ë{ 
Ál£
;
	}
}

614 
ölöe
 
	$˘s_dev_ch¨gî_©èched
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
©èched
Ë{ 0;
	}
}

617 #ifde‡
CONFIG_CTS_EARJACK_DETECT


618 
boﬁ
 
˘s_is_órjack_exi°
(
˘s_devi˚
 *
˘s_dev
);

619 
˘s_£t_dev_órjack_©èched
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
©èched
);

621 
ölöe
 
boﬁ
 
	$˘s_is_órjack_exi°
(
˘s_devi˚
 *
˘s_dev
Ë{ 
Ál£
;
	}
}

622 
ölöe
 
	$˘s_£t_dev_órjack_©èched
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
©èched
Ë{ 0;
	}
}

625 #ifde‡
CONFIG_CTS_LEGACY_TOOL


626 
˘s_toﬁ_öô
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

627 
˘s_toﬁ_deöô
(
chù⁄e_ts_d©a
 *
d©a
);

629 
ölöe
 
	$˘s_toﬁ_öô
(
chù⁄e_ts_d©a
 *
˘s_d©a
Ë{ 0;
	}
}

630 
ölöe
 
	$˘s_toﬁ_deöô
(
chù⁄e_ts_d©a
 *
d©a
Ë{
	}
}

633 
boﬁ
 
˘s_is_devi˚_íabÀd
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

634 
˘s_°¨t_devi˚
(
˘s_devi˚
 *
˘s_dev
);

635 
˘s_°›_devi˚
(
˘s_devi˚
 *
˘s_dev
);

637 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


638 
˘s_íabÀ_fw_log_ªdúe˘
(
˘s_devi˚
 *
˘s_dev
);

639 
˘s_dißbÀ_fw_log_ªdúe˘
(
˘s_devi˚
 *
˘s_dev
);

640 
boﬁ
 
˘s_is_fw_log_ªdúe˘
(
˘s_devi˚
 *
˘s_dev
);

641 
˘s_fw_log_show_föish
(
˘s_devi˚
 *
˘s_dev
);

644 #ifde‡
CFG_CTS_UPDATE_CRCCHECK


645 
˘s_§am_wrôesb_boŸ_¸c_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

646 
size_t
 
Àn
, 
u32
 
¸c
, 
ªåy
);

649 c⁄° *
˘s_dev_boŸ_mode2°r
(
u8
 
boŸ_mode
);

650 
boﬁ
 
˘s_is_fwid_vÆid
(
u16
 
fwid
);

	@cts_earjack_detect.c

1 
	#LOG_TAG
 "E¨jack"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_sysfs.h
"

8 #ifde‡
CONFIG_CTS_EARJACK_DETECT


9 
	s˘s_órjack_dëe˘_d©a
 {

10 
boﬁ
 
	míabÀ
;

11 
boﬁ
 
	mru¬ög
;

12 
boﬁ
 
	m°©e
;

14 c⁄° *
	mórjack_°©e_fûï©h
;

15 
dñayed_w‹k
 
	mpﬁl_w‹k
;

16 
u32
 
	mpﬁl_öãrvÆ
;

18 #ifde‡
CONFIG_CTS_SYSFS


19 
boﬁ
 
	msysfs_©å_group_¸óãd
;

22 
chù⁄e_ts_d©a
 *
	m˘s_d©a
;

28 
	#CFG_CTS_DEF_EARJACK_POLL_INTERVAL
 2000u

	)

29 #i‡
deföed
(
CONFIG_MTK_PLATFORM
)

30 
	#CFG_CTS_DEF_EARJACK_STATE_FILEPATH
 \

31 "/sys/bus/∂©f‹m/drivîs/Accdë_Drivî/°©e"

	)

32 #ñi‡
deföed
(
CONFIG_ARCH_SPREADRUM
)

33 
	#CFG_CTS_DEF_EARJACK_STATE_FILEPATH
 \

34 "/sys/kî√l/hód£t/°©e"

	)

37 
	#CFG_CTS_DEF_EARJACK_STATE_FILEPATH
 ""

	)

40 
	$∑r£_órjack_dëe˘_dt
(
˘s_órjack_dëe˘_d©a
 *
ed_d©a
,

41 
devi˚_node
 *
≈
)

43 c⁄° *
fûï©h
;

44 
ªt
;

46 
	`˘s_öfo
("Parse dt");

48 #ifde‡
CFG_CTS_DEF_EARJACK_DET_ENABLE


49 
ed_d©a
->
íabÀ
 = 
åue
;

51 
ed_d©a
->
íabÀ
 =

52 
	`of_¥›îty_ªad_boﬁ
(
≈
, "chipone,touch-earjack-detect-enable");

55 
ªt
 = 
	`of_¥›îty_ªad_°rög
(
≈
,

56 "chù⁄e,touch-órjack-°©e-fûï©h", &
fûï©h
);

57 i‡(
ªt
) {

58 
	`˘s_w¨n
("P¨£ sèã fûï©h faûed %d", 
ªt
);

59 
fûï©h
 = 
CFG_CTS_DEF_EARJACK_STATE_FILEPATH
;

61 
ed_d©a
->
órjack_°©e_fûï©h
 = 
	`k°rdup
(
fûï©h
, 
GFP_KERNEL
);

62 i‡(
ed_d©a
->
órjack_°©e_fûï©h
 =
NULL
) {

63 
	`˘s_îr
("DupÉarjack state filepath failed");

64  -
ENOMEM
;

67 
ed_d©a
->
pﬁl_öãrvÆ
 = 
CFG_CTS_DEF_EARJACK_POLL_INTERVAL
;

68 
ªt
 = 
	`of_¥›îty_ªad_u32
(
≈
,

69 "chù⁄e,touch-órjack-pﬁl-öãrvÆ", &
ed_d©a
->
pﬁl_öãrvÆ
);

70 i‡(
ªt
) {

71 
	`˘s_w¨n
("P¨£Öﬁ»öãrvÆ faûed %d", 
ªt
);

75 
	}
}

77 
	$°¨t_órjack_dëe˘
(
˘s_órjack_dëe˘_d©a
 *
ed_d©a
)

79 i‡(!
ed_d©a
->
íabÀ
) {

80 
	`˘s_w¨n
("Start detect while NOTÉnabled");

81  -
EINVAL
;

84 i‡(
ed_d©a
->
ru¬ög
) {

85 
	`˘s_w¨n
("Start detect whileálready RUNNING");

89 i‡(
ed_d©a
->
órjack_°©e_fûï©h
 =
NULL
 ||

90 
ed_d©a
->
órjack_°©e_fûï©h
[0] == '\n') {

91 
	`˘s_w¨n
("Start detect with filepath = NULL/NUL");

92  -
EINVAL
;

95 
	`˘s_öfo
("Start detect check file: '%s'",

96 
ed_d©a
->
órjack_°©e_fûï©h
);

98 i‡(!
	`queue_dñayed_w‹k
(
ed_d©a
->
˘s_d©a
->
w‹kqueue
,

99 &
ed_d©a
->
pﬁl_w‹k
,

100 
	`m£cs_to_jiffõs
(
ed_d©a
->
pﬁl_öãrvÆ
))) {

101 
	`˘s_w¨n
("Queue detect work whileálready onÅhe queue");

104 
ed_d©a
->
ru¬ög
 = 
åue
;

107 
	}
}

109 
	$°›_órjack_dëe˘
(
˘s_órjack_dëe˘_d©a
 *
ed_d©a
)

111 i‡(!
ed_d©a
->
ru¬ög
) {

112 
	`˘s_w¨n
("Stop detect while NOTÑunning");

116 
	`˘s_öfo
("Stop detect");

118 i‡(!
	`ˇn˚l_dñayed_w‹k_sync
(&
ed_d©a
->
pﬁl_w‹k
)) {

119 
	`˘s_w¨n
("CancelÖoll work while NOTÖending");

121 
ed_d©a
->
ru¬ög
 = 
Ál£
;

124 
	}
}

126 
	$gë_órjack_°©e
(
˘s_órjack_dëe˘_d©a
 *
ed_d©a
)

128 
fûe
 *fûê
NULL
;

129 
loff_t
 
pos
 = 0;

130 
ªt
, 
ªad_size
;

131 
buff
[10];

132 
u32
 
°©e
;

134 
	`˘s_dbg
("Get state from file '%s'",

135 
ed_d©a
->
órjack_°©e_fûï©h
);

137 
fûe
 = 
	`fûp_›í
(
ed_d©a
->
órjack_°©e_fûï©h
, 
O_RDONLY
, 0);

138 i‡(
	`IS_ERR
(
fûe
)) {

139 
	`˘s_îr
("Open file '%s' failed %ld",

140 
ed_d©a
->
órjack_°©e_fûï©h
, 
	`PTR_ERR
(
fûe
));

141  
	`PTR_ERR
(
fûe
);

144 
	`mem£t
(
buff
, 0, (buff));

145 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,14,0)

146 
ªad_size
 = 
	`kî√l_ªad
(
fûe
, 
buff
, (buff), &
pos
);

148 
ªad_size
 = 
	`kî√l_ªad
(
fûe
, 
pos
, 
buff
, (buff));

150 i‡(
ªad_size
 < 0) {

151 
	`˘s_îr
("Read state file '%s' failed %d",

152 
ed_d©a
->
órjack_°©e_fûï©h
, 
ªad_size
);

153 
	`fûp_˛o£
(
fûe
, 
NULL
);

154  
ªad_size
;

157 
	`˘s_dbg
("Ród sèã fûêc⁄ã¡: '%s'", 
buff
);

159 
ªt
 = 
	`fûp_˛o£
(
fûe
, 
NULL
);

160 i‡(
ªt
) {

161 
	`˘s_w¨n
("Close file '%s' failed %d",

162 
ed_d©a
->
órjack_°©e_fûï©h
, 
ªt
);

165 
ªt
 = 
	`k°πou32
(
buff
, 0, &
°©e
);

166 i‡(
ªt
) {

167 
	`˘s_îr
("InvÆid såög from sèã fûe: '%s'", 
buff
);

168  
ªt
;

172 
ed_d©a
->
°©e
 = !!state;

174 
	`˘s_dbg
("Sèã: %s", 
ed_d©a
->
°©e
 ? "ATTACHED" : "DETACHED");

177 
	}
}

180 #ifde‡
CONFIG_CTS_SYSFS


181 
¨gc
;

182 *
¨gv
[];

183 
∑r£_¨g
(c⁄° *
buf
, 
size_t
 
cou¡
);

184 
k°πoboﬁ
(c⁄° *
s
, 
boﬁ
 *
ªs
);

186 
	#EARJACK_DET_SYSFS_GROUP_NAME
 "órjack-dë"

	)

188 
	$íabÀ_órjack_dëe˘
(
˘s_órjack_dëe˘_d©a
 *
ed_d©a
)

190 
	`˘s_öfo
("Enable detect");

192 
ed_d©a
->
íabÀ
 = 
åue
;

195 
	}
}

197 
	$dißbÀ_órjack_dëe˘
(
˘s_órjack_dëe˘_d©a
 *
ed_d©a
)

199 
ªt
;

201 
	`˘s_öfo
("Disable detect");

203 
ªt
 = 
	`°›_órjack_dëe˘
(
ed_d©a
);

204 i‡(
ªt
) {

205 
	`˘s_îr
("St› dëe˘ faûed %d", 
ªt
);

208 
ed_d©a
->
íabÀ
 = 
Ál£
;

211 
	}
}

213 
ssize_t
 
	$órjack_dëe˘_íabÀ_show
(
devi˚
 *
dev
,

214 
devi˚_©åibuã
 *
©å
, *
buf
)

216 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

217 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

219 
	`˘s_öfo
("Ród sysf†'"
EARJACK_DET_SYSFS_GROUP_NAME
"/%s'",

220 
©å
->©å.
«me
);

222  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

224 
ed_d©a
->
íabÀ
 ? "ENABLED" : "DISABLED");

225 
	}
}

228 
ssize_t
 
	$órjack_dëe˘_íabÀ_°‹e
(
devi˚
 *
dev
,

229 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

231 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

232 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

233 
boﬁ
 
íabÀ
;

234 
ªt
;

236 
	`˘s_öfo
("Wrôêsysf†'"
EARJACK_DET_SYSFS_GROUP_NAME
"/%s' size %zu",

237 
©å
->©å.
«me
, 
cou¡
);

239 
	`∑r£_¨g
(
buf
, 
cou¡
);

241 i‡(
¨gc
 != 1) {

242 
	`˘s_îr
("InvalidÇum ofárgs");

243  -
EINVAL
;

246 
ªt
 = 
	`k°πoboﬁ
(
¨gv
[0], &
íabÀ
);

247 i‡(
ªt
) {

248 
	`˘s_îr
("InvalidÖaram ofÉnable");

249  
ªt
;

252 i‡(
íabÀ
) {

253 
ªt
 = 
	`íabÀ_órjack_dëe˘
(
ed_d©a
);

255 
ªt
 = 
	`dißbÀ_órjack_dëe˘
(
ed_d©a
);

257 i‡(
ªt
) {

258 
	`˘s_îr
("%sÉarjack detect failed",

259 
íabÀ
 ? "E«bÀ" : "DißbÀ", 
ªt
);

260  
ªt
;

263  
cou¡
;

264 
	}
}

265 
DEVICE_ATTR
(
íabÀ
, 
S_IWUSR
 | 
S_IRUGO
,

266 
órjack_dëe˘_íabÀ_show
, 
órjack_dëe˘_íabÀ_°‹e
);

268 
ssize_t
 
	$órjack_dëe˘_ru¬ög_show
(
devi˚
 *
dev
,

269 
devi˚_©åibuã
 *
©å
, *
buf
)

271 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

272 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

274 
	`˘s_öfo
("Ród sysf†'"
EARJACK_DET_SYSFS_GROUP_NAME
"/%s'",

275 
©å
->©å.
«me
);

277  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

279 
ed_d©a
->
ru¬ög
 ? "" : "Not-");

280 
	}
}

283 
ssize_t
 
	$órjack_dëe˘_ru¬ög_°‹e
(
devi˚
 *
dev
,

284 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

286 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

287 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

288 
boﬁ
 
ru¬ög
;

289 
ªt
;

291 
	`˘s_öfo
("Wrôêsysf†'"
EARJACK_DET_SYSFS_GROUP_NAME
"/%s' size %zu",

292 
©å
->©å.
«me
, 
cou¡
);

294 
	`∑r£_¨g
(
buf
, 
cou¡
);

296 i‡(
¨gc
 != 1) {

297 
	`˘s_îr
("InvalidÇum ofárgs");

298  -
EINVAL
;

301 
ªt
 = 
	`k°πoboﬁ
(
¨gv
[0], &
ru¬ög
);

302 i‡(
ªt
) {

303 
	`˘s_îr
("InvalidÖaram ofÑunning");

304  
ªt
;

307 i‡(
ru¬ög
) {

308 
ªt
 = 
	`°¨t_órjack_dëe˘
(
ed_d©a
);

310 
ªt
 = 
	`°›_órjack_dëe˘
(
ed_d©a
);

312 i‡(
ªt
) {

313 
	`˘s_îr
("%sÉarjack detect failed %d",

314 
ru¬ög
 ? "Sèπ" : "St›", 
ªt
);

315  
ªt
;

318  
cou¡
;

319 
	}
}

320 
DEVICE_ATTR
(
ru¬ög
, 
S_IWUSR
 | 
S_IRUGO
,

321 
órjack_dëe˘_ru¬ög_show
, 
órjack_dëe˘_ru¬ög_°‹e
);

323 
ssize_t
 
	$órjack_°©e_show
(
devi˚
 *
dev
,

324 
devi˚_©åibuã
 *
©å
, *
buf
)

326 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

327 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

328 
ªt
;

330 
	`˘s_öfo
("Ród sysf†'"
EARJACK_DET_SYSFS_GROUP_NAME
"/%s'",

331 
©å
->©å.
«me
);

333 
ªt
 = 
	`gë_órjack_°©e
(
ed_d©a
);

334 i‡(
ªt
) {

335  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

336 "GëÉ¨jack sèã faûed %d\n", 
ªt
);

339  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

341 
ed_d©a
->
°©e
 ? "ATTACHED" : "DETACHED");

342 
	}
}

343 
DEVICE_ATTR
(
°©e
, 
S_IRUGO
, 
órjack_°©e_show
, 
NULL
);

345 
ssize_t
 
	$órjack_dëe˘_∑øm_show
(
devi˚
 *
dev
,

346 
devi˚_©åibuã
 *
©å
, *
buf
)

348 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

349 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

351 
	`˘s_öfo
("Ród sysf†'"
EARJACK_DET_SYSFS_GROUP_NAME
"/%s'",

352 
©å
->©å.
«me
);

354  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

357 
ed_d©a
->
órjack_°©e_fûï©h
,Éd_d©a->
pﬁl_öãrvÆ
);

358 
	}
}

361 
ssize_t
 
	$órjack_dëe˘_∑øm_°‹e
(
devi˚
 *
dev
,

362 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

364 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

365 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

366 
u32
 
öãrvÆ
;

367 
ªt
;

369 
	`˘s_öfo
("Wrôêsysf†'"
EARJACK_DET_SYSFS_GROUP_NAME
"/%s' size %zu",

370 
©å
->©å.
«me
, 
cou¡
);

372 
	`∑r£_¨g
(
buf
, 
cou¡
);

374 i‡(
¨gc
 < 1 ||árgc > 2) {

375 
	`˘s_îr
("InvalidÇum ofárgs");

376  -
EINVAL
;

379 
öãrvÆ
 = 
ed_d©a
->
pﬁl_öãrvÆ
;

380 i‡(
¨gc
 > 1) {

381 
ªt
 = 
	`k°πou32
(
¨gv
[1], 0, &
öãrvÆ
);

382 i‡(
ªt
) {

383 
	`˘s_îr
("Arg interval is invalid");

384  -
EINVAL
;

388 i‡(
ed_d©a
->
órjack_°©e_fûï©h
) {

389 
	`k‰ì
(
ed_d©a
->
órjack_°©e_fûï©h
);

391 
ed_d©a
->
órjack_°©e_fûï©h
 = 
	`k°rdup
(
¨gv
[0], 
GFP_KERNEL
);

392 i‡(
ed_d©a
->
órjack_°©e_fûï©h
 =
NULL
) {

393 
	`˘s_îr
("DupÉarjack state filepath failed");

394  -
ENOMEM
;

396 
ed_d©a
->
pﬁl_öãrvÆ
 = 
öãrvÆ
;

398  
cou¡
;

399 
	}
}

400 
DEVICE_ATTR
(
∑øm
, 
S_IWUSR
 | 
S_IRUGO
,

401 
órjack_dëe˘_∑øm_show
, 
órjack_dëe˘_∑øm_°‹e
);

403 
©åibuã
 *
	górjack_dëe˘_©ås
[] = {

404 &
dev_©å_íabÀ
.
©å
,

405 &
dev_©å_ru¬ög
.
©å
,

406 &
dev_©å_°©e
.
©å
,

407 &
dev_©å_∑øm
.
©å
,

408 
NULL


411 c⁄° 
©åibuã_group
 
	górjack_dëe˘_©å_group
 = {

412 .
«me
 = 
EARJACK_DET_SYSFS_GROUP_NAME
,

413 .
	g©ås
 = 
órjack_dëe˘_©ås
,

417 
	$pﬁl_órjack_°©e_w‹k
(
w‹k_°ru˘
 *
w‹k
)

419 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
;

420 
boﬁ
 
¥ev_°©e
 = 
Ál£
;

421 
ªt
;

423 
	`˘s_dbg
("PollÉarjack state work");

425 
ed_d©a
 = 
	`c⁄èöî_of
(
	`to_dñayed_w‹k
(
w‹k
),

426 
˘s_órjack_dëe˘_d©a
, 
pﬁl_w‹k
);

428 
¥ev_°©e
 = 
ed_d©a
->
°©e
;

430 
ªt
 = 
	`gë_órjack_°©e
(
ed_d©a
);

431 i‡(
ªt
) {

432 
	`˘s_îr
("Gë sèã faûed %d", 
ªt
);

434 i‡(
ed_d©a
->
°©e
 !
¥ev_°©e
) {

435 
	`˘s_öfo
("State changed: %s -> %s",

436 
¥ev_°©e
 ? "ATTACHED" : "DETATCHED",

437 
ed_d©a
->
°©e
 ? "ATTACHED" : "DETATCHED");

439 
	`˘s_lock_devi˚
(&
ed_d©a
->
˘s_d©a
->
˘s_dev
);

440 
ªt
 = 
	`˘s_£t_dev_órjack_©èched
(

441 &
ed_d©a
->
˘s_d©a
->
˘s_dev
,Éd_d©a->
°©e
);

442 
	`˘s_u∆ock_devi˚
(&
ed_d©a
->
˘s_d©a
->
˘s_dev
);

443 i‡(
ªt
) {

444 
	`˘s_îr
("Set devÉarjackáttachedÅo %s failed %d",

445 
ed_d©a
->
°©e
 ? "ATTACHED" : "DETATCHED", 
ªt
);

447 
ed_d©a
->
°©e
 = 
¥ev_°©e
;

452 i‡(!
	`queue_dñayed_w‹k
(
ed_d©a
->
˘s_d©a
->
w‹kqueue
,

453 &
ed_d©a
->
pﬁl_w‹k
,

454 
	`m£cs_to_jiffõs
(
ed_d©a
->
pﬁl_öãrvÆ
))) {

455 
	`˘s_w¨n
("Queue detect work whileálready onÅhe queue");

457 
	}
}

459 
	$˘s_öô_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

461 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
;

462 
ªt
 = 0;

464 
	`˘s_öfo
("Init detect");

466 i‡(
˘s_d©a
 =
NULL
) {

467 
	`˘s_îr
("Init detect with cts_data = NULL");

468  -
EFAULT
;

471 
ed_d©a
 = 
	`kzÆloc
((*ed_d©a), 
GFP_KERNEL
);

472 i‡(
ed_d©a
 =
NULL
) {

473 
	`˘s_îr
("AllocÉarjack detect data failed");

474  -
ENOMEM
;

477 #ifde‡
CONFIG_CTS_OF


478 
ªt
 = 
	`∑r£_órjack_dëe˘_dt
(
ed_d©a
, 
˘s_d©a
->
devi˚
->
of_node
);

480 #ifde‡
CFG_CTS_DEF_EARJACK_DET_ENABLE


481 
ed_d©a
->
íabÀ
 = 
åue
;

483 
ed_d©a
->
íabÀ
 = 
Ál£
;

485 
ed_d©a
->
pﬁl_öãrvÆ
 = 
CFG_CTS_DEF_EARJACK_POLL_INTERVAL
;

486 
ed_d©a
->
órjack_°©e_fûï©h
 = 
	`k°rdup
(

487 
CFG_CTS_DEF_EARJACK_STATE_FILEPATH
, 
GFP_KERNEL
);

488 i‡(
ed_d©a
->
órjack_°©e_fûï©h
 =
NULL
) {

489 
	`˘s_îr
("DupÉarjack state filepath failed");

490 
ªt
 = -
ENOMEM
;

493 i‡(
ªt
) {

494 
	`˘s_îr
("Gë dëe˘Ö¨am faûed %d", 
ªt
);

495 
‰ì_ed_d©a
;

498 
	`˘s_öfo
("Dëe˘: %sABLED", 
ed_d©a
->
íabÀ
 ? "EN" : "DIS");

499 
	`˘s_öfo
(" Fûï©h: '%s'", 
ed_d©a
->
órjack_°©e_fûï©h
);

500 
	`˘s_öfo
(" Pﬁ»I¡: %dms", 
ed_d©a
->
pﬁl_öãrvÆ
);

502 
	`INIT_DELAYED_WORK
(&
ed_d©a
->
pﬁl_w‹k
, 
pﬁl_órjack_°©e_w‹k
);

504 #ifde‡
CONFIG_CTS_SYSFS


505 
	`˘s_öfo
("Cª©êsysf†©å grou∞'%s'", 
EARJACK_DET_SYSFS_GROUP_NAME
);

506 
ªt
 = 
	`sysfs_¸óã_group
(&
˘s_d©a
->
devi˚
->
kobj
,

507 &
órjack_dëe˘_©å_group
);

508 i‡(
ªt
) {

509 
	`˘s_w¨n
("Cª©êsysf†©å grou∞Áûed %d", 
ªt
);

511 
ed_d©a
->
sysfs_©å_group_¸óãd
 = 
åue
;

515 
˘s_d©a
->
órjack_dëe˘_d©a
 = 
ed_d©a
;

516 
ed_d©a
->
˘s_d©a
 = cts_data;

520 
‰ì_ed_d©a
:

521 
	`k‰ì
(
ed_d©a
);

523  
ªt
;

524 
	}
}

526 
	$˘s_deöô_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

528 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
;

529 
ªt
;

531 
	`˘s_öfo
("Deinit detect");

533 i‡(
˘s_d©a
 =
NULL
) {

534 
	`˘s_îr
("Deinit detect with cts_data = NULL");

535  -
EFAULT
;

538 
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

539 i‡(
ed_d©a
 =
NULL
) {

540 
	`˘s_w¨n
("Deinit detect withÉarjack_detect_data = NULL");

544 i‡(
ed_d©a
->
ru¬ög
) {

545 
ªt
 = 
	`°›_órjack_dëe˘
(
ed_d©a
);

546 i‡(
ªt
) {

547 
	`˘s_îr
("St› dëe˘ faûed %d", 
ªt
);

551 #ifde‡
CONFIG_CTS_SYSFS


552 i‡(
ed_d©a
->
sysfs_©å_group_¸óãd
) {

553 
	`˘s_öfo
("Remove sysfsáttr group '%s'",

554 
EARJACK_DET_SYSFS_GROUP_NAME
);

555 
	`sysfs_ªmove_group
(&
˘s_d©a
->
devi˚
->
kobj
,

556 &
órjack_dëe˘_©å_group
);

557 
ed_d©a
->
sysfs_©å_group_¸óãd
 = 
Ál£
;

561 if(
ed_d©a
->
órjack_°©e_fûï©h
) {

562 
	`˘s_öfo
("KfreeÉarjack state filepath");

563 
	`k‰ì
(
ed_d©a
->
órjack_°©e_fûï©h
);

564 
ed_d©a
->
órjack_°©e_fûï©h
 = 
NULL
;

567 
	`k‰ì
(
ed_d©a
);

568 
˘s_d©a
->
órjack_dëe˘_d©a
 = 
NULL
;

571 
	}
}

573 
	$˘s_is_órjack_©èched
(
chù⁄e_ts_d©a
 *
˘s_d©a
, 
boﬁ
 *
©èched
)

575 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
;

576 
ªt
;

578 i‡(
˘s_d©a
 =
NULL
) {

579 
	`˘s_îr
("Get state with cts_data = NULL");

580  -
EFAULT
;

583 
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

584 i‡(
ed_d©a
 =
NULL
) {

585 
	`˘s_îr
("Get state withÉarjack_detect_data = NULL");

586  -
ENODEV
;

589 
ªt
 = 
	`gë_órjack_°©e
(
ed_d©a
);

590 i‡(
ªt
) {

591 
	`˘s_îr
("Gë sèã faûed %d", 
ªt
);

592  
ªt
;

595 *
©èched
 = 
ed_d©a
->
°©e
;

598 
	}
}

600 
	$˘s_°¨t_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

602 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
;

604 i‡(
˘s_d©a
 =
NULL
) {

605 
	`˘s_îr
("Start detect with cts_data = NULL");

606  -
EFAULT
;

609 
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

610 i‡(
ed_d©a
 =
NULL
) {

611 
	`˘s_îr
("Start detect withÉarjack_detect_data = NULL");

612  -
ENODEV
;

615  
	`°¨t_órjack_dëe˘
(
ed_d©a
);

616 
	}
}

618 
	$˘s_°›_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

620 
˘s_órjack_dëe˘_d©a
 *
ed_d©a
;

622 i‡(
˘s_d©a
 =
NULL
) {

623 
	`˘s_îr
("Stop detect with cts_data = NULL");

624  -
EFAULT
;

627 
ed_d©a
 = 
˘s_d©a
->
órjack_dëe˘_d©a
;

628 i‡(
ed_d©a
 =
NULL
) {

629 
	`˘s_îr
("Stop detect withÉarjack_detect_data = NULL");

630  -
ENODEV
;

633  
	`°›_órjack_dëe˘
(
ed_d©a
);

634 
	}
}

	@cts_earjack_detect.h

1 #i‚de‡
CTS_EARJACK_DETECT_H


2 
	#CTS_EARJACK_DETECT_H


	)

4 
	~"˘s_c⁄fig.h
"

6 
	gchù⁄e_ts_d©a
;

8 #ifde‡
CONFIG_CTS_EARJACK_DETECT


9 
˘s_öô_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

10 
˘s_deöô_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

11 
˘s_°¨t_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

12 
˘s_°›_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
);

13 
˘s_is_órjack_©èched
(
chù⁄e_ts_d©a
 *
˘s_d©a
,

14 
boﬁ
 *
©èched
);

16 
ölöe
 
	$˘s_öô_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

18  -
ENOTSUPP
;

19 
	}
}

20 
ölöe
 
	$˘s_deöô_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

22  -
ENOTSUPP
;

23 
	}
}

24 
ölöe
 
	$˘s_°¨t_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

26  -
ENODEV
;

27 
	}
}

28 
ölöe
 
	$˘s_°›_órjack_dëe˘
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

30  -
ENODEV
;

31 
	}
}

32 
ölöe
 
	$˘s_is_órjack_©èched
(
chù⁄e_ts_d©a
 *
˘s_d©a
,

33 
boﬁ
 *
©èched
)

35  -
ENODEV
;

36 
	}
}

	@cts_firmware.c

1 
	#LOG_TAG
 "Fúmw¨e"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_sf˘æ.h
"

7 
	~"˘s_•i_Êash.h
"

8 
	~"˘s_fúmw¨e.h
"

9 
	~<löux/∑th.h
>

10 
	~<löux/mou¡.h
>

11 
	~<löux/«mei.h
>

12 
	~<löux/vmÆloc.h
>

14 
u32
 
	$¸c32
(c⁄° 
u8
 *
d©a
, 
size_t
 
Àn
)

16 c⁄° 
u32
 
¸c32_èbÀ
[] = {

62 
u32
 
¸c
 = 0;

63 
Àn
) {

64 
¸c
 = (¸¯<< 8Ë^ 
¸c32_èbÀ
[((¸¯>> 24Ë^ *
d©a
) & 0xFF];

66 
d©a
++;

67 
Àn
--;

70  
¸c
;

71 
	}
}

73 #i‡
deföed
(
CFG_CTS_DRIVER_BUILTIN_FIRMWARE
Ë|| deföed(
CFG_CTS_FIRMWARE_IN_FS
)

75 #ifde‡
CFG_CTS_DRIVER_BUILTIN_FIRMWARE


76 
	~"˘s_buûtö_fúmw¨e.h
"

77 
	#NUM_DRIVER_BUILTIN_FIRMWARE
 
	`ARRAY_SIZE
(
˘s_drivî_buûtö_fúmw¨es
)

	)

80 
	#CTS_FIRMWARE_MULTI_SECTION_FILE_SIZE
 (0x20000)

	)

81 
	#CTS_SECTION_ENABLE_FLAG
 (0x0000C35A)

	)

83 
	e˘s_fúmw¨e_£˘i⁄_off£t
 {

84 
	mCTS_FIRMWARE_SECTION_OFFSET
 = 0x00000000,

85 
	mCTS_FIRMWARE_CRC_SECTION_OFFSET
 = 0x17000,

86 
	mCTS_DDIPARAM_SECTION_OFFSET
 = 0x00019000,

87 
	mCTS_DDIPARAM_CRC_SECTION_OFFSET
 = 0x1B000,

91 
	s˘s_fúmw¨e_£˘_öfo
 {

92 c⁄° 
u8
 *
	mfúmw¨e_£˘
;

93 
size_t
 
	mfúmw¨e_£˘_size
;

94 c⁄° 
u8
 *
	mfúmw¨e_¸c_£˘
;

95 
size_t
 
	mfúmw¨e_¸c_£˘_size
;

96 
u32
 
	mfúmw¨e_£˘_¸c
;

98 c⁄° 
u8
 *
	mddù¨am_£˘
;

99 
size_t
 
	mddù¨am_£˘_size
;

100 c⁄° 
u8
 *
	mddù¨am_¸c_£˘
;

101 
size_t
 
	mddù¨am_¸c_£˘_size
;

102 
u32
 
	mddù¨am_£˘_¸c
;

106 
	#FIRMWARE_SECTION
(
fúmw¨e
) \

107 ((
fúmw¨e
)->
d©a
)

	)

108 
	#FIRMWARE_CRC_SECTION
(
fúmw¨e
) \

109 ((
fúmw¨e
)->
d©a
 + 
CTS_FIRMWARE_CRC_SECTION_OFFSET
)

	)

110 
	#DDIPARAM_SECTION
(
fúmw¨e
) \

111 ((
fúmw¨e
)->
d©a
 + 
CTS_DDIPARAM_SECTION_OFFSET
)

	)

112 
	#DDIPARAM_CRC_SECTION
(
fúmw¨e
) \

113 ((
fúmw¨e
)->
d©a
 + 
CTS_DDIPARAM_CRC_SECTION_OFFSET
)

	)

115 
	#FIRMWARE_SECTION_CRC
(
fúmw¨e
) \

116 (
	`gë_u«lig√d_À32
(
	`FIRMWARE_CRC_SECTION
(
fúmw¨e
)))

	)

117 
	#FIRMWARE_SECTION_SIZE
(
fúmw¨e
) \

118 (
	`gë_u«lig√d_À32
(
	`FIRMWARE_CRC_SECTION
(
fúmw¨e
Ë+ 4))

	)

119 
	#FIRMWARE_SECTION_CRC_ENABLE
(
fúmw¨e
) \

120 (
	`gë_u«lig√d_À32
(
	`FIRMWARE_CRC_SECTION
(
fúmw¨e
Ë+ 8))

	)

121 
	#FIRMWARE_CRC_SECTION_SIZE
 (12)

	)

123 
	#DDIPARAM_SECTION_ENABLE
(
fúmw¨e
) \

124 (
	`gë_u«lig√d_À32
(
	`DDIPARAM_CRC_SECTION
(
fúmw¨e
)))

	)

125 
	#DDIPARAM_SECTION_CRC_ENABLE
(
fúmw¨e
) \

126 (
	`gë_u«lig√d_À32
(
	`DDIPARAM_CRC_SECTION
(
fúmw¨e
Ë+ 4))

	)

127 
	#DDIPARAM_SECTION_CRC
(
fúmw¨e
) \

128 (
	`gë_u«lig√d_À32
(
	`DDIPARAM_CRC_SECTION
(
fúmw¨e
Ë+ 8))

	)

129 
	#DDIPARAM_SECTION_SIZE
(
fúmw¨e
) \

130 (
	`gë_u«lig√d_À32
(
	`DDIPARAM_CRC_SECTION
(
fúmw¨e
Ë+ 12))

	)

131 
	#DDIPARAM_CRC_SECTION_SIZE
 (17)

	)

134 
	$ˇlc_¸c_ö_Êash
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

135 
u32
 
Êash_addr
, 
size_t
 
size
, u32 *
¸c
)

137  
˘s_dev
->
hwd©a
->
sf˘æ
->
›s
->
	`ˇlc_Êash_¸c
(cts_dev,

138 
Êash_addr
, 
size
, 
¸c
);

139 
	}
}

141 
boﬁ
 
	$is_mu…i_£˘i⁄_fúmw¨e
(c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
)

143  (
fúmw¨e
->
size
 =
CTS_FIRMWARE_MULTI_SECTION_FILE_SIZE
);

144 
	}
}

146 
boﬁ
 
	$is_sögÀ_£˘i⁄_fúmw¨e
(c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
)

148  !(
	`is_mu…i_£˘i⁄_fúmw¨e
(
fúmw¨e
));

149 
	}
}

151 
boﬁ
 
	$is_fúmw¨e_size_vÆid
(c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
)

153  (
fúmw¨e
->
size
 > 0x102 &&

154 
fúmw¨e
->
size
 <
CTS_FIRMWARE_MULTI_SECTION_FILE_SIZE
);

155 
	}
}

157 
boﬁ
 
	$is_mu…i_£˘i⁄_fúmw¨e_vÆid
(

158 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
)

160 
u32
 
¸c
;

162 
¸c
 = 
	`¸c32
(
	`FIRMWARE_SECTION
(
fúmw¨e
), 
	`FIRMWARE_SECTION_SIZE
(firmware));

163 i‡(
¸c
 !
	`FIRMWARE_SECTION_CRC
(
fúmw¨e
)) {

164 
	`˘s_îr
("Firmware-section crc mismatch crc-section %08x != %08x"

166 
¸c
, 
	`FIRMWARE_SECTION_CRC
(
fúmw¨e
));

167  
Ál£
;

170 i‡(
	`DDIPARAM_SECTION_ENABLE
(
fúmw¨e
Ë=
CTS_SECTION_ENABLE_FLAG
) {

171 
¸c
 = 
	`¸c32
(
	`DDIPARAM_SECTION
(
fúmw¨e
), 
	`DDIPARAM_SECTION_SIZE
(firmware));

172 i‡(
¸c
 !
	`DDIPARAM_SECTION_CRC
(
fúmw¨e
)) {

173 
	`˘s_îr
("DDIParam-section crc mismatch crc-section %08x != %08x"

175 
¸c
, 
	`DDIPARAM_SECTION_CRC
(
fúmw¨e
));

176  
Ál£
;

179 
	`˘s_öfo
("DDIParam-section is NOTÉnabled");

182  
åue
;

183 
	}
}

185 
boﬁ
 
	$is_fúmw¨e_vÆid
(c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
)

187 i‡(
fúmw¨e
 && fúmw¨e->
d©a
 && 
	`is_fúmw¨e_size_vÆid
(firmware)) {

188 i‡(
	`is_sögÀ_£˘i⁄_fúmw¨e
(
fúmw¨e
) ||

189 
	`is_mu…i_£˘i⁄_fúmw¨e_vÆid
(
fúmw¨e
)) {

190  
åue
;

194  
Ál£
;

195 
	}
}

197 
	$∑r£_sögÀ_£˘i⁄_fúmw¨e
(

198 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
,

199 
˘s_fúmw¨e_£˘_öfo
 *
öfo
)

201 
u8
 
¸c_£˘
[12];

203 
öfo
->
fúmw¨e_£˘
 = 
fúmw¨e
->
d©a
;

204 
öfo
->
fúmw¨e_£˘_size
 = 
fúmw¨e
->
size
;

205 
öfo
->
fúmw¨e_£˘_¸c
 = 
	`¸c32
(
fúmw¨e
->
d©a
, fúmw¨e->
size
);

207 
	`put_u«lig√d_À32
(
öfo
->
fúmw¨e_£˘_¸c
, 
¸c_£˘
);

208 
	`put_u«lig√d_À32
(
öfo
->
fúmw¨e_£˘_size
, 
¸c_£˘
 + 4);

209 
	`put_u«lig√d_À32
(~0x0000C35A, 
¸c_£˘
 + 8);

210 
öfo
->
fúmw¨e_¸c_£˘
 = 
¸c_£˘
;

211 
öfo
->
fúmw¨e_¸c_£˘_size
 = (
¸c_£˘
);

212 
	}
}

214 
	$∑r£_mu…i_£˘i⁄_fúmw¨e
(

215 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
,

216 
˘s_fúmw¨e_£˘_öfo
 *
öfo
)

218 
öfo
->
fúmw¨e_£˘
 = 
	`FIRMWARE_SECTION
(
fúmw¨e
);

219 
öfo
->
fúmw¨e_£˘_size
 = 
	`FIRMWARE_SECTION_SIZE
(
fúmw¨e
);

220 
öfo
->
fúmw¨e_¸c_£˘
 = 
	`FIRMWARE_CRC_SECTION
(
fúmw¨e
);

221 
öfo
->
fúmw¨e_¸c_£˘_size
 = 
FIRMWARE_CRC_SECTION_SIZE
;

222 
öfo
->
fúmw¨e_£˘_¸c
 = 
	`FIRMWARE_SECTION_CRC
(
fúmw¨e
);

224 i‡(
	`DDIPARAM_SECTION_ENABLE
(
fúmw¨e
Ë=
CTS_SECTION_ENABLE_FLAG
) {

225 
öfo
->
ddù¨am_£˘
 = 
	`DDIPARAM_SECTION
(
fúmw¨e
);

226 
öfo
->
ddù¨am_£˘_size
 = 
	`DDIPARAM_SECTION_SIZE
(
fúmw¨e
);

227 
öfo
->
ddù¨am_¸c_£˘
 = 
	`DDIPARAM_CRC_SECTION
(
fúmw¨e
);

228 
öfo
->
ddù¨am_¸c_£˘_size
 = 
DDIPARAM_CRC_SECTION_SIZE
;

229 
öfo
->
ddù¨am_£˘_¸c
 = 
	`DDIPARAM_SECTION_CRC
(
fúmw¨e
);

231 
	}
}

233 
	$∑r£_fúmw¨e
(c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
,

234 
˘s_fúmw¨e_£˘_öfo
 *
öfo
)

236 
	`mem£t
(
öfo
, 0, (*info));

238 i‡(
	`is_mu…i_£˘i⁄_fúmw¨e
(
fúmw¨e
)) {

239 
	`∑r£_mu…i_£˘i⁄_fúmw¨e
(
fúmw¨e
, 
öfo
);

241 
	`∑r£_sögÀ_£˘i⁄_fúmw¨e
(
fúmw¨e
, 
öfo
);

244 
	`˘s_öfo
(" Fúmw¨ê£˘i⁄ size: %zu", 
öfo
->
fúmw¨e_£˘_size
);

245 i‡(
öfo
->
ddù¨am_¸c_£˘
) {

246 
	`˘s_öfo
(" DDIP¨am se˘i⁄ size: %zu", 
öfo
->
ddù¨am_£˘_size
);

250 
	}
}

252 #ifde‡
CFG_CTS_DRIVER_BUILTIN_FIRMWARE


253 #ifde‡
CONFIG_CTS_SYSFS


254 
	$˘s_gë_num_drivî_buûtö_fúmw¨e
()

256  
NUM_DRIVER_BUILTIN_FIRMWARE
;

257 
	}
}

259 c⁄° 
˘s_fúmw¨e
 *
	$˘s_ªque°_drivî_buûtö_fúmw¨e_by_«me
(c⁄° *
«me
)

261 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
;

262 
i
;

264 
	`˘s_öfo
("Reque° drivî buûtö byÇamê'%s'", 
«me
);

266 
fúmw¨e
 = 
˘s_drivî_buûtö_fúmw¨es
;

267 
i
 = 0; i < 
NUM_DRIVER_BUILTIN_FIRMWARE
; i++, 
fúmw¨e
++) {

268 i‡(
	`°rcmp
(
fúmw¨e
->
«me
,Çame) == 0) {

269 i‡(
	`is_fúmw¨e_vÆid
(
fúmw¨e
)) {

270 
	`˘s_öfo
("Found driver builtin '%s' "

272 
fúmw¨e
->
«me
, fúmw¨e->
hwid
, fúmw¨e->
fwid
,

273 
fúmw¨e
->
size
, 
	`FIRMWARE_VERSION
(firmware));

274  
fúmw¨e
;

277 
	`˘s_w¨n
("Found driver builtin '%s' "

279 
fúmw¨e
->
«me
, fúmw¨e->
hwid
, fúmw¨e->hwid, fúmw¨e->
size
);

283  
NULL
;

284 
	}
}

286 c⁄° 
˘s_fúmw¨e
 *
	$˘s_ªque°_drivî_buûtö_fúmw¨e_by_ödex
(
u32
 
ödex
)

288 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
;

290 
	`˘s_öfo
("Reque° drivî buûtö by index %u", 
ödex
);

292 i‡(
ödex
 < 
NUM_DRIVER_BUILTIN_FIRMWARE
) {

293 
fúmw¨e
 = 
˘s_drivî_buûtö_fúmw¨es
 + 
ödex
;

294 i‡(
	`is_fúmw¨e_vÆid
(
fúmw¨e
)) {

295 
	`˘s_öfo
("Found driver builtin '%s' "

297 
fúmw¨e
->
«me
, fúmw¨e->
hwid
, fúmw¨e->
fwid
,

298 
fúmw¨e
->
size
, 
	`FIRMWARE_VERSION
(firmware));

299  
fúmw¨e
;

301 
	`˘s_w¨n
("Found driver builtin '%s' "

303 
fúmw¨e
->
«me
, fúmw¨e->
hwid
, fúmw¨e->hwid, fúmw¨e->
size
);

305 
	`˘s_w¨n
("Request driver builtin by index %uÅooÜarge >= %zu",

306 
ödex
, 
NUM_DRIVER_BUILTIN_FIRMWARE
);

309  
NULL
;

310 
	}
}

313 c⁄° 
˘s_fúmw¨e
 * 
	$˘s_ªque°_√wî_drivî_buûtö_fúmw¨e
(

314 
u32
 
hwid
, 
u16
 
fwid
, u16 
devi˚_fw_vî
)

316 
	#MATCH_HWID
(
fúmw¨e
, 
hwid
) \

317 ((
hwid
Ë=
CTS_DEV_HWID_ANY
 || (
fúmw¨e
)->hwid =(hwid))

	)

318 
	#MATCH_FWID
(
fúmw¨e
, 
fwid
) \

319 ((
fwid
Ë=
CTS_DEV_FWID_ANY
 || (
fúmw¨e
)->fwid =(fwid))

	)

321 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
 = 
NULL
;

322 
i
;

324 
	`˘s_öfo
("Request driver builtin if match hwid: %06x fwid: %04x && ver > %04x",

325 
hwid
, 
fwid
, 
devi˚_fw_vî
);

327 
fúmw¨e
 = 
˘s_drivî_buûtö_fúmw¨es
;

328 
i
 = 0; i < 
	`ARRAY_SIZE
(
˘s_drivî_buûtö_fúmw¨es
); i++, 
fúmw¨e
++) {

329 i‡(
	`MATCH_HWID
(
fúmw¨e
, 
hwid
Ë&& 
	`MATCH_FWID
(fúmw¨e, 
fwid
)) {

330 i‡(!
	`is_fúmw¨e_vÆid
(
fúmw¨e
)) {

331 
	`˘s_îr
("Found driver builtin '%s' "

333 
fúmw¨e
->
«me
, fúmw¨e->
hwid
, fúmw¨e->
fwid
,

334 
fúmw¨e
->
d©a
, fúmw¨e->
size
);

338 
	`˘s_öfo
("Found matched driver builtin '%s' "

340 
fúmw¨e
->
«me
, fúmw¨e->
hwid
, fúmw¨e->
fwid
,

341 
fúmw¨e
->
size
, 
	`FIRMWARE_VERSION
(firmware));

343 if(
	`FIRMWARE_VERSION
(
fúmw¨e
Ë> 
devi˚_fw_vî
) {

344 
	`˘s_öfo
("FoundÇewer driver builtin '%s' "

346 
fúmw¨e
->
«me
, fúmw¨e->
hwid
, fúmw¨e->
fwid
,

347 
fúmw¨e
->
size
, 
	`FIRMWARE_VERSION
(fúmw¨e), 
devi˚_fw_vî
);

348  
fúmw¨e
;

353 
	`˘s_öfo
("NoÇewer driver builtin found");

355  
NULL
;

357 #unde‡
MATCH_HWID


358 #unde‡
MATCH_FWID


359 
	}
}

362 #ifde‡
CFG_CTS_FIRMWARE_IN_FS


363 
boﬁ
 
	$is_fûesy°em_mou¡ed
(c⁄° *
fûï©h
)

365 
∑th
 
roŸ_∑th
;

366 
∑th
Öath;

367 
ªt
;

369 
ªt
 = 
	`kîn_∑th
("/", 
LOOKUP_FOLLOW
, &
roŸ_∑th
);

370 i‡(
ªt
) {

371  
Ál£
;

374 
ªt
 = 
	`kîn_∑th
(
fûï©h
, 
LOOKUP_FOLLOW
, &
∑th
);

375 i‡(
ªt
) {

376 
îr_put_roŸ_∑th
;

379 i‡(
∑th
.
m¡
->
m¡_sb
 =
roŸ_∑th
.mnt->mnt_sb) {

381 
ªt
 = 
Ál£
;

383 
ªt
 = 
åue
;

386 
	`∑th_put
(&
∑th
);

387 
îr_put_roŸ_∑th
:

388 
	`∑th_put
(&
roŸ_∑th
);

390  !!
ªt
;

391 
	}
}

393 c⁄° 
˘s_fúmw¨e
 *
	$˘s_ªque°_√wî_fúmw¨e_‰om_fs
(

394 c⁄° *
fûï©h
, 
u16
 
cuº_vîsi⁄
)

396 
˘s_fúmw¨e
 *
fúmw¨e
;

397 
fûe
 *file;

398 
ªt
, 
ªad_size
;

399 
u8
 
buff
[2];

400 
u16
 
vîsi⁄
;

401 
loff_t
 
pos
 = 0;

403 
	`˘s_öfo
("Request from file '%s' if version > %04x",

404 
fûï©h
, 
cuº_vîsi⁄
);

406 
fúmw¨e
 = (
˘s_fúmw¨e
 *)
	`kzÆloc
((*fúmw¨e), 
GFP_KERNEL
);

407 i‡(
fúmw¨e
 =
NULL
) {

408 
	`˘s_îr
("Request from fileálloc struct firmware failed");

409  
NULL
;

412 
fûe
 = 
	`fûp_›í
(
fûï©h
, 
O_RDONLY
, 0);

413 i‡(
	`IS_ERR
(
fûe
)) {

414 
	`˘s_îr
("O≥¿fûê'%s' faûed %ld", 
fûï©h
, 
	`PTR_ERR
(
fûe
));

415 
îr_‰ì_fúmw¨e
;

418 
fúmw¨e
->
size
 = 
	`fûe_öode
(
fûe
)->
i_size
;

419 i‡(!
	`is_fúmw¨e_size_vÆid
(
fúmw¨e
)) {

420 
	`˘s_öfo
("Fûê'%s' size: %zu invÆid", 
fûï©h
, 
fúmw¨e
->
size
);

421 
îr_˛o£_fûe
;

424 
pos
 = 
FIRMWARE_VERSION_OFFSET
;

425 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,14,0)

426 
ªad_size
 = 
	`kî√l_ªad
(
fûe
, 
buff
, 2, &
pos
);

428 
ªad_size
 = 
	`kî√l_ªad
(
fûe
, 
pos
, 
buff
, 2);

430 i‡(
ªad_size
 < 0) {

431 
	`˘s_îr
("Read version from offset 0x100 failed");

432 
îr_˛o£_fûe
;

434 
vîsi⁄
 = 
	`gë_u«lig√d_À16
(
buff
);

436 i‡(
vîsi⁄
 <
cuº_vîsi⁄
) {

437 
	`˘s_öfo
("File '%s' size: %zu version: %04x <= %04x",

438 
fûï©h
, 
fúmw¨e
->
size
, 
vîsi⁄
, 
cuº_vîsi⁄
);

439 
îr_˛o£_fûe
;

442 
	`˘s_öfo
("File '%s' size: %zu version: %04x",

443 
fûï©h
, 
fúmw¨e
->
size
, 
vîsi⁄
);

445 
fúmw¨e
->
d©a
 = (
u8
 *)
	`vmÆloc
(fúmw¨e->
size
);

446 i‡(
fúmw¨e
->
d©a
 =
NULL
) {

447 
	`˘s_îr
("Request form fsálloc firmware data failed");

448 
îr_˛o£_fûe
;

451 
pos
 = 0;

452 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,14,0)

453 
ªad_size
 = 
	`kî√l_ªad
(
fûe
, 
fúmw¨e
->
d©a
, fúmw¨e->
size
, &
pos
);

455 
ªad_size
 = 
	`kî√l_ªad
(
fûe
, 
pos
, 
fúmw¨e
->
d©a
, fúmw¨e->
size
);

457 i‡(
ªad_size
 < 0 ||Ñód_sizê!
fúmw¨e
->
size
) {

458 
	`˘s_îr
("Reque° from f†ªad whﬁêfûêÁûed %d", 
ªad_size
);

459 
îr_‰ì_fúmw¨e_d©a
;

462 
ªt
 = 
	`fûp_˛o£
(
fûe
, 
NULL
);

463 i‡(
ªt
) {

464 
	`˘s_w¨n
("Clo£ fûê'%s' faûed %d", 
fûï©h
, 
ªt
);

467 i‡(!
	`is_fúmw¨e_vÆid
(
fúmw¨e
)) {

468 
	`˘s_îr
("Firmware is invalid");

469 
	`v‰ì
(
fúmw¨e
->
d©a
);

470 
îr_‰ì_fúmw¨e
;

473  
fúmw¨e
;

475 
îr_‰ì_fúmw¨e_d©a
:

476 
	`v‰ì
(
fúmw¨e
->
d©a
);

477 
îr_˛o£_fûe
:

478 
	`fûp_˛o£
(
fûe
, 
NULL
);

479 
îr_‰ì_fúmw¨e
:

480 
	`k‰ì
(
fúmw¨e
);

481 
fúmw¨e
 = 
NULL
;

483  
NULL
;

484 
	}
}

486 c⁄° 
˘s_fúmw¨e
 *
	$˘s_ªque°_fúmw¨e_‰om_fs
(c⁄° *
fûï©h
)

488 
	`˘s_öfo
("Reque° from fûê'%s'", 
fûï©h
);

490  
	`˘s_ªque°_√wî_fúmw¨e_‰om_fs
(
fûï©h
, 0);

491 
	}
}

493 
	$˘s_upd©e_fúmw¨e_‰om_fûe
(
˘s_devi˚
 *
˘s_dev
,

494 c⁄° *
fûï©h
, 
boﬁ
 
to_Êash
)

496 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
;

497 
ªt
;

499 
	`˘s_öfo
("Upd©ê‰om fûê'%s'Åÿ%s", 
fûï©h
,

500 
to_Êash
 ? "flash" : "sram");

502 
fúmw¨e
 = 
	`˘s_ªque°_fúmw¨e_‰om_fs
(
fûï©h
);

503 if(
fúmw¨e
 =
NULL
) {

504 
	`˘s_îr
("Reque° from fûê'%s' faûed", 
fûï©h
);

505  -
EFAULT
;

508 
ªt
 = 
	`˘s_upd©e_fúmw¨e
(
˘s_dev
, 
fúmw¨e
, 
to_Êash
);

509 i‡(
ªt
) {

510 
	`˘s_îr
("UpdateÅo %s from file failed %d",

511 
to_Êash
 ? "Êash" : "§am", 
ªt
);

512 
îr_ªÀa£_fúmw¨e
;

515 
	`˘s_öfo
("Update from file success");

517 
îr_ªÀa£_fúmw¨e
:

518 
	`˘s_ªÀa£_fúmw¨e
(
fúmw¨e
);

520  
ªt
;

521 
	}
}

524 c⁄° 
˘s_fúmw¨e
 *
	$˘s_ªque°_fúmw¨e
(

525 
u32
 
hwid
, 
u16
 
fwid
, u16 
cuº_fúmw¨e_vî
)

527 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e_buûtö
 = 
NULL
;

528 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e_‰om_fûe
 = 
NULL
;

530 i‡(
hwid
 =
CTS_DEV_HWID_INVALID
) {

531 
hwid
 = 
CTS_DEV_HWID_ANY
;

533 i‡(
fwid
 =
CTS_DEV_FWID_INVALID
) {

534 
fwid
 = 
CTS_DEV_FWID_ANY
;

537 
	`˘s_öfo
("RequestÇewer if match hwid: %06x fwid: %04x && ver > %04x",

538 
hwid
, 
fwid
, 
cuº_fúmw¨e_vî
);

540 #ifde‡
CFG_CTS_DRIVER_BUILTIN_FIRMWARE


541 
fúmw¨e_buûtö
 = 
	`˘s_ªque°_√wî_drivî_buûtö_fúmw¨e
(

542 
hwid
, 
fwid
, 
cuº_fúmw¨e_vî
);

545 #ifde‡
CFG_CTS_FIRMWARE_IN_FS


547 i‡(
	`is_fûesy°em_mou¡ed
(
CFG_CTS_FIRMWARE_FILEPATH
)) {

548 
fúmw¨e_‰om_fûe
 = 
	`˘s_ªque°_√wî_fúmw¨e_‰om_fs
(

549 
CFG_CTS_FIRMWARE_FILEPATH
,

550 
fúmw¨e_buûtö
 ? 
	`FIRMWARE_VERSION
(firmware_builtin) :

551 
cuº_fúmw¨e_vî
);

555  
fúmw¨e_‰om_fûe
 ? fúmw¨e_‰om_fûê: 
fúmw¨e_buûtö
;

556 
	}
}

558 
	$˘s_ªÀa£_fúmw¨e
(c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
)

560 
	`˘s_öfo
("Release firmware");

563 i‡(
fúmw¨e
 && fúmw¨e->
«me
 =
NULL
) {

564 
	`v‰ì
(
fúmw¨e
->
d©a
);

565 
	`k‰ì
(
fúmw¨e
);

567 
	}
}

569 
	$vÆid©e_Êash_d©a
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

570 
u32
 
Êash_addr
, c⁄° 
u8
 *
d©a
, 
size_t
 
size
,

571 
u8
 *
buf
, 
boﬁ
 
ˇlc_¸c
, 
u32
 
¸c
)

573 
ªt
, 
i
;

574 
boﬁ
 
‰ì_d©a
 = 
Ál£
;

575 
u32
 
¸c_Êash
;

577 
	`˘s_öfo
("Validate flash data from 0x%06x size %zu by %s",

578 
Êash_addr
, 
size
, 
ˇlc_¸c
 ? "check-crc" : "direct-readback");

580 i‡(
ˇlc_¸c
) {

581 
ªt
 = 
	`ˇlc_¸c_ö_Êash
(
˘s_dev
, 
Êash_addr
, 
size
, &
¸c_Êash
);

582 i‡(
ªt
) {

583 
	`˘s_îr
("Calc data in flash from 0x%06x size %zu crc failed %d, "

585 
Êash_addr
, 
size
, 
ªt
);

588 i‡(
¸c_Êash
 !
¸c
) {

589 
	`˘s_îr
("Crc in flash from 0x%06x size %zu mismatch 0x%08x != 0x%08x",

590 
Êash_addr
, 
size
, 
¸c_Êash
, 
¸c
);

593 
	`˘s_öfo
("Flash data crc correct");

599 i‡(
buf
 =
NULL
) {

600 
buf
 = (
u8
 *)
	`kmÆloc
(
size
, 
GFP_KERNEL
);

601 i‡(
buf
 =
NULL
) {

602 
	`˘s_îr
("Validate flash dataállocate mem failed");

603  -
ENOMEM
;

606 
‰ì_d©a
 = 
åue
;

609 
ªt
 = 
	`˘s_ªad_Êash
(
˘s_dev
, 
Êash_addr
, 
buf
, 
size
);

610 i‡(
ªt
) {

611 
	`˘s_îr
("Read flash from 0x%06x size %zu failed %d",

612 
Êash_addr
, 
size
, 
ªt
);

613 
îr_‰ì_buf
;

616 
i
 = 0; i < 
size
; i++) {

617 i‡(
buf
[
i
] !
d©a
[i]) {

618 i‡(
ªt
 == 0) {

619 
	`˘s_îr
("Flash data from 0x%06x size %zu first bytes diff:\n",

620 
Êash_addr
, 
size
);

623 i‡(
ªt
 < 100) {

624 
	`˘s_îr
(" 0x%06x: %02x %02x", 
i
, 
buf
[i], 
d©a
[i]);

625 } i‡(
ªt
 == 100) {

626 
	`˘s_îr
(" ...");

628 
ªt
++;

632 
îr_‰ì_buf
:

633 i‡(
‰ì_d©a
) {

634 
	`k‰ì
(
buf
);

637  
ªt
;

638 
	}
}

640 
	$˘s_¥ogøm_fúmw¨e
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

641 c⁄° 
˘s_fúmw¨e_£˘_öfo
 *
fúmw¨e_öfo
)

643 
ªt
;

644 
u8
 
¸c_£˘_buf
[
FIRMWARE_CRC_SECTION_SIZE
];

646 
	`˘s_öfo
("Progøm fúmw¨êsizê%zu", 
fúmw¨e_öfo
->
fúmw¨e_£˘_size
);

649 
	`˘s_öfo
("Write firmware sectionÅo sram");

650 
ªt
 = 
	`˘s_§am_wrôesb_check_¸c_ªåy
(
˘s_dev
,

651 0, 
fúmw¨e_öfo
->
fúmw¨e_£˘
, fúmw¨e_öfo->
fúmw¨e_£˘_size
,

652 
fúmw¨e_öfo
->
fúmw¨e_£˘_¸c
, 3);

653 i‡(
ªt
) {

654 
	`˘s_îr
("Wrôêfúmw¨ê£˘i⁄Åÿ§am faûed %d", 
ªt
);

655  
ªt
;

658 
ªt
 = 
	`˘s_¥ogøm_Êash_‰om_§am
(
˘s_dev
,

659 4, 4, 
fúmw¨e_öfo
->
fúmw¨e_£˘_size
 - 4);

660 i‡(
ªt
) {

661 
	`˘s_îr
("Progøm fúmw¨ê£˘i⁄ from søm faûed %d", 
ªt
);

662  
ªt
;

665 
ªt
 = 
	`˘s_¥ogøm_Êash
(
˘s_dev
,

666 
CTS_FIRMWARE_CRC_SECTION_OFFSET
,

667 
fúmw¨e_öfo
->
fúmw¨e_¸c_£˘
,

668 
fúmw¨e_öfo
->
fúmw¨e_¸c_£˘_size
);

669 i‡(
ªt
) {

670 
	`˘s_îr
("Progøm fúmw¨ê¸¯£˘i⁄ faûed %d", 
ªt
);

671  
ªt
;

674 
ªt
 = 
	`vÆid©e_Êash_d©a
(
˘s_dev
,

675 
CTS_FIRMWARE_CRC_SECTION_OFFSET
, 
fúmw¨e_öfo
->
fúmw¨e_¸c_£˘
,

676 
fúmw¨e_öfo
->
fúmw¨e_¸c_£˘_size
, 
¸c_£˘_buf
, 
Ál£
, 0);

677 i‡(
ªt
) {

678 
	`˘s_îr
("VÆid©êFúmw¨e-CRC se˘i⁄ faûed %d", 
ªt
);

679  
ªt
;

682 
ªt
 = 
	`˘s_¥ogøm_Êash
(
˘s_dev
, 0, 
fúmw¨e_öfo
->
fúmw¨e_£˘
, 4);

683 i‡(
ªt
) {

684 
	`˘s_îr
("Progøm fúmw¨ê£˘i⁄ fi° 4byã†Áûed %d", 
ªt
);

685  
ªt
;

688 
ªt
 = 
	`vÆid©e_Êash_d©a
(
˘s_dev
,

689 
CTS_FIRMWARE_SECTION_OFFSET
, 
fúmw¨e_öfo
->
fúmw¨e_£˘
,

690 
fúmw¨e_öfo
->
fúmw¨e_£˘_size
, 
NULL
,

691 
åue
, 
fúmw¨e_öfo
->
fúmw¨e_£˘_¸c
);

692 i‡(
ªt
) {

693 
	`˘s_îr
("VÆid©êfúmw¨ê£˘i⁄ faûed %d", 
ªt
);

694  
ªt
;

698 
	}
}

700 
	$˘s_¥ogøm_ddù¨am
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

701 c⁄° 
˘s_fúmw¨e_£˘_öfo
 *
fúmw¨e_öfo
)

703 
ªt
;

704 
u8
 
¸c_£˘_buf
[
DDIPARAM_CRC_SECTION_SIZE
];

706 
	`˘s_öfo
("Progøm DDIP¨am size: %zu", 
fúmw¨e_öfo
->
ddù¨am_£˘_size
);

708 
ªt
 = 
	`˘s_¥ogøm_Êash
(
˘s_dev
, 
CTS_DDIPARAM_SECTION_OFFSET
,

709 
fúmw¨e_öfo
->
ddù¨am_£˘
, fúmw¨e_öfo->
ddù¨am_£˘_size
);

710 i‡(
ªt
) {

711 
	`˘s_îr
("Progøm DDIP¨am se˘i⁄ faûed %d", 
ªt
);

712  
ªt
;

715 
ªt
 = 
	`vÆid©e_Êash_d©a
(
˘s_dev
,

716 
CTS_DDIPARAM_SECTION_OFFSET
, 
fúmw¨e_öfo
->
ddù¨am_£˘
,

717 
fúmw¨e_öfo
->
ddù¨am_£˘_size
, 
NULL
,

718 
åue
, 
fúmw¨e_öfo
->
ddù¨am_£˘_¸c
);

719 i‡(
ªt
) {

720 
	`˘s_îr
("VÆid©êDDIP¨am se˘i⁄ faûed %d", 
ªt
);

721  
ªt
;

724 
ªt
 = 
	`˘s_¥ogøm_Êash
(
˘s_dev
, 
CTS_DDIPARAM_CRC_SECTION_OFFSET
,

725 
fúmw¨e_öfo
->
ddù¨am_¸c_£˘
,

726 
fúmw¨e_öfo
->
ddù¨am_¸c_£˘_size
);

727 i‡(
ªt
) {

728 
	`˘s_îr
("Progøm DDIP¨am-CRC se˘i⁄ faûed %d", 
ªt
);

729  
ªt
;

732 
ªt
 = 
	`vÆid©e_Êash_d©a
(
˘s_dev
,

733 
CTS_DDIPARAM_CRC_SECTION_OFFSET
, 
fúmw¨e_öfo
->
ddù¨am_¸c_£˘
,

734 
fúmw¨e_öfo
->
ddù¨am_¸c_£˘_size
, 
¸c_£˘_buf
, 
Ál£
, 0);

735 i‡(
ªt
) {

736 
	`˘s_îr
("VÆid©êDDIP¨am-CRC se˘i⁄ faûed %d", 
ªt
);

737  
ªt
;

741 
	}
}

744 
	$˘s_upd©e_fúmw¨e
(
˘s_devi˚
 *
˘s_dev
,

745 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
, 
boﬁ
 
to_Êash
)

747 
˘s_fúmw¨e_£˘_öfo
 
fúmw¨e_öfo
;

748 
ªt
, 
ªåõs
;

750 
	`˘s_öfo
("Update firmwareÅo %s ver: %04x size: %zu",

751 
to_Êash
 ? "flash" : "sram",

752 
	`FIRMWARE_VERSION
(
fúmw¨e
), fúmw¨e->
size
);

754 i‡(
	`∑r£_fúmw¨e
(
fúmw¨e
, &
fúmw¨e_öfo
)) {

755 
	`˘s_îr
("Parse firmware failed");

756  -
EINVAL
;

759 
˘s_dev
->
πd©a
.
upd©ög
 = 
åue
;

761 
ªt
 = 
	`˘s_íãr_¥ogøm_mode
(
˘s_dev
);

762 i‡(
ªt
) {

763 
	`˘s_îr
("Devi˚É¡îÖrogøm modêÁûed %d", 
ªt
);

764 
out
;

767 
ªt
 = 
	`˘s_¥ï¨e_Êash_›î©i⁄
(
˘s_dev
);

768 i‡(
ªt
) {

769 
	`˘s_w¨n
("Pª∑ª fœsh o≥øti⁄ faûed %d", 
ªt
);

773 i‡(!
to_Êash
 || !
˘s_dev
->
πd©a
.
has_Êash
) {

774 
	`˘s_öfo
("Write firmware sectionÅo sram size %zu",

775 
fúmw¨e_öfo
.
fúmw¨e_£˘_size
);

776 
ªt
 = 
	`˘s_§am_wrôesb_check_¸c_ªåy
(
˘s_dev
,

777 0, 
fúmw¨e_öfo
.
fúmw¨e_£˘
, fúmw¨e_öfo.
fúmw¨e_£˘_size
,

778 
fúmw¨e_öfo
.
fúmw¨e_£˘_¸c
, 3);

779 i‡(
ªt
) {

780 
	`˘s_îr
("Wrôêfúmw¨ê£˘i⁄Åÿ§am faûed %d", 
ªt
);

782 #ifde‡
CFG_CTS_UPDATE_CRCCHECK


783 i‡(
˘s_dev
->
hwd©a
->
hwid
 =
CTS_DEV_HWID_ICNL9911S


784 
˘s_dev
->
hwd©a
->
hwid
 =
CTS_DEV_HWID_ICNL9911C
) {

785 
	`˘s_§am_wrôesb_boŸ_¸c_ªåy
(
˘s_dev
,

786 
fúmw¨e_öfo
.
fúmw¨e_£˘_size
,

787 
fúmw¨e_öfo
.
fúmw¨e_£˘_¸c
,

791 
out
;

794 
ªåõs
 = 0;

796 
ªåõs
++;

798 
ªt
 = 
	`˘s_îa£_Êash
(
˘s_dev
, 
CTS_FIRMWARE_CRC_SECTION_OFFSET
,

799 
fúmw¨e_öfo
.
fúmw¨e_¸c_£˘_size
);

800 i‡(
ªt
) {

801 
	`˘s_îr
("Erase firmware crc section failed %dÑetries %d",

802 
ªt
, 
ªåõs
);

806 
ªt
 = 
	`˘s_îa£_Êash
(
˘s_dev
, 0, 
fúmw¨e_öfo
.
fúmw¨e_£˘_size
);

807 i‡(
ªt
) {

808 
	`˘s_îr
("Erase firmware section failed %dÑetries %d",

809 
ªt
, 
ªåõs
);

813 
ªt
 = 
	`˘s_¥ogøm_fúmw¨e
(
˘s_dev
, &
fúmw¨e_öfo
);

814 i‡(
ªt
) {

815 
	`˘s_îr
("Program firmware & crc section failed %dÑetries %d",

816 
ªt
, 
ªåõs
);

818 } 
ªt
 && 
ªåõs
 < 3);

820 i‡(
ªt
 =0 && 
fúmw¨e_öfo
.
ddù¨am_£˘_size
 != 0) {

821 
ªåõs
 = 0;

823 
ªåõs
++;

825 
ªt
 = 
	`˘s_îa£_Êash
(
˘s_dev
, 
CTS_DDIPARAM_CRC_SECTION_OFFSET
,

826 
fúmw¨e_öfo
.
ddù¨am_¸c_£˘_size
);

827 i‡(
ªt
) {

828 
	`˘s_îr
("Erase DDIParam crc secction failed %d,Ñetries %d",

829 
ªt
, 
ªåõs
);

833 
ªt
 = 
	`˘s_îa£_Êash
(
˘s_dev
, 
CTS_DDIPARAM_SECTION_OFFSET
,

834 
fúmw¨e_öfo
.
ddù¨am_£˘_size
);

835 i‡(
ªt
) {

836 
	`˘s_îr
("Erase DDIParam section failed %d,Ñetries %d",

837 
ªt
, 
ªåõs
);

841 
ªt
 = 
	`˘s_¥ogøm_ddù¨am
(
˘s_dev
, &
fúmw¨e_öfo
);

842 i‡(
ªt
) {

843 
	`˘s_îr
("Program DDIParam & crc section failed %dÑetries %d",

844 
ªt
, 
ªåõs
);

846 } 
ªt
 && 
ªåõs
 < 3);

849 
	`˘s_po°_Êash_›î©i⁄
(
˘s_dev
);

851 
out
:

852 
˘s_dev
->
πd©a
.
upd©ög
 = 
Ál£
;

854 i‡(
ªt
 == 0) {

855 i‡(
fúmw¨e_öfo
.
fúmw¨e_£˘_size
 <=

856 
˘s_dev
->
hwd©a
->
sf˘æ
->
xchg_§am_ba£
) {

857 
ªt
 = 
	`˘s_íãr_n‹mÆ_mode
(
˘s_dev
);

858 i‡(
ªt
) {

859 
	`˘s_îr
("E¡îÇ‹mÆ modêÁûed %d", 
ªt
);

865 #ifde‡
CONFIG_CTS_CHARGER_DETECT


866 i‡(
	`˘s_is_ch¨gî_exi°
(
˘s_dev
)) {

867 
r
 = 
	`˘s_£t_dev_ch¨gî_©èched
(
˘s_dev
, 
åue
);

868 i‡(
r
) {

869 
	`˘s_îr
("Së dev ch¨gîáâached faûed %d", 
r
);

874 #ifde‡
CONFIG_CTS_EARJACK_DETECT


875 i‡(
˘s_dev
->
fwd©a
.
suµ_hódph⁄e_ˇbÀ_ªje˘
 &&

876 
	`˘s_is_órjack_exi°
(
˘s_dev
)) {

877 
r
 = 
	`˘s_£t_dev_órjack_©èched
(
˘s_dev
, 
åue
);

878 i‡(
r
) {

879 
	`˘s_îr
("Së devÉ¨jackáâached faûed %d", 
r
);

884 #ifde‡
CONFIG_CTS_GLOVE


885 i‡(
	`˘s_is_glove_íabÀd
(
˘s_dev
)) {

886 
	`˘s_íãr_glove_mode
(
˘s_dev
);

890 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


891 i‡(
	`˘s_is_fw_log_ªdúe˘
(
˘s_dev
)) {

892 
	`˘s_íabÀ_fw_log_ªdúe˘
(
˘s_dev
);

896  
ªt
;

897 
	}
}

899 
boﬁ
 
	$˘s_is_fúmw¨e_upd©ög
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

901  
˘s_dev
->
πd©a
.
upd©ög
;

902 
	}
}

	@cts_firmware.h

1 #i‚de‡
CTS_FIRMWARE_H


2 
	#CTS_FIRMWARE_H


	)

4 
	~"˘s_c⁄fig.h
"

6 
	s˘s_fúmw¨e
 {

7 c⁄° *
	m«me
;

8 
u32
 
	mhwid
;

9 
u16
 
	mfwid
;

11 
u8
 *
	md©a
;

12 
size_t
 
	msize
;

16 
	#FIRMWARE_VERSION_OFFSET
 0x100

	)

17 
	#FIRMWARE_VERSION
(
fúmw¨e
) \

18 
	`gë_u«lig√d_À16
((
fúmw¨e
)->
d©a
 + 
FIRMWARE_VERSION_OFFSET
)

	)

20 
	g˘s_devi˚
;

22 
u32
 
¸c32
(c⁄° 
u8
 *
d©a
, 
size_t
 
Àn
);

24 #i‡
deföed
(
CFG_CTS_DRIVER_BUILTIN_FIRMWARE
Ë|| deföed(
CFG_CTS_FIRMWARE_IN_FS
)

25 c⁄° 
˘s_fúmw¨e
 *
˘s_ªque°_fúmw¨e
(

26 
u32
 
hwid
, 
u16
 
fwid
, u16 
devi˚_fw_vî
);

27 
˘s_ªÀa£_fúmw¨e
(c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
);

29 
˘s_upd©e_fúmw¨e
(
˘s_devi˚
 *
˘s_dev
,

30 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
, 
boﬁ
 
to_Êash
);

31 
boﬁ
 
˘s_is_fúmw¨e_upd©ög
(c⁄° 
˘s_devi˚
 *
˘s_dev
);

33 
ölöe
 c⁄° 
˘s_fúmw¨e
 *
	$˘s_ªque°_fúmw¨e
(

34 
u32
 
hwid
, 
u16
 
fwid
, u16 
devi˚_fw_vî
Ë{ 
NULL
;
	}
}

35 
ölöe
 
	$˘s_ªÀa£_fúmw¨e
(c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
){
	}
}

37 
ölöe
 
	$˘s_upd©e_fúmw¨e
(
˘s_devi˚
 *
˘s_dev
,

38 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
, 
boﬁ
 
to_Êash
Ë{ -
ENOTSUPP
;
	}
}

39 
ölöe
 
boﬁ
 
	$˘s_is_fúmw¨e_upd©ög
(c⁄° 
˘s_devi˚
 *
˘s_dev
Ë{ 
Ál£
;
	}
}

42 #ifde‡
CFG_CTS_DRIVER_BUILTIN_FIRMWARE


43 
˘s_gë_num_drivî_buûtö_fúmw¨e
();

44 c⁄° 
˘s_fúmw¨e
 *
˘s_ªque°_drivî_buûtö_fúmw¨e_by_«me
(c⁄° *
«me
);

45 c⁄° 
˘s_fúmw¨e
 *
˘s_ªque°_drivî_buûtö_fúmw¨e_by_ödex
(
u32
 
ödex
);

47 
ölöe
 
	$˘s_gë_num_drivî_buûtö_fúmw¨e
(Ë{ 0;
	}
}

48 
ölöe
 c⁄° 
˘s_fúmw¨e
 *
	$˘s_ªque°_drivî_buûtö_fúmw¨e_by_«me
(c⁄° *
«me
Ë{ 
NULL
;
	}
}

49 
ölöe
 c⁄° 
˘s_fúmw¨e
 *
	$˘s_ªque°_drivî_buûtö_fúmw¨e_by_ödex
(
u32
 
ödex
Ë{ 
NULL
;
	}
}

52 #ifde‡
CFG_CTS_FIRMWARE_IN_FS


53 c⁄° 
˘s_fúmw¨e
 *
˘s_ªque°_fúmw¨e_‰om_fs
(c⁄° *
fûï©h
);

54 
˘s_upd©e_fúmw¨e_‰om_fûe
(

55 
˘s_devi˚
 *
˘s_dev
, c⁄° *
fûï©h
, 
boﬁ
 
to_Êash
);

57 
ölöe
 c⁄° 
˘s_fúmw¨e
 *
	$˘s_ªque°_fúmw¨e_‰om_fs
(c⁄° *
fûï©h
Ë{ 
NULL
;
	}
}

58 
ölöe
 
	$˘s_upd©e_fúmw¨e_‰om_fûe
(

59 
˘s_devi˚
 *
˘s_dev
, c⁄° *
fûï©h
, 
boﬁ
 
to_Êash
Ë{ -
ENOTSUPP
;
	}
}

	@cts_i2c_driver.c

1 
	#LOG_TAG
 "I2CDrv"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_sysfs.h
"

7 
	~"˘s_ch¨gî_dëe˘.h
"

8 
	~"˘s_órjack_dëe˘.h
"

9 
	~"˘s_°ªº‹.h
"

11 
boﬁ
 
	g˘s_show_debug_log
 = 
Ál£
;

12 
moduÀ_∑øm_«med
(
debug_log
, 
˘s_show_debug_log
, 
boﬁ
, 0660);

13 
MODULE_PARM_DESC
(
debug_log
, "Show debugÜog control");

15 
	$˘s_su•íd
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

17 
ªt
;

19 
	`˘s_öfo
("Suspend");

21 
	`˘s_lock_devi˚
(&
˘s_d©a
->
˘s_dev
);

22 
ªt
 = 
	`˘s_su•íd_devi˚
(&
˘s_d©a
->
˘s_dev
);

23 
	`˘s_u∆ock_devi˚
(&
˘s_d©a
->
˘s_dev
);

25 i‡(
ªt
) {

26 
	`˘s_îr
("Su•íd devi˚ faûed %d", 
ªt
);

31 
ªt
 = 
	`˘s_°›_devi˚
(&
˘s_d©a
->
˘s_dev
);

32 i‡(
ªt
) {

33 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

34  
ªt
;

37 #ifde‡
CFG_CTS_GESTURE


39 i‡(
	`˘s_is_ge°uª_wakeup_íabÀd
(&
˘s_d©a
->
˘s_dev
)) {

40 
ªt
 = 
	`˘s_∂©_íabÀ_úq_wake
(
˘s_d©a
->
pd©a
);

41 i‡(
ªt
) {

42 
	`˘s_îr
("E«bÀ IRQ wakêÁûed %d", 
ªt
);

43  
ªt
;

45 
ªt
 = 
	`˘s_∂©_íabÀ_úq
(
˘s_d©a
->
pd©a
);

46 i‡(
ªt
){

47 
	`˘s_îr
("E«bÀ IRQ faûed %d",
ªt
);

48  
ªt
;

55 
	`m¶ìp
(20);

58 
	}
}

60 
	$˘s_ªsume
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

62 
ªt
;

64 
	`˘s_öfo
("Resume");

66 #ifde‡
CFG_CTS_GESTURE


67 i‡(
	`˘s_is_ge°uª_wakeup_íabÀd
(&
˘s_d©a
->
˘s_dev
)) {

68 
ªt
 = 
	`˘s_∂©_dißbÀ_úq_wake
(
˘s_d©a
->
pd©a
);

69 i‡(
ªt
) {

70 
	`˘s_w¨n
("DißbÀ IRQ wakêÁûed %d", 
ªt
);

73 i‡((
ªt
 = 
	`˘s_∂©_dißbÀ_úq
(
˘s_d©a
->
pd©a
)) < 0) {

74 
	`˘s_îr
("DißbÀ IRQ faûed %d", 
ªt
);

80 
	`˘s_lock_devi˚
(&
˘s_d©a
->
˘s_dev
);

81 
ªt
 = 
	`˘s_ªsume_devi˚
(&
˘s_d©a
->
˘s_dev
);

82 
	`˘s_u∆ock_devi˚
(&
˘s_d©a
->
˘s_dev
);

83 if(
ªt
) {

84 
	`˘s_w¨n
("Resumêdevi˚ faûed %d", 
ªt
);

85  
ªt
;

88 
ªt
 = 
	`˘s_°¨t_devi˚
(&
˘s_d©a
->
˘s_dev
);

89 i‡(
ªt
) {

90 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
ªt
);

91  
ªt
;

95 
	}
}

97 #ifde‡
CONFIG_CTS_PM_FB_NOTIFIER


98 #ifde‡
CFG_CTS_DRM_NOTIFIER


99 
	$fb_nŸifõr_ˇŒback
(
nŸifõr_block
 *
nb
,

100 
a˘i⁄
, *
d©a
)

102 vﬁ©ûê
bœnk
;

103 c⁄° 
˘s_∂©f‹m_d©a
 *
pd©a
 =

104 
	`c⁄èöî_of
(
nb
, 
˘s_∂©f‹m_d©a
, 
fb_nŸifõr
);

105 
chù⁄e_ts_d©a
 *
˘s_d©a
 =

106 
	`c⁄èöî_of
(
pd©a
->
˘s_dev
, 
chù⁄e_ts_d©a
, cts_dev);

107 
fb_evít
 *
evd©a
 = 
d©a
;

109 
	`˘s_öfo
("FBÇotifier callback");

111 i‡(
evd©a
 &&Évd©a->
d©a
) {

112 i‡(
a˘i⁄
 =
MSM_DRM_EVENT_BLANK
) {

113 
bœnk
 = *(*)
evd©a
->
d©a
;

114 i‡(
bœnk
 =
MSM_DRM_BLANK_UNBLANK
) {

115 
	`˘s_ªsume
(
˘s_d©a
);

116  
NOTIFY_OK
;

118 } i‡(
a˘i⁄
 =
MSM_DRM_EARLY_EVENT_BLANK
) {

119 
bœnk
 = *(*)
evd©a
->
d©a
;

120 i‡(
bœnk
 =
MSM_DRM_BLANK_POWERDOWN
) {

121 
	`˘s_su•íd
(
˘s_d©a
);

122  
NOTIFY_OK
;

127  
NOTIFY_DONE
;

128 
	}
}

130 
	$fb_nŸifõr_ˇŒback
(
nŸifõr_block
 *
nb
,

131 
a˘i⁄
, *
d©a
)

133 vﬁ©ûê
bœnk
;

134 c⁄° 
˘s_∂©f‹m_d©a
 *
pd©a
 =

135 
	`c⁄èöî_of
(
nb
, 
˘s_∂©f‹m_d©a
, 
fb_nŸifõr
);

136 
chù⁄e_ts_d©a
 *
˘s_d©a
 =

137 
	`c⁄èöî_of
(
pd©a
->
˘s_dev
, 
chù⁄e_ts_d©a
, cts_dev);

138 
fb_evít
 *
evd©a
 = 
d©a
;

140 
	`˘s_öfo
("FBÇotifier callback");

142 i‡(
evd©a
 &&Évd©a->
d©a
) {

143 i‡(
a˘i⁄
 =
FB_EVENT_BLANK
) {

144 
bœnk
 = *(*)
evd©a
->
d©a
;

145 i‡(
bœnk
 =
FB_BLANK_UNBLANK
) {

146 
	`˘s_ªsume
(
˘s_d©a
);

147  
NOTIFY_OK
;

149 } i‡(
a˘i⁄
 =
FB_EARLY_EVENT_BLANK
) {

150 
bœnk
 = *(*)
evd©a
->
d©a
;

151 i‡(
bœnk
 =
FB_BLANK_POWERDOWN
) {

152 
	`˘s_su•íd
(
˘s_d©a
);

153  
NOTIFY_OK
;

158  
NOTIFY_DONE
;

159 
	}
}

162 
	$˘s_öô_pm_fb_nŸifõr
(
chù⁄e_ts_d©a
 * 
˘s_d©a
)

164 
	`˘s_öfo
("Init FBÇotifier");

166 
˘s_d©a
->
pd©a
->
fb_nŸifõr
.
nŸifõr_ˇŒ
 = 
fb_nŸifõr_ˇŒback
;

168 #ifde‡
CFG_CTS_DRM_NOTIFIER


169  
	`msm_drm_ªgi°î_˛õ¡
(&
˘s_d©a
->
pd©a
->
fb_nŸifõr
);

171  
	`fb_ªgi°î_˛õ¡
(&
˘s_d©a
->
pd©a
->
fb_nŸifõr
);

173 
	}
}

175 
	$˘s_deöô_pm_fb_nŸifõr
(
chù⁄e_ts_d©a
 * 
˘s_d©a
)

177 
	`˘s_öfo
("Deinit FBÇotifier");

178 #ifde‡
CFG_CTS_DRM_NOTIFIER


179  
	`msm_drm_uƒegi°î_˛õ¡
(&
˘s_d©a
->
pd©a
->
fb_nŸifõr
)

181  
	`fb_uƒegi°î_˛õ¡
(&
˘s_d©a
->
pd©a
->
fb_nŸifõr
);

183 
	}
}

186 #ifde‡
CONFIG_CTS_I2C_HOST


187 
	$˘s_drivî_¥obe
(
i2c_˛õ¡
 *
˛õ¡
,

188 c⁄° 
i2c_devi˚_id
 *
id
)

190 
	$˘s_drivî_¥obe
(
•i_devi˚
 *
˛õ¡
)

193 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
NULL
;

194 
ªt
 = 0;

196 #ifde‡
CONFIG_CTS_I2C_HOST


197 
	`˘s_öfo
("Probe i2c client:Çame='%s'áddr=0x%02x flags=0x%02x irq=%d",

198 
˛õ¡
->
«me
, clõ¡->
addr
, clõ¡->
Êags
, clõ¡->
úq
);

200 #i‡!
	`deföed
(
CONFIG_MTK_PLATFORM
)

201 i‡(
˛õ¡
->
addr
 !
CTS_DEV_NORMAL_MODE_I2CADDR
) {

202 
	`˘s_îr
("Probe i2cáddr 0x%02x != driver configáddr 0x%02x",

203 
˛õ¡
->
addr
, 
CTS_DEV_NORMAL_MODE_I2CADDR
);

204  -
ENODEV
;

208 i‡(!
	`i2c_check_fun˘i⁄Æôy
(
˛õ¡
->
ad≠ãr
, 
I2C_FUNC_I2C
)) {

209 
	`˘s_îr
("Check functionality failed");

210  -
ENODEV
;

214 
˘s_d©a
 = (
chù⁄e_ts_d©a
 *)
	`kzÆloc
((*˘s_d©a), 
GFP_KERNEL
);

215 i‡(
˘s_d©a
 =
NULL
) {

216 
	`˘s_îr
("Allocate chipone_ts_data failed");

217  -
ENOMEM
;

220 
˘s_d©a
->
pd©a
 = (
˘s_∂©f‹m_d©a
 *)
	`kzÆloc
(

221 (
˘s_∂©f‹m_d©a
), 
GFP_KERNEL
);

222 i‡(
˘s_d©a
->
pd©a
 =
NULL
) {

223 
	`˘s_îr
("Allocate cts_platform_data failed");

224 
ªt
 = -
ENOMEM
;

225 
îr_‰ì_˘s_d©a
;

228 #ifde‡
CONFIG_CTS_I2C_HOST


229 
	`i2c_£t_˛õ¡d©a
(
˛õ¡
, 
˘s_d©a
);

230 
˘s_d©a
->
i2c_˛õ¡
 = 
˛õ¡
;

231 
˘s_d©a
->
devi˚
 = &
˛õ¡
->
dev
;

233 
	`•i_£t_drvd©a
(
˛õ¡
, 
˘s_d©a
);

234 
˘s_d©a
->
•i_˛õ¡
 = 
˛õ¡
;

235 
˘s_d©a
->
devi˚
 = &
˛õ¡
->
dev
;

238 
	`˘s_öô_∂©f‹m_d©a
(
˘s_d©a
->
pd©a
, 
˛õ¡
);

240 
˘s_d©a
->
˘s_dev
.
pd©a
 = cts_data->pdata;

241 
˘s_d©a
->
pd©a
->
˘s_dev
 = &cts_data->cts_dev;

243 
˘s_d©a
->
w‹kqueue
 = 
	`¸óã_sögÀthªad_w‹kqueue
(
CFG_CTS_DEVICE_NAME
 "-workqueue");

244 i‡(
˘s_d©a
->
w‹kqueue
 =
NULL
) {

245 
	`˘s_îr
("Create workqueue failed");

246 
ªt
 = -
ENOMEM
;

247 
îr_deöô_∂©f‹m_d©a
;

250 #ifde‡
CONFIG_CTS_ESD_PROTECTION


251 
˘s_d©a
->
esd_w‹kqueue
 = 
	`¸óã_sögÀthªad_w‹kqueue
(
CFG_CTS_DEVICE_NAME
 "-esd_workqueue");

252 i‡(
˘s_d©a
->
esd_w‹kqueue
 =
NULL
) {

253 
	`˘s_îr
("CreateÉsd workqueue failed");

254 
ªt
 = -
ENOMEM
;

255 
îr_de°roy_w‹kqueue
;

258 
ªt
 = 
	`˘s_∂©_ªque°_ªsour˚
(
˘s_d©a
->
pd©a
);

259 i‡(
ªt
 < 0) {

260 
	`˘s_îr
("Reque°Ñesour˚ faûed %d", 
ªt
);

261 
îr_de°roy_esd_w‹kqueue
;

264 
ªt
 = 
	`˘s_∂©_ª£t_devi˚
(
˘s_d©a
->
pd©a
);

265 i‡(
ªt
 < 0) {

266 
	`˘s_îr
("Re£àdevi˚ faûed %d", 
ªt
);

267 
îr_‰ì_ªsour˚
;

270 
ªt
 = 
	`˘s_¥obe_devi˚
(&
˘s_d©a
->
˘s_dev
);

271 i‡(
ªt
) {

272 
	`˘s_îr
("Probêdevi˚ faûed %d", 
ªt
);

273 
îr_‰ì_ªsour˚
;

276 
ªt
 = 
	`˘s_∂©_öô_touch_devi˚
(
˘s_d©a
->
pd©a
);

277 i‡(
ªt
 < 0) {

278 
	`˘s_îr
("InôÅouch devi˚ faûed %d", 
ªt
);

279 
îr_‰ì_ªsour˚
;

282 
ªt
 = 
	`˘s_∂©_öô_vkey_devi˚
(
˘s_d©a
->
pd©a
);

283 i‡(
ªt
 < 0) {

284 
	`˘s_îr
("Inô vkey devi˚ faûed %d", 
ªt
);

285 
îr_deöô_touch_devi˚
;

288 
ªt
 = 
	`˘s_∂©_öô_ge°uª
(
˘s_d©a
->
pd©a
);

289 i‡(
ªt
 < 0) {

290 
	`˘s_îr
("Inô ge°uª faûed %d", 
ªt
);

291 
îr_deöô_vkey_devi˚
;

294 
	`˘s_öô_esd_¥Ÿe˘i⁄
(
˘s_d©a
);

296 
ªt
 = 
	`˘s_toﬁ_öô
(
˘s_d©a
);

297 i‡(
ªt
 < 0) {

298 
	`˘s_w¨n
("InôÅoﬁÇodêÁûed %d", 
ªt
);

301 
ªt
 = 
	`˘s_sysfs_add_devi˚
(&
˛õ¡
->
dev
);

302 i‡(
ªt
 < 0) {

303 
	`˘s_w¨n
("Add sysf†íåy f‹ devi˚ faûed %d", 
ªt
);

306 #ifde‡
CONFIG_CTS_PM_FB_NOTIFIER


307 
ªt
 = 
	`˘s_öô_pm_fb_nŸifõr
(
˘s_d©a
);

308 i‡(
ªt
) {

309 
	`˘s_îr
("Inô FBÇŸifõ∏Áûed %d", 
ªt
);

310 
îr_deöô_sysfs
;

314 
ªt
 = 
	`˘s_∂©_ªque°_úq
(
˘s_d©a
->
pd©a
);

315 i‡(
ªt
 < 0) {

316 
	`˘s_îr
("Reque° IRQ faûed %d", 
ªt
);

317 
îr_ªgi°î_fb
;

320 
ªt
 = 
	`˘s_öô_ch¨gî_dëe˘
(
˘s_d©a
);

321 i‡(
ªt
) {

322 
	`˘s_îr
("Inô ch¨gî dëe˘ faûed %d", 
ªt
);

326 
ªt
 = 
	`˘s_öô_órjack_dëe˘
(
˘s_d©a
);

327 i‡(
ªt
) {

328 
	`˘s_îr
("InôÉ¨jack dëe˘ faûed %d", 
ªt
);

332 
ªt
 = 
	`˘s_°¨t_devi˚
(&
˘s_d©a
->
˘s_dev
);

333 i‡(
ªt
) {

334 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
ªt
);

335 
îr_deöô_órjack_dëe˘
;

340 
îr_deöô_órjack_dëe˘
:

341 
	`˘s_deöô_órjack_dëe˘
(
˘s_d©a
);

342 
	`˘s_deöô_ch¨gî_dëe˘
(
˘s_d©a
);

343 
	`˘s_∂©_‰ì_úq
(
˘s_d©a
->
pd©a
);

345 
îr_ªgi°î_fb
:

346 #ifde‡
CONFIG_CTS_PM_FB_NOTIFIER


347 
	`˘s_deöô_pm_fb_nŸifõr
(
˘s_d©a
);

348 
îr_deöô_sysfs
:

350 
	`˘s_sysfs_ªmove_devi˚
(&
˛õ¡
->
dev
);

351 #ifde‡
CONFIG_CTS_LEGACY_TOOL


352 
	`˘s_toﬁ_deöô
(
˘s_d©a
);

355 #ifde‡
CONFIG_CTS_ESD_PROTECTION


356 
	`˘s_deöô_esd_¥Ÿe˘i⁄
(
˘s_d©a
);

359 #ifde‡
CFG_CTS_GESTURE


360 
	`˘s_∂©_deöô_ge°uª
(
˘s_d©a
->
pd©a
);

363 
îr_deöô_vkey_devi˚
:

364 #ifde‡
CONFIG_CTS_VIRTUALKEY


365 
	`˘s_∂©_deöô_vkey_devi˚
(
˘s_d©a
->
pd©a
);

368 
îr_deöô_touch_devi˚
:

369 
	`˘s_∂©_deöô_touch_devi˚
(
˘s_d©a
->
pd©a
);

371 
îr_‰ì_ªsour˚
:

372 
	`˘s_∂©_‰ì_ªsour˚
(
˘s_d©a
->
pd©a
);

373 
îr_de°roy_esd_w‹kqueue
:

374 #ifde‡
CONFIG_CTS_ESD_PROTECTION


375 
	`de°roy_w‹kqueue
(
˘s_d©a
->
esd_w‹kqueue
);

376 
îr_de°roy_w‹kqueue
:

378 
	`de°roy_w‹kqueue
(
˘s_d©a
->
w‹kqueue
);

379 
îr_deöô_∂©f‹m_d©a
:

380 
	`˘s_deöô_∂©f‹m_d©a
(
˘s_d©a
->
pd©a
);

382 
	`k‰ì
(
˘s_d©a
->
pd©a
);

383 
îr_‰ì_˘s_d©a
:

384 
	`k‰ì
(
˘s_d©a
);

386 
	`˘s_îr
("ProbêÁûed %d", 
ªt
);

388  
ªt
;

389 
	}
}

391 #ifde‡
CONFIG_CTS_I2C_HOST


392 
	$˘s_drivî_ªmove
(
i2c_˛õ¡
 *
˛õ¡
)

394 
	$˘s_drivî_ªmove
(
•i_devi˚
 *
˛õ¡
)

397 
chù⁄e_ts_d©a
 *
˘s_d©a
;

398 
ªt
 = 0;

400 
	`˘s_öfo
("Remove");

402 #ifde‡
CONFIG_CTS_I2C_HOST


403 
˘s_d©a
 = (
chù⁄e_ts_d©a
 *)
	`i2c_gë_˛õ¡d©a
(
˛õ¡
);

405 
˘s_d©a
 = (
chù⁄e_ts_d©a
 *)
	`•i_gë_drvd©a
(
˛õ¡
);

407 i‡(
˘s_d©a
) {

408 
ªt
 = 
	`˘s_°›_devi˚
(&
˘s_d©a
->
˘s_dev
);

409 i‡(
ªt
) {

410 
	`˘s_w¨n
("St› devi˚ faûed %d", 
ªt
);

413 
	`˘s_deöô_ch¨gî_dëe˘
(
˘s_d©a
);

414 
	`˘s_deöô_órjack_dëe˘
(
˘s_d©a
);

416 
	`˘s_∂©_‰ì_úq
(
˘s_d©a
->
pd©a
);

418 #ifde‡
CONFIG_CTS_PM_FB_NOTIFIER


419 
	`˘s_deöô_pm_fb_nŸifõr
(
˘s_d©a
);

422 
	`˘s_toﬁ_deöô
(
˘s_d©a
);

424 
	`˘s_sysfs_ªmove_devi˚
(&
˛õ¡
->
dev
);

426 
	`˘s_deöô_esd_¥Ÿe˘i⁄
(
˘s_d©a
);

428 
	`˘s_∂©_deöô_touch_devi˚
(
˘s_d©a
->
pd©a
);

430 
	`˘s_∂©_deöô_vkey_devi˚
(
˘s_d©a
->
pd©a
);

432 
	`˘s_∂©_deöô_ge°uª
(
˘s_d©a
->
pd©a
);

434 
	`˘s_∂©_‰ì_ªsour˚
(
˘s_d©a
->
pd©a
);

436 #ifde‡
CONFIG_CTS_ESD_PROTECTION


437 i‡(
˘s_d©a
->
esd_w‹kqueue
) {

438 
	`de°roy_w‹kqueue
(
˘s_d©a
->
esd_w‹kqueue
);

442 i‡(
˘s_d©a
->
w‹kqueue
) {

443 
	`de°roy_w‹kqueue
(
˘s_d©a
->
w‹kqueue
);

446 
	`˘s_deöô_∂©f‹m_d©a
(
˘s_d©a
->
pd©a
);

448 i‡(
˘s_d©a
->
pd©a
) {

449 
	`k‰ì
(
˘s_d©a
->
pd©a
);

451 
	`k‰ì
(
˘s_d©a
);

453 
	`˘s_w¨n
("Chipone i2c driverÑemove while NULL chipone_ts_data");

454  -
EINVAL
;

457  
ªt
;

458 
	}
}

460 #ifde‡
CONFIG_CTS_PM_LEGACY


461 
	$˘s_i2c_drivî_su•íd
(
devi˚
 *
dev
, 
pm_mesßge_t
 
°©e
)

463 
	`˘s_öfo
("Suspend byÜegacyÖower management");

464  
	`˘s_su•íd
(
	`dev_gë_drvd©a
(
dev
));

465 
	}
}

467 
	$˘s_i2c_drivî_ªsume
(
devi˚
 *
dev
)

469 
	`˘s_öfo
("Resume byÜegacyÖower management");

470  
	`˘s_ªsume
(
	`dev_gë_drvd©a
(
dev
));

471 
	}
}

474 #ifde‡
CONFIG_CTS_PM_GENERIC


475 
	$˘s_i2c_drivî_pm_su•íd
(
devi˚
 *
dev
)

477 
	`˘s_öfo
("Suspend by busÖower management");

478  
	`˘s_su•íd
(
	`dev_gë_drvd©a
(
dev
));

479 
	}
}

481 
	$˘s_i2c_drivî_pm_ªsume
(
devi˚
 *
dev
)

483 
	`˘s_öfo
("Resume by busÖower management");

484  
	`˘s_ªsume
(
	`dev_gë_drvd©a
(
dev
));

485 
	}
}

488 c⁄° 
dev_pm_›s
 
	g˘s_i2c_drivî_pm_›s
 = {

489 .
su•íd
 = 
˘s_i2c_drivî_pm_su•íd
,

490 .
	gªsume
 = 
˘s_i2c_drivî_pm_ªsume
,

494 #ifde‡
CONFIG_CTS_SYSFS


495 
ssize_t
 
	$ª£t_pö_show
(
devi˚_drivî
 *
drivî
, *
buf
)

497  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CFG_CTS_HAS_RESET_PIN: %c\n",

498 #ifde‡
CFG_CTS_HAS_RESET_PIN


504 
	}
}

505 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

506 
DRIVER_ATTR
(
ª£t_pö
, 
S_IRUGO
, 
ª£t_pö_show
, 
NULL
);

508 
DRIVER_ATTR_RO
(
ª£t_pö
);

511 
ssize_t
 
	$sw≠_xy_show
(
devi˚_drivî
 *
dev
, *
buf
)

513  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CFG_CTS_SWAP_XY: %c\n",

514 #ifde‡
CFG_CTS_SWAP_XY


520 
	}
}

521 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

522 
DRIVER_ATTR
(
sw≠_xy
, 
S_IRUGO
, 
sw≠_xy_show
, 
NULL
);

524 
DRIVER_ATTR_RO
(
sw≠_xy
);

527 
ssize_t
 
	$wøp_x_show
(
devi˚_drivî
 *
dev
, *
buf
)

529  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CFG_CTS_WRAP_X: %c\n",

530 #ifde‡
CFG_CTS_WRAP_X


536 
	}
}

537 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

538 
DRIVER_ATTR
(
wøp_x
, 
S_IRUGO
, 
wøp_x_show
, 
NULL
);

540 
DRIVER_ATTR_RO
(
wøp_x
);

543 
ssize_t
 
	$wøp_y_show
(
devi˚_drivî
 *
dev
, *
buf
)

545  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CFG_CTS_WRAP_Y: %c\n",

546 #ifde‡
CFG_CTS_WRAP_Y


552 
	}
}

553 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

554 
DRIVER_ATTR
(
wøp_y
, 
S_IRUGO
, 
wøp_y_show
, 
NULL
);

556 
DRIVER_ATTR_RO
(
wøp_y
);

559 
ssize_t
 
	$f‹˚_upd©e_show
(
devi˚_drivî
 *
dev
, *
buf
)

561  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CFG_CTS_HAS_RESET_PIN: %c\n",

562 #ifde‡
CFG_CTS_FIRMWARE_FORCE_UPDATE


568 
	}
}

569 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

570 
DRIVER_ATTR
(
f‹˚_upd©e
, 
S_IRUGO
, 
f‹˚_upd©e_show
, 
NULL
);

572 
DRIVER_ATTR_RO
(
f‹˚_upd©e
);

575 
ssize_t
 
	$max_touch_num_show
(
devi˚_drivî
 *
dev
, *
buf
)

577  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CFG_CTS_MAX_TOUCH_NUM: %d\n",

578 
CFG_CTS_MAX_TOUCH_NUM
);

579 
	}
}

580 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

581 
DRIVER_ATTR
(
max_touch_num
, 
S_IRUGO
, 
max_touch_num_show
, 
NULL
);

583 
DRIVER_ATTR_RO
(
max_touch_num
);

586 
ssize_t
 
	$vkey_show
(
devi˚_drivî
 *
dev
, *
buf
)

588  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CONFIG_CTS_VIRTUALKEY: %c\n",

589 #ifde‡
CONFIG_CTS_VIRTUALKEY


595 
	}
}

596 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

597 
DRIVER_ATTR
(
vkey
, 
S_IRUGO
, 
vkey_show
, 
NULL
);

599 
DRIVER_ATTR_RO
(
vkey
);

602 
ssize_t
 
	$ge°uª_show
(
devi˚_drivî
 *
dev
, *
buf
)

604  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CFG_CTS_GESTURE: %c\n",

605 #ifde‡
CFG_CTS_GESTURE


611 
	}
}

612 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

613 
DRIVER_ATTR
(
ge°uª
, 
S_IRUGO
, 
ge°uª_show
, 
NULL
);

615 
DRIVER_ATTR_RO
(
ge°uª
);

618 
ssize_t
 
	$esd_¥Ÿe˘i⁄_show
(
devi˚_drivî
 *
dev
, *
buf
)

620  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CONFIG_CTS_ESD_PROTECTION: %c\n",

621 #ifde‡
CONFIG_CTS_ESD_PROTECTION


627 
	}
}

628 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

629 
DRIVER_ATTR
(
esd_¥Ÿe˘i⁄
, 
S_IRUGO
, 
esd_¥Ÿe˘i⁄_show
, 
NULL
);

631 
DRIVER_ATTR_RO
(
esd_¥Ÿe˘i⁄
);

634 
ssize_t
 
	$¶Ÿ_¥Ÿocﬁ_show
(
devi˚_drivî
 *
dev
, *
buf
)

636  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CONFIG_CTS_SLOTPROTOCOL: %c\n",

637 #ifde‡
CONFIG_CTS_SLOTPROTOCOL


643 
	}
}

644 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

645 
DRIVER_ATTR
(
¶Ÿ_¥Ÿocﬁ
, 
S_IRUGO
, 
¶Ÿ_¥Ÿocﬁ_show
, 
NULL
);

647 
DRIVER_ATTR_RO
(
¶Ÿ_¥Ÿocﬁ
);

650 
ssize_t
 
	$max_x„r_size_show
(
devi˚_drivî
 *
dev
, *
buf
)

652 #ifde‡
CONFIG_CTS_I2C_HOST


653  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CFG_CTS_MAX_I2C_XFER_SIZE: %d\n",

654 
CFG_CTS_MAX_I2C_XFER_SIZE
);

656  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "CFG_CTS_MAX_SPI_XFER_SIZE: %d\n",

657 
CFG_CTS_MAX_SPI_XFER_SIZE
);

659 
	}
}

660 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

661 
DRIVER_ATTR
(
max_x„r_size
, 
S_IRUGO
, 
max_x„r_size_show
, 
NULL
);

663 
DRIVER_ATTR_RO
(
max_x„r_size
);

666 
ssize_t
 
	$drivî_öfo_show
(
devi˚_drivî
 *
dev
, *
buf
)

668  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Drivî vîsi⁄: %s\n", 
CFG_CTS_DRIVER_VERSION
);

669 
	}
}

670 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(4,14,0)

671 
DRIVER_ATTR
(
drivî_öfo
, 
S_IRUGO
, 
drivî_öfo_show
, 
NULL
);

673 
DRIVER_ATTR_RO
(
drivî_öfo
);

676 
©åibuã
 *
	g˘s_i2c_drivî_c⁄fig_©ås
[] = {

677 &
drivî_©å_ª£t_pö
.
©å
,

678 &
drivî_©å_sw≠_xy
.
©å
,

679 &
drivî_©å_wøp_x
.
©å
,

680 &
drivî_©å_wøp_y
.
©å
,

681 &
drivî_©å_f‹˚_upd©e
.
©å
,

682 &
drivî_©å_max_touch_num
.
©å
,

683 &
drivî_©å_vkey
.
©å
,

684 &
drivî_©å_ge°uª
.
©å
,

685 &
drivî_©å_esd_¥Ÿe˘i⁄
.
©å
,

686 &
drivî_©å_¶Ÿ_¥Ÿocﬁ
.
©å
,

687 &
drivî_©å_max_x„r_size
.
©å
,

688 &
drivî_©å_drivî_öfo
.
©å
,

689 
NULL


692 c⁄° 
©åibuã_group
 
	g˘s_i2c_drivî_c⁄fig_group
 = {

693 .
«me
 = "config",

694 .
	g©ås
 = 
˘s_i2c_drivî_c⁄fig_©ås
,

697 c⁄° 
©åibuã_group
 *
	g˘s_i2c_drivî_c⁄fig_groups
[] = {

698 &
˘s_i2c_drivî_c⁄fig_group
,

699 
NULL
,

703 #ifde‡
CONFIG_CTS_OF


704 c⁄° 
of_devi˚_id
 
	g˘s_i2c_of_m©ch_èbÀ
[] = {

705 {.
com∑tibÀ
 = 
CFG_CTS_OF_DEVICE_ID_NAME
,},

708 
MODULE_DEVICE_TABLE
(
of
, 
˘s_i2c_of_m©ch_èbÀ
);

711 #ifde‡
CONFIG_CTS_I2C_HOST


712 c⁄° 
i2c_devi˚_id
 
	g˘s_devi˚_id_èbÀ
[] = {

713 {
CFG_CTS_DEVICE_NAME
, 0},

717 c⁄° 
•i_devi˚_id
 
	g˘s_devi˚_id_èbÀ
[] = {

718 {
CFG_CTS_DEVICE_NAME
, 0},

723 #ifde‡
CONFIG_CTS_I2C_HOST


724 
i2c_drivî
 
	g˘s_i2c_drivî
 = {

726 
•i_drivî
 
˘s_•i_drivî
 = {

728 .
¥obe
 = 
˘s_drivî_¥obe
,

729 .
	gªmove
 = 
˘s_drivî_ªmove
,

730 .
	gdrivî
 = {

731 .
«me
 = 
CFG_CTS_DRIVER_NAME
,

732 .
	gow√r
 = 
THIS_MODULE
,

733 #ifde‡
CONFIG_CTS_OF


734 .
	gof_m©ch_èbÀ
 = 
of_m©ch_±r
(
˘s_i2c_of_m©ch_èbÀ
),

736 #ifde‡
CONFIG_CTS_SYSFS


737 .
	ggroups
 = 
˘s_i2c_drivî_c⁄fig_groups
,

739 #ifde‡
CONFIG_CTS_PM_LEGACY


740 .
	gsu•íd
 = 
˘s_i2c_drivî_su•íd
,

741 .
	gªsume
 = 
˘s_i2c_drivî_ªsume
,

743 #ifde‡
CONFIG_CTS_PM_GENERIC


744 .
	gpm
 = &
˘s_i2c_drivî_pm_›s
,

748 .
	gid_èbÀ
 = 
˘s_devi˚_id_èbÀ
,

751 
__öô
 
	$˘s_drivî_öô
()

753 
ªt
 = 0;

755 
	`˘s_öfo
("Init");

757 #ifde‡
CONFIG_CTS_I2C_HOST


758 
ªt
 = 
	`i2c_add_drivî
(&
˘s_i2c_drivî
);

760 
ªt
 = 
	`•i_ªgi°î_drivî
(&
˘s_•i_drivî
);

763 
	`˘s_öfo
("InôÑëu∫ "
CTS_ERR_FMT_STR
, 
	`CTS_ERR_ARG
(
ªt
));

765  
ªt
;

766 
	}
}

769 
__exô
 
	$˘s_drivî_exô
()

771 
	`˘s_öfo
("Exit");

773 #ifde‡
CONFIG_CTS_I2C_HOST


774 
	`i2c_dñ_drivî
(&
˘s_i2c_drivî
);

776 
	`•i_uƒegi°î_drivî
(&
˘s_•i_drivî
);

778 
	}
}

780 
moduÀ_öô
(
˘s_drivî_öô
);

781 
moduÀ_exô
(
˘s_drivî_exô
);

783 
MODULE_DESCRIPTION
("Chipone TDDIÅouchscreen Driver for QualCommÖlatform");

784 
MODULE_VERSION
(
CFG_CTS_DRIVER_VERSION
);

785 
MODULE_AUTHOR
("Miao Defang <dfmiao@chiponeic.com>");

786 
MODULE_LICENSE
("GPL");

	@cts_plat_qcom_config.h

1 #i‚de‡
CTS_PLAT_QCOM_CONFIG_H


2 
	#CTS_PLAT_QCOM_CONFIG_H


	)

4 
	#CONFIG_CTS_PM_FB_NOTIFIER


	)

6 #ifde‡
CONFIG_CTS_PM_FB_NOTIFIER


7 #ifde‡
CONFIG_DRM_MSM


8 
	#CFG_CTS_DRM_NOTIFIER


	)

11 #i‡
deföed
(
CONFIG_PM_SLEEP
Ë&& deföed(
CONFIG_PM_SUSPEND
)

15 #i‡!
deföed
(
CONFIG_CTS_PM_GENERIC
)

16 
	#CONFIG_CTS_PM_LEGACY


	)

20 
	#CFG_CTS_MAX_I2C_XFER_SIZE
 (48u)

	)

21 
	#CFG_CTS_MAX_SPI_XFER_SIZE
 (1400u)

	)

23 
	#CTS_FW_LOG_REDIRECT_SIGN
 0x60

	)

24 
	#CTS_FW_LOG_BUF_LEN
 128

	)

30 
	#CFG_CTS_DEVICE_NAME
 "chù⁄e-tddi"

	)

31 
	#CFG_CTS_DRIVER_NAME
 "chù⁄e-tddi"

	)

33 #i‡
CFG_CTS_MAX_I2C_XFER_SIZE
 < 8

37 #ifde‡
CONFIG_OF


38 
	#CONFIG_CTS_OF


	)

40 #ifde‡
CONFIG_CTS_OF


41 
	#CFG_CTS_OF_DEVICE_ID_NAME
 "chù⁄e-tddi"

	)

43 
	#CFG_CTS_OF_INT_GPIO_NAME
 "chù⁄e,úq-gpio"

	)

44 
	#CFG_CTS_OF_RST_GPIO_NAME
 "chù⁄e,r°-gpio"

	)

45 
	#CFG_CTS_OF_X_RESOLUTION_NAME
 "chù⁄e,x-ªs"

	)

46 
	#CFG_CTS_OF_Y_RESOLUTION_NAME
 "chù⁄e,y-ªs"

	)

	@cts_platform.c

1 
	#LOG_TAG
 "Pœt"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_fúmw¨e.h
"

8 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


9 
size_t
 
	$˘s_∂©_gë_max_fw_log_size
(
˘s_∂©f‹m_d©a
 *
pd©a
)

11  
CTS_FW_LOG_BUF_LEN
;

12 
	}
}

14 
u8
 *
	$˘s_∂©_gë_fw_log_buf
(
˘s_∂©f‹m_d©a
 *
pd©a
,

15 
size_t
 
size
)

17  
pd©a
->
fw_log_buf
;

18 
	}
}

21 
size_t
 
	$˘s_∂©_gë_max_i2c_x„r_size
(
˘s_∂©f‹m_d©a
 *
pd©a
)

23  
CFG_CTS_MAX_I2C_XFER_SIZE
;

24 
	}
}

26 #ifde‡
CONFIG_CTS_I2C_HOST


27 
u8
 *
	$˘s_∂©_gë_i2c_x„r_buf
(
˘s_∂©f‹m_d©a
 *
pd©a
,

28 
size_t
 
x„r_size
)

30  
pd©a
->
i2c_fifo_buf
;

31 
	}
}

33 
	$˘s_∂©_i2c_wrôe
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
i2c_addr
,

34 c⁄° *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

36 
ªt
 = 0, 
ªåõs
 = 0;

38 
i2c_msg
 
msg
 = {

39 .
Êags
 = 0,

40 .
addr
 = 
i2c_addr
,

41 .
buf
 = (
u8
 *)
§c
,

42 .
Àn
 =Üen,

46 
ªt
 = 
	`i2c_å™s„r
(
pd©a
->
i2c_˛õ¡
->
ad≠ãr
, &
msg
, 1);

47 i‡(
ªt
 != 1) {

48 i‡(
ªt
 >= 0) {

49 
ªt
 = -
EIO
;

52 i‡(
dñay
) {

53 
	`mdñay
(
dñay
);

59 } ++
ªåõs
 < 
ªåy
);

61  
ªt
;

62 
	}
}

64 
	$˘s_∂©_i2c_ªad
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
i2c_addr
,

65 c⁄° 
u8
 *
wbuf
, 
size_t
 
wÀn
, *
rbuf
, size_à
æí
,

66 
ªåy
, 
dñay
)

68 
num_msg
, 
ªt
 = 0, 
ªåõs
 = 0;

70 
i2c_msg
 
msgs
[2] = {

72 .
addr
 = 
i2c_addr
,

73 .
Êags
 = 0,

74 .
buf
 = (
u8
 *)
wbuf
,

75 .
Àn
 = 
wÀn


78 .
addr
 = 
i2c_addr
,

79 .
Êags
 = 
I2C_M_RD
,

80 .
buf
 = (
u8
 *)
rbuf
,

81 .
Àn
 = 
æí


85 i‡(
wbuf
 =
NULL
 || 
wÀn
 == 0) {

86 
num_msg
 = 1;

88 
num_msg
 = 2;

92 
ªt
 = 
	`i2c_å™s„r
(
pd©a
->
i2c_˛õ¡
->
ad≠ãr
,

93 
msgs
 + 
	`ARRAY_SIZE
(msgsË- 
num_msg
,Çum_msg);

95 i‡(
ªt
 !
num_msg
) {

96 i‡(
ªt
 >= 0) {

97 
ªt
 = -
EIO
;

100 i‡(
dñay
) {

101 
	`mdñay
(
dñay
);

107 } ++
ªåõs
 < 
ªåy
);

109  
ªt
;

110 
	}
}

112 
	$˘s_∂©_is_i2c_⁄löe
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
i2c_addr
)

114 
u8
 
dummy_byãs
[2] = {0x00, 0x00};

115 
ªt
;

117 
ªt
 = 
	`˘s_∂©_i2c_wrôe
(
pd©a
, 
i2c_addr
, 
dummy_byãs
, (dummy_bytes), 5, 2);

118 i‡(
ªt
) {

119 
	`˘s_îr
("!!! I2Cádd∏0x%02x i†ofÊöê!!!", 
i2c_addr
);

120  
Ál£
;

122 
	`˘s_dbg
("I2Cádd∏0x%02x i†⁄löe", 
i2c_addr
);

123  
åue
;

125 
	}
}

127 
	$˘s_•i_£nd_ªcv
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
size_t
 
Àn
 , 
u8
 *
tx_buf„r
, u8 *
rx_buf„r
)

129 
u16
 
•ìd
;

131 
chù⁄e_ts_d©a
 *
˘s_d©a
;

132 
•i_mesßge
 
msg
;

133 
•i_å™s„r
 
cmd
 = {

134 .
cs_ch™ge
 = 0,

135 .
dñay_u£cs
 = 0,

137 .
•ìd_hz
 = 
•ìd
 * 1000u,

138 .
tx_buf
 = 
tx_buf„r
,

139 .
rx_buf
 = 
rx_buf„r
,

140 .
Àn
 =Üen,

143 .
bôs_≥r_w‹d
 = 8,

145 
ªt
 = 0;

146 
˘s_d©a
 = 
	`c⁄èöî_of
(
pd©a
->
˘s_dev
, 
chù⁄e_ts_d©a
, cts_dev);

147 #ifde‡
CFG_CTS_MANUAL_CS


148 
	`˘s_∂©_£t_cs
(
pd©a
, 0);

150 
	`•i_mesßge_öô
(&
msg
);

151 
	`•i_mesßge_add_èû
(&
cmd
, &
msg
);

152 
ªt
 = 
	`•i_sync
(
˘s_d©a
->
•i_˛õ¡
, &
msg
);

153 i‡(
ªt
) {

154 
	`˘s_îr
("•òsyn¯Áûed %d", 
ªt
);

156 #ifde‡
CFG_CTS_MANUAL_CS


157 
	`˘s_∂©_£t_cs
(
pd©a
, 1);

159  
ªt
;

160 
	}
}

162 
size_t
 
	$˘s_∂©_gë_max_•i_x„r_size
(
˘s_∂©f‹m_d©a
 *
pd©a
)

164  
CFG_CTS_MAX_SPI_XFER_SIZE
;

165 
	}
}

167 
u8
 *
	$˘s_∂©_gë_•i_x„r_buf
(
˘s_∂©f‹m_d©a
 *
pd©a
,

168 
size_t
 
x„r_size
)

170  
pd©a
->
•i_ˇche_buf
;

171 
	}
}

173 
	$˘s_∂©_•i_wrôe
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
dev_addr
,

174 c⁄° *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
)

176 
ªt
 = 0, 
ªåõs
 = 0;

177 
u16
 
¸c
;

178 
size_t
 
d©a_Àn
;

180 i‡(
Àn
 > 
CFG_CTS_MAX_SPI_XFER_SIZE
) {

181 
	`˘s_îr
("wrôêtoÿmuch d©a:wÀn=%zu\n", 
Àn
);

182  -
EIO
;

185 i‡(
pd©a
->
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

186 
pd©a
->
•i_tx_buf
[0] = 
dev_addr
;

187 
	`mem˝y
(&
pd©a
->
•i_tx_buf
[1], 
§c
, 
Àn
);

190 
ªt
 = 
	`˘s_•i_£nd_ªcv
(
pd©a
, 
Àn
 + 1,Öd©a->
•i_tx_buf
,Öd©a->
•i_rx_buf
);

191 i‡(
ªt
) {

192 
	`˘s_îr
("SPI wrôêÁûed %d", 
ªt
);

193 i‡(
dñay
) {

194 
	`mdñay
(
dñay
);

199 } ++
ªåõs
 < 
ªåy
);

202 
d©a_Àn
 = 
Àn
 - 2;

203 
pd©a
->
•i_tx_buf
[0] = 
dev_addr
;

204 
pd©a
->
•i_tx_buf
[1] = *((
u8
 *)
§c
 + 1);

205 
pd©a
->
•i_tx_buf
[2] = *((
u8
 *)
§c
);

206 
	`put_u«lig√d_À16
(
d©a_Àn
, &
pd©a
->
•i_tx_buf
[3]);

207 
¸c
 = (
u16
)
	`¸c32
(
pd©a
->
•i_tx_buf
, 5);

208 
	`put_u«lig√d_À16
(
¸c
, &
pd©a
->
•i_tx_buf
[5]);

209 
	`mem˝y
(&
pd©a
->
•i_tx_buf
[7], (*)
§c
 + 2, 
d©a_Àn
);

210 
¸c
 = (
u16
)
	`¸c32
((*)
§c
 + 2, 
d©a_Àn
);

211 
	`put_u«lig√d_À16
(
¸c
, &
pd©a
->
•i_tx_buf
[7+
d©a_Àn
]);

213 
ªt
 = 
	`˘s_•i_£nd_ªcv
(
pd©a
, 
Àn
 + 7,Öd©a->
•i_tx_buf
,Öd©a->
•i_rx_buf
);

214 
	`udñay
(10 * 
d©a_Àn
);

215 i‡(
ªt
) {

216 
	`˘s_îr
("SPI wrôêÁûed %d", 
ªt
);

217 i‡(
dñay
) {

218 
	`mdñay
(
dñay
);

223 } ++
ªåõs
 < 
ªåy
);

225  
ªt
;

226 
	}
}

228 
	$˘s_∂©_•i_ªad
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
dev_addr
,

229 c⁄° 
u8
 *
wbuf
, 
size_t
 
wÀn
, *
rbuf
, size_à
æí
,

230 
ªåy
, 
dñay
)

232 
ªt
 = 0, 
ªåõs
 = 0;

233 
u16
 
¸c
;

235 i‡(
wÀn
 > 
CFG_CTS_MAX_SPI_XFER_SIZE
 || 
æí
 > CFG_CTS_MAX_SPI_XFER_SIZE) {

236 
	`˘s_îr
("wrôe/ªadÅoÿmuch d©a:wÀn=%zd,ÑÀn=%zd", 
wÀn
, 
æí
);

237  -
EIO
;

240 i‡(
pd©a
->
˘s_dev
->
πd©a
.
¥ogøm_mode
)

242 
pd©a
->
•i_tx_buf
[0] = 
dev_addr
 | 0x01;

243 
	`mem˝y
(&
pd©a
->
•i_tx_buf
[1], 
wbuf
, 
wÀn
);

245 
ªt
 = 
	`˘s_•i_£nd_ªcv
(
pd©a
, 
æí
 + 5,Öd©a->
•i_tx_buf
,Öd©a->
•i_rx_buf
);

246 i‡(
ªt
) {

247 
	`˘s_îr
("SPIÑód faûed %d", 
ªt
);

248 i‡(
dñay
) {

249 
	`mdñay
(
dñay
);

253 
	`mem˝y
(
rbuf
, 
pd©a
->
•i_rx_buf
+5, 
æí
);

255 } ++
ªåõs
 < 
ªåy
);

258 i‡(
wÀn
 != 0) {

259 
pd©a
->
•i_tx_buf
[0] = 
dev_addr
 | 0x01;

260 
pd©a
->
•i_tx_buf
[1] = 
wbuf
[1];

261 
pd©a
->
•i_tx_buf
[2] = 
wbuf
[0];

262 
	`put_u«lig√d_À16
(
æí
, &
pd©a
->
•i_tx_buf
[3]);

263 
¸c
 = (
u16
)
	`¸c32
(
pd©a
->
•i_tx_buf
, 5);

264 
	`put_u«lig√d_À16
(
¸c
, &
pd©a
->
•i_tx_buf
[5]);

265 
ªt
 = 
	`˘s_•i_£nd_ªcv
(
pd©a
, 7,Öd©a->
•i_tx_buf
,Öd©a->
•i_rx_buf
);

266 i‡(
ªt
) {

267 
	`˘s_îr
("SPIÑód faûed %d", 
ªt
);

268 i‡(
dñay
) {

269 
	`mdñay
(
dñay
);

274 
	`mem£t
(
pd©a
->
•i_tx_buf
, 0, 7);

275 
pd©a
->
•i_tx_buf
[0] = 
dev_addr
 | 0x01;

276 
	`udñay
(100);

277 
ªt
 =

278 
	`˘s_•i_£nd_ªcv
(
pd©a
, 
æí
 + 2,

279 
pd©a
->
•i_tx_buf
,

280 
pd©a
->
•i_rx_buf
);

281 i‡(
ªt
) {

282 
	`˘s_îr
("SPIÑód faûed %d", 
ªt
);

283 i‡(
dñay
) {

284 
	`mdñay
(
dñay
);

288 
	`mem˝y
(
rbuf
, 
pd©a
->
•i_rx_buf
, 
æí
);

289 
¸c
 = (
u16
Ë
	`¸c32
(
pd©a
->
•i_rx_buf
, 
æí
);

290 i‡(
	`gë_u«lig√d_À16
(&
pd©a
->
•i_rx_buf
[
æí
]Ë!
¸c
) {

291 
	`˘s_îr
("SPI RX CRCÉrror:Ñx_crc %04x != %04x",

292 
	`gë_u«lig√d_À16
(&
pd©a
->
•i_rx_buf
[
æí
]), 
¸c
);

296 } ++
ªåõs
 < 
ªåy
);

298 i‡(
ªåõs
 >
ªåy
) {

299 
	`˘s_îr
("SPIÑeadÅoo muchÑetry");

302  -
EIO
;

303 
	}
}

305 
	$˘s_∂©_•i_ªad_dñay_idÀ
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
dev_addr
,

306 c⁄° 
u8
 *
wbuf
, 
size_t
 
wÀn
, *
rbuf
,

307 
size_t
 
æí
, 
ªåy
, 
dñay
, 
idÀ
)

309 
ªt
 = 0, 
ªåõs
 = 0;

310 
u16
 
¸c
;

312 i‡(
wÀn
 > 
CFG_CTS_MAX_SPI_XFER_SIZE
 ||

313 
æí
 > 
CFG_CTS_MAX_SPI_XFER_SIZE
) {

314 
	`˘s_îr
("wrôe/ªadÅoÿmuch d©a:wÀn=%zu,ÑÀn=%zu", 
wÀn
,

315 
æí
);

316  -
E2BIG
;

319 i‡(
pd©a
->
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

320 
pd©a
->
•i_tx_buf
[0] = 
dev_addr
 | 0x01;

321 
	`mem˝y
(&
pd©a
->
•i_tx_buf
[1], 
wbuf
, 
wÀn
);

323 
ªt
 =

324 
	`˘s_•i_£nd_ªcv
(
pd©a
, 
æí
 + 5,

325 
pd©a
->
•i_tx_buf
,

326 
pd©a
->
•i_rx_buf
);

327 i‡(
ªt
) {

328 
	`˘s_îr
("SPIÑód faûed %d", 
ªt
);

329 i‡(
dñay
) {

330 
	`mdñay
(
dñay
);

334 
	`mem˝y
(
rbuf
, 
pd©a
->
•i_rx_buf
 + 5, 
æí
);

336 } ++
ªåõs
 < 
ªåy
);

339 i‡(
wÀn
 != 0) {

340 
pd©a
->
•i_tx_buf
[0] = 
dev_addr
 | 0x01;

341 
pd©a
->
•i_tx_buf
[1] = 
wbuf
[1];

342 
pd©a
->
•i_tx_buf
[2] = 
wbuf
[0];

343 
	`put_u«lig√d_À16
(
æí
, &
pd©a
->
•i_tx_buf
[3]);

344 
¸c
 = (
u16
Ë
	`¸c32
(
pd©a
->
•i_tx_buf
, 5);

345 
	`put_u«lig√d_À16
(
¸c
, &
pd©a
->
•i_tx_buf
[5]);

346 
ªt
 =

347 
	`˘s_•i_£nd_ªcv
(
pd©a
, 7,

348 
pd©a
->
•i_tx_buf
,

349 
pd©a
->
•i_rx_buf
);

350 i‡(
ªt
) {

351 
	`˘s_îr
("SPIÑód faûed %d", 
ªt
);

352 i‡(
dñay
) {

353 
	`mdñay
(
dñay
);

358 
	`mem£t
(
pd©a
->
•i_tx_buf
, 0, 7);

359 
pd©a
->
•i_tx_buf
[0] = 
dev_addr
 | 0x01;

360 
	`udñay
(
idÀ
);

361 
ªt
 =

362 
	`˘s_•i_£nd_ªcv
(
pd©a
, 
æí
 + 2,

363 
pd©a
->
•i_tx_buf
,

364 
pd©a
->
•i_rx_buf
);

365 i‡(
ªt
) {

366 i‡(
dñay
) {

367 
	`mdñay
(
dñay
);

371 
	`mem˝y
(
rbuf
, 
pd©a
->
•i_rx_buf
, 
æí
);

372 
¸c
 = (
u16
)
	`¸c32
(
pd©a
->
•i_rx_buf
, 
æí
);

373 i‡(
	`gë_u«lig√d_À16
(&
pd©a
->
•i_rx_buf
[
æí
]Ë!
¸c
) {

377 } ++
ªåõs
 < 
ªåy
);

379 i‡(
ªåõs
 >
ªåy
) {

380 
	`˘s_îr
("cts_plat_spi_readÉrror");

383  -
EIO
;

384 
	}
}

386 
	$˘s_∂©_is_n‹mÆ_mode
(
˘s_∂©f‹m_d©a
 *
pd©a
)

388 
chù⁄e_ts_d©a
 *
˘s_d©a
;

389 
u8
 
tx_buf
[4] = {0};

390 
u16
 
fwid
;

391 
u32
 
addr
;

392 
ªt
;

394 
	`˘s_£t_n‹mÆ_addr
(
pd©a
->
˘s_dev
);

395 
˘s_d©a
 = 
	`c⁄èöî_of
(
pd©a
->
˘s_dev
, 
chù⁄e_ts_d©a
, cts_dev);

396 
addr
 = 
CTS_DEVICE_FW_REG_CHIP_TYPE
;

397 
	`put_u«lig√d_be16
(
addr
, 
tx_buf
);

398 
ªt
 = 
	`˘s_∂©_•i_ªad
(
pd©a
, 
CTS_DEV_NORMAL_MODE_SPIADDR
, 
tx_buf
, 2, &
fwid
, 2, 3, 10);

399 
fwid
 = 
	`be16_to_˝u
(fwid);

400 i‡(
ªt
 || !
	`˘s_is_fwid_vÆid
(
fwid
)) {

401  
Ál£
;

404  
åue
;

405 
	}
}

408 
	$˘s_∂©_h™dÀ_úq
(
˘s_∂©f‹m_d©a
 *
pd©a
)

410 
ªt
;

412 
	`˘s_dbg
("Handle IRQ");

414 
	`˘s_lock_devi˚
(
pd©a
->
˘s_dev
);

415 
ªt
 = 
	`˘s_úq_h™dÀr
(
pd©a
->
˘s_dev
);

416 i‡(
ªt
) {

417 
	`˘s_îr
("Devi˚ h™dÀ IRQ faûed %d", 
ªt
);

419 
	`˘s_u∆ock_devi˚
(
pd©a
->
˘s_dev
);

420 
	}
}

422 
úqªtu∫_t
 
	$˘s_∂©_úq_h™dÀr
(
úq
, *
dev_id
)

424 
˘s_∂©f‹m_d©a
 *
pd©a
;

425 #i‚de‡
CONFIG_GENERIC_HARDIRQS


426 
chù⁄e_ts_d©a
 *
˘s_d©a
;

429 
	`˘s_dbg
("IRQ handler");

431 
pd©a
 = (
˘s_∂©f‹m_d©a
 *)
dev_id
;

432 i‡(
pd©a
 =
NULL
) {

433 
	`˘s_îr
("IRQ handler with NULL dev_id");

434  
IRQ_NONE
;

437 #ifde‡
CONFIG_GENERIC_HARDIRQS


438 
	`˘s_∂©_h™dÀ_úq
(
pd©a
);

440 
˘s_d©a
 = 
	`c⁄èöî_of
(
pd©a
->
˘s_dev
, 
chù⁄e_ts_d©a
, cts_dev);

442 i‡(
	`queue_w‹k
(
˘s_d©a
->
w‹kqueue
, &
pd©a
->
ts_úq_w‹k
)) {

443 
	`˘s_dbg
("IRQ queue work");

444 
	`˘s_∂©_dißbÀ_úq
(
pd©a
);

446 
	`˘s_w¨n
("IRQ handler queue work failedásálready onÅhe queue");

450  
IRQ_HANDLED
;

451 
	}
}

453 #i‚de‡
CONFIG_GENERIC_HARDIRQS


454 
	$˘s_∂©_touch_dev_úq_w‹k
(
w‹k_°ru˘
 *
w‹k
)

456 
˘s_∂©f‹m_d©a
 *
pd©a
 =

457 
	`c⁄èöî_of
(
w‹k
, 
˘s_∂©f‹m_d©a
, 
ts_úq_w‹k
);

459 
	`˘s_dbg
("IRQ work");

461 
	`˘s_∂©_h™dÀ_úq
(
pd©a
);

463 
	`˘s_∂©_íabÀ_úq
(
pd©a
);

464 
	}
}

467 #ifde‡
CONFIG_CTS_OF


468 
	$˘s_∂©_∑r£_dt
(
˘s_∂©f‹m_d©a
 *
pd©a
,

469 
devi˚_node
 *
dev_node
)

471 
ªt
;

473 
	`˘s_öfo
("Parse deviceÅree");

475 
pd©a
->
öt_gpio
 = 
	`of_gë_«med_gpio
(
dev_node
, 
CFG_CTS_OF_INT_GPIO_NAME
, 0);

476 i‡(!
	`gpio_is_vÆid
(
pd©a
->
öt_gpio
)) {

477 
	`˘s_îr
("P¨£ INT GPIO from dàÁûed %d", 
pd©a
->
öt_gpio
);

478 
pd©a
->
öt_gpio
 = -1;

480 
	`˘s_öfo
(" %-12s: %d", "öàgpio", 
pd©a
->
öt_gpio
);

482 
pd©a
->
úq
 = 
	`gpio_to_úq
’d©a->
öt_gpio
);

483 i‡(
pd©a
->
úq
 < 0) {

484 
	`˘s_îr
("P¨£ irq faûed %d", 
ªt
);

485  
pd©a
->
úq
;

487 
	`˘s_öfo
(" %-12s: %d", "úqÇum", 
pd©a
->
úq
);

489 #ifde‡
CFG_CTS_HAS_RESET_PIN


490 
pd©a
->
r°_gpio
 = 
	`of_gë_«med_gpio
(
dev_node
, 
CFG_CTS_OF_RST_GPIO_NAME
, 0);

491 i‡(!
	`gpio_is_vÆid
(
pd©a
->
r°_gpio
)) {

492 
	`˘s_îr
("P¨£ RST GPIO from dàÁûed %d", 
pd©a
->
r°_gpio
);

493 
pd©a
->
r°_gpio
 = -1;

495 
	`˘s_öfo
(" %-12s: %d", "r° gpio", 
pd©a
->
r°_gpio
);

498 
ªt
 = 
	`of_¥›îty_ªad_u32
(
dev_node
, 
CFG_CTS_OF_X_RESOLUTION_NAME
,

499 &
pd©a
->
ªs_x
);

500 i‡(
ªt
) {

501 
	`˘s_w¨n
("P¨£ XÑesﬁuti⁄ from dàÁûed %d", 
ªt
);

504 
	`˘s_öfo
(" %-12s: %d", "XÑesﬁuti⁄", 
pd©a
->
ªs_x
);

506 
ªt
 = 
	`of_¥›îty_ªad_u32
(
dev_node
, 
CFG_CTS_OF_Y_RESOLUTION_NAME
,

507 &
pd©a
->
ªs_y
);

508 i‡(
ªt
) {

509 
	`˘s_w¨n
("P¨£ YÑesﬁuti⁄ from dàÁûed %d", 
ªt
);

512 
	`˘s_öfo
(" %-12s: %d", "YÑesﬁuti⁄", 
pd©a
->
ªs_y
);

515 
	}
}

518 #ifde‡
CFG_CTS_FORCE_UP


519 
	$˘s_∂©_touch_evít_timeout
(
¨g
)

521 
	`˘s_w¨n
("TouchÉventÅimeout");

523 
	`˘s_∂©_ªÀa£_Æl_touch
((
˘s_∂©f‹m_d©a
 *)
¨g
);

524 
	}
}

527 #ifde‡
CONFIG_CTS_I2C_HOST


528 
	$˘s_öô_∂©f‹m_d©a
(
˘s_∂©f‹m_d©a
 *
pd©a
,

529 
i2c_˛õ¡
 *i2c_client)

531 
	$˘s_öô_∂©f‹m_d©a
(
˘s_∂©f‹m_d©a
 *
pd©a
,

532 
•i_devi˚
 *
•i
)

536 
öput_dev
 *input_dev;

537 
ªt
 = 0;

539 
	`˘s_öfo
("Init");

541 #ifde‡
CONFIG_CTS_OF


543 
devi˚
 *
dev
;

545 #ifde‡
CONFIG_CTS_I2C_HOST


546 
dev
 = &
i2c_˛õ¡
->dev;

548 
dev
 = &
•i
->dev;

550 
ªt
 = 
	`˘s_∂©_∑r£_dt
(
pd©a
, 
dev
->
of_node
);

551 i‡(
ªt
) {

552 
	`˘s_îr
("P¨£ dàÁûed %d", 
ªt
);

553  
ªt
;

558 #ifde‡
CONFIG_CTS_I2C_HOST


559 
pd©a
->
i2c_˛õ¡
 = i2c_client;

560 
pd©a
->
i2c_˛õ¡
->
úq
 =Ödata->irq;

562 
pd©a
->
•i_˛õ¡
 = 
•i
;

563 
pd©a
->
•i_˛õ¡
->
úq
 =Ödata->irq;

565 
	`π_muãx_öô
(&
pd©a
->
dev_lock
);

566 
	`•ö_lock_öô
(&
pd©a
->
úq_lock
);

568 
öput_dev
 = 
	`öput_Æloˇã_devi˚
();

569 i‡(
öput_dev
 =
NULL
) {

570 
	`˘s_îr
("FailedÅoállocate input device.");

571  -
ENOMEM
;

575 
öput_dev
->
«me
 = 
CFG_CTS_DEVICE_NAME
;

576 
öput_dev
->
«me
 = 
CFG_CTS_DEVICE_NAME
;

577 #ifde‡
CONFIG_CTS_I2C_HOST


578 
öput_dev
->
id
.
bu°y≥
 = 
BUS_I2C
;

579 
öput_dev
->
dev
.
∑ª¡
 = &
pd©a
->
i2c_˛õ¡
->dev;

581 
öput_dev
->
id
.
bu°y≥
 = 
BUS_SPI
;

582 
öput_dev
->
dev
.
∑ª¡
 = &
pd©a
->
•i_˛õ¡
->dev;

584 
öput_dev
->
evbô
[0] = 
	`BIT_MASK
(
EV_SYN
) |

585 
	`BIT_MASK
(
EV_KEY
) |

586 
	`BIT_MASK
(
EV_ABS
);

587 #ifde‡
CFG_CTS_SWAP_XY


588 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_MT_POSITION_X
,

589 0, 
pd©a
->
ªs_y
, 0, 0);

590 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_MT_POSITION_Y
,

591 0, 
pd©a
->
ªs_x
, 0, 0);

593 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_MT_POSITION_X
,

594 0, 
pd©a
->
ªs_x
, 0, 0);

595 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_MT_POSITION_Y
,

596 0, 
pd©a
->
ªs_y
, 0, 0);

599 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_MT_PRESSURE
, 0, 255, 0, 0);

600 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_MT_TOUCH_MAJOR
,0, 255, 0, 0);

601 
	`öput_£t_abs_∑øms
(
öput_dev
, 
ABS_MT_TRACKING_ID
,0, 
CFG_CTS_MAX_TOUCH_NUM
 * 2, 0, 0);

603 
	`öput_£t_ˇ∑bûôy
(
öput_dev
, 
EV_KEY
, 
BTN_TOUCH
);

605 #ifde‡
CONFIG_CTS_SLOTPROTOCOL


606 
	`öput_mt_öô_¶Ÿs
(
öput_dev
, 
CFG_CTS_MAX_TOUCH_NUM
, 0);

608 
	`__£t_bô
(
INPUT_PROP_DIRECT
, 
öput_dev
->
¥›bô
);

609 
	`__£t_bô
(
EV_ABS
, 
öput_dev
->
evbô
);

610 
	`öput_£t_drvd©a
(
öput_dev
, 
pd©a
);

611 
ªt
 = 
	`öput_ªgi°î_devi˚
(
öput_dev
);

612 i‡(
ªt
) {

613 
	`˘s_îr
("FailedÅoÑegister input device");

614  
ªt
;

617 
pd©a
->
ts_öput_dev
 = 
öput_dev
;

619 #i‡!
	`deföed
(
CONFIG_GENERIC_HARDIRQS
)

620 
	`INIT_WORK
(&
pd©a
->
ts_úq_w‹k
, 
˘s_∂©_touch_dev_úq_w‹k
);

623 #ifde‡
CONFIG_CTS_VIRTUALKEY


625 
u8
 
vkey_keym≠
[
CFG_CTS_NUM_VKEY
] = 
CFG_CTS_VKEY_KEYCODES
;

626 
	`mem˝y
(
pd©a
->
vkey_keycodes
, 
vkey_keym≠
, (vkey_keymap));

627 
pd©a
->
vkey_num
 = 
CFG_CTS_NUM_VKEY
;

631 #ifde‡
CFG_CTS_GESTURE


633 
u8
 
ge°uª_keym≠
[
CFG_CTS_NUM_GESTURE
][2] = 
CFG_CTS_GESTURE_KEYMAP
;

634 
	`mem˝y
(
pd©a
->
ge°uª_keym≠
, gesture_keymap, (gesture_keymap));

635 
pd©a
->
ge°uª_num
 = 
CFG_CTS_NUM_GESTURE
;

639 #ifde‡
CFG_CTS_FORCE_UP


640 
	`£tup_timî
(&
pd©a
->
touch_evít_timeout_timî
,

641 
˘s_∂©_touch_evít_timeout
, ()
pd©a
);

644 #i‚de‡
CONFIG_CTS_I2C_HOST


645 
pd©a
->
•i_•ìd
 = 
CFG_CTS_SPI_SPEED_KHZ
;

648 
	}
}

650 
	$˘s_deöô_∂©f‹m_d©a
(
˘s_∂©f‹m_d©a
 *
pd©a
)

652 
	`˘s_öfo
("De-InitÖlatform_data");

653 
	`öput_uƒegi°î_devi˚
(
pd©a
->
ts_öput_dev
);

655 
	}
}

657 
	$˘s_∂©_ªque°_ªsour˚
(
˘s_∂©f‹m_d©a
 *
pd©a
)

659 
ªt
;

661 
	`˘s_öfo
("RequestÑesource");

663 
ªt
 = 
	`gpio_ªque°_⁄e
(
pd©a
->
öt_gpio
, 
GPIOF_IN
,

664 
CFG_CTS_DEVICE_NAME
 "-int");

665 i‡(
ªt
) {

666 
	`˘s_îr
("Reque° INT gpiÿ(%dËÁûed %d", 
pd©a
->
öt_gpio
, 
ªt
);

667 
îr_out
;

670 #ifde‡
CFG_CTS_HAS_RESET_PIN


671 
ªt
 = 
	`gpio_ªque°_⁄e
(
pd©a
->
r°_gpio
, 
GPIOF_OUT_INIT_HIGH
,

672 
CFG_CTS_DEVICE_NAME
 "-rst");

673 i‡(
ªt
) {

674 
	`˘s_îr
("Reque° RST gpiÿ(%dËÁûed %d", 
pd©a
->
r°_gpio
, 
ªt
);

675 
îr_‰ì_öt
;

682 #ifde‡
CONFIG_CTS_REGULATOR


683 
îr_‰ì_r°
:

685 #ifde‡
CFG_CTS_HAS_RESET_PIN


686 
	`gpio_‰ì
(
pd©a
->
r°_gpio
);

687 
îr_‰ì_öt
:

689 
	`gpio_‰ì
(
pd©a
->
öt_gpio
);

690 
îr_out
:

691  
ªt
;

692 
	}
}

694 
	$˘s_∂©_‰ì_ªsour˚
(
˘s_∂©f‹m_d©a
 *
pd©a
)

696 
	`˘s_öfo
("FreeÑesource");

698 i‡(
	`gpio_is_vÆid
(
pd©a
->
öt_gpio
)) {

699 
	`gpio_‰ì
(
pd©a
->
öt_gpio
);

701 #ifde‡
CFG_CTS_HAS_RESET_PIN


702 i‡(
	`gpio_is_vÆid
(
pd©a
->
r°_gpio
)) {

703 
	`gpio_‰ì
(
pd©a
->
r°_gpio
);

706 
	}
}

708 
	$˘s_∂©_ªque°_úq
(
˘s_∂©f‹m_d©a
 *
pd©a
)

710 
ªt
;

711 
˘s_devi˚
 *
˘s_dev
 = 
pd©a
->cts_dev;

712 
˘s_devi˚_fwd©a
 *
fwd©a
 = &
˘s_dev
->fwdata;

713 
u8
 
öt_mode
;

715 
	`˘s_öfo
("Request IRQ");

716 
öt_mode
 = 
fwd©a
->int_mode;

717 
	`˘s_öfo
("Gë fw i¡ mode:%d,Ñeque° %†IRQ", 
öt_mode
,

718 
öt_mode
==0?"falling" : "rising");

719 #ifde‡
CONFIG_GENERIC_HARDIRQS


720 i‡(
öt_mode
) {

721 
ªt
 = 
	`ªque°_thªaded_úq
(
pd©a
->
úq
, 
NULL
,

722 
˘s_∂©_úq_h™dÀr
, 
IRQF_TRIGGER_RISING
 | 
IRQF_ONESHOT
,

723 
CFG_CTS_DRIVER_NAME
, 
pd©a
);

726 
ªt
 = 
	`ªque°_thªaded_úq
(
pd©a
->
úq
, 
NULL
,

727 
˘s_∂©_úq_h™dÀr
, 
IRQF_TRIGGER_FALLING
 | 
IRQF_ONESHOT
,

728 
CFG_CTS_DRIVER_NAME
, 
pd©a
);

731 i‡(
öt_mode
) {

732 
ªt
 = 
	`ªque°_úq
(
pd©a
->
úq
,

733 
˘s_∂©_úq_h™dÀr
, 
IRQF_TRIGGER_RISING
 | 
IRQF_ONESHOT
,

734 
CFG_CTS_DRIVER_NAME
, 
pd©a
);

737 
ªt
 = 
	`ªque°_úq
(
pd©a
->
úq
,

738 
˘s_∂©_úq_h™dÀr
, 
IRQF_TRIGGER_FALLING
 | 
IRQF_ONESHOT
,

739 
CFG_CTS_DRIVER_NAME
, 
pd©a
);

742 i‡(
ªt
) {

743 
	`˘s_îr
("Reque° IRQ faûed %d", 
ªt
);

744  
ªt
;

747 
	`˘s_∂©_dißbÀ_úq
(
pd©a
);

750 
	}
}

752 
	$˘s_∂©_‰ì_úq
(
˘s_∂©f‹m_d©a
 *
pd©a
)

754 
	`‰ì_úq
(
pd©a
->
úq
,Ödata);

755 
	}
}

757 
	$˘s_∂©_íabÀ_úq
(
˘s_∂©f‹m_d©a
 *
pd©a
)

759 
úqÊags
;

761 
	`˘s_dbg
("Enable IRQ");

763 i‡(
pd©a
->
úq
 > 0) {

764 
	`•ö_lock_úqßve
(&
pd©a
->
úq_lock
, 
úqÊags
);

765 i‡(
pd©a
->
úq_is_dißbÀ
) {

766 
	`íabÀ_úq
(
pd©a
->
úq
);

767 
pd©a
->
úq_is_dißbÀ
 = 
Ál£
;

769 
	`•ö_u∆ock_úqª°‹e
(&
pd©a
->
úq_lock
, 
úqÊags
);

774  -
ENODEV
;

775 
	}
}

777 
	$˘s_∂©_dißbÀ_úq
(
˘s_∂©f‹m_d©a
 *
pd©a
)

779 
úqÊags
;

781 
	`˘s_dbg
("Disable IRQ");

783 i‡(
pd©a
->
úq
 > 0) {

784 
	`•ö_lock_úqßve
(&
pd©a
->
úq_lock
, 
úqÊags
);

785 i‡(!
pd©a
->
úq_is_dißbÀ
) {

786 
	`dißbÀ_úq_nosync
(
pd©a
->
úq
);

787 
pd©a
->
úq_is_dißbÀ
 = 
åue
;

789 
	`•ö_u∆ock_úqª°‹e
(&
pd©a
->
úq_lock
, 
úqÊags
);

794  -
ENODEV
;

795 
	}
}

797 #ifde‡
CFG_CTS_HAS_RESET_PIN


798 
	$˘s_∂©_ª£t_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
)

803 
	`˘s_öfo
("Reset device");

805 
	`gpio_£t_vÆue
(
pd©a
->
r°_gpio
, 1);

806 
	`mdñay
(1);

807 
	`gpio_£t_vÆue
(
pd©a
->
r°_gpio
, 0);

808 
	`mdñay
(10);

809 
	`gpio_£t_vÆue
(
pd©a
->
r°_gpio
, 1);

810 
	`mdñay
(40);

813 
	}
}

815 
	$˘s_∂©_£t_ª£t
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
vÆ
)

817 
	`˘s_öfo
("Së Re£àtÿ%s", 
vÆ
 ? "HIGH" : "LOW");

818 i‡(
vÆ
) {

819 
	`gpio_£t_vÆue
(
pd©a
->
r°_gpio
, 1);

821 
	`gpio_£t_vÆue
(
pd©a
->
r°_gpio
, 0);

824 
	}
}

827 
	$˘s_∂©_gë_öt_pö
(
˘s_∂©f‹m_d©a
 *
pd©a
)

829  
	`gpio_gë_vÆue
(
pd©a
->
öt_gpio
);

830 
	}
}

832 
	$˘s_∂©_powî_up_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
)

834 
	`˘s_öfo
("Power up device");

837 
	}
}

839 
	$˘s_∂©_powî_down_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
)

841 
	`˘s_öfo
("Power down device");

844 
	}
}

846 
	$˘s_∂©_öô_touch_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
)

848 
	`˘s_öfo
("InitÅouch device");

851 
	}
}

853 
	$˘s_∂©_deöô_touch_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
)

855 
	`˘s_öfo
("De-initÅouch device");

857 #i‚de‡
CONFIG_GENERIC_HARDIRQS


858 i‡(
	`w‹k_≥ndög
(&
pd©a
->
ts_úq_w‹k
)) {

859 
	`ˇn˚l_w‹k_sync
(&
pd©a
->
ts_úq_w‹k
);

862 
	}
}

864 
	$˘s_∂©_¥o˚ss_touch_msg
(
˘s_∂©f‹m_d©a
 *
pd©a
,

865 
˘s_devi˚_touch_msg
 *
msgs
, 
num
)

867 
öput_dev
 *öput_dev = 
pd©a
->
ts_öput_dev
;

868 
i
;

869 
c⁄è˘
 = 0;

870 #ifde‡
CONFIG_CTS_SLOTPROTOCOL


871 
fögî_œ°
[
CFG_CTS_MAX_TOUCH_NUM
] = {0};

872 
fögî_cuºít
[
CFG_CTS_MAX_TOUCH_NUM
] = {0};

875 
	`˘s_dbg
("Pro˚s†touch %d msgs", 
num
);

876 i‡(
num
 ==0 ||Çum > 
CFG_CTS_MAX_TOUCH_NUM
) {

880 
i
 = 0; i < 
num
; i++) {

881 
u16
 
x
, 
y
;

883 
x
 = 
	`À16_to_˝u
(
msgs
[
i
].x);

884 
y
 = 
	`À16_to_˝u
(
msgs
[
i
].y);

886 #ifde‡
CFG_CTS_SWAP_XY


887 
	`sw≠
(
x
,
y
);

889 #ifde‡
CFG_CTS_WRAP_X


890 
x
 = 
	`wøp
(
pd©a
->
ªs_x
,x);

892 #ifde‡
CFG_CTS_WRAP_Y


893 
y
 = 
	`wøp
(
pd©a
->
ªs_y
,y);

895 
	`˘s_dbg
(" ProcessÅouch msg[%d]: id[%u]Év=%u x=%u y=%uÖ=%u",

896 
i
, 
msgs
[i].
id
, msgs[i].
evít
, 
x
, 
y
, msgs[i].
¥essuª
);

897 i‡(
msgs
[
i
].
evít
 =
CTS_DEVICE_TOUCH_EVENT_DOWN


898 || 
msgs
[
i
].
evít
 =
CTS_DEVICE_TOUCH_EVENT_MOVE


899 || 
msgs
[
i
].
evít
 =
CTS_DEVICE_TOUCH_EVENT_STAY
) {

900 i‡(
msgs
[
i
].
id
 < 
CFG_CTS_MAX_TOUCH_NUM
) {

901 
fögî_cuºít
[
msgs
[
i
].
id
] = 1;

904 #ifde‡
CONFIG_CTS_SLOTPROTOCOL


906 
msgs
[
i
].
evít
) {

907 
CTS_DEVICE_TOUCH_EVENT_DOWN
:

908 
CTS_DEVICE_TOUCH_EVENT_MOVE
:

909 
CTS_DEVICE_TOUCH_EVENT_STAY
:

910 
c⁄è˘
++;

911 
	`öput_mt_¶Ÿ
(
öput_dev
, 
msgs
[
i
].
id
);

912 
	`öput_mt_ªp‹t_¶Ÿ_°©e
(
öput_dev
, 
MT_TOOL_FINGER
, 
åue
);

913 
	`öput_ªp‹t_abs
(
öput_dev
, 
ABS_MT_POSITION_X
, 
x
);

914 
	`öput_ªp‹t_abs
(
öput_dev
, 
ABS_MT_POSITION_Y
, 
y
);

915 
	`öput_ªp‹t_abs
(
öput_dev
, 
ABS_MT_TOUCH_MAJOR
, 
msgs
[
i
].
¥essuª
);

916 
	`öput_ªp‹t_abs
(
öput_dev
, 
ABS_MT_PRESSURE
, 
msgs
[
i
].
¥essuª
);

919 
CTS_DEVICE_TOUCH_EVENT_UP
:

924 
	`˘s_w¨n
("ProcessÅouch msg with unknownÉvent %u id %u",

925 
msgs
[
i
].
evít
, msgs[i].
id
);

936 
msgs
[
i
].
evít
) {

937 
CTS_DEVICE_TOUCH_EVENT_DOWN
:

938 
CTS_DEVICE_TOUCH_EVENT_MOVE
:

939 
CTS_DEVICE_TOUCH_EVENT_STAY
:

940 
c⁄è˘
++;

941 
	`öput_ªp‹t_abs
(
öput_dev
, 
ABS_MT_PRESSURE
, 
msgs
[
i
].
¥essuª
);

942 
	`öput_ªp‹t_abs
(
öput_dev
, 
ABS_MT_TOUCH_MAJOR
, 
msgs
[
i
].
¥essuª
);

943 
	`öput_ªp‹t_key
(
öput_dev
, 
BTN_TOUCH
, 1);

944 
	`öput_ªp‹t_abs
(
öput_dev
, 
ABS_MT_POSITION_X
, 
x
);

945 
	`öput_ªp‹t_abs
(
öput_dev
, 
ABS_MT_POSITION_Y
, 
y
);

946 
	`öput_mt_sync
(
öput_dev
);

949 
CTS_DEVICE_TOUCH_EVENT_UP
:

952 
	`˘s_w¨n
("ProcessÅouch msg with unknownÉvent %u id %u",

953 
msgs
[
i
].
evít
, msgs[i].
id
);

960 #ifde‡
CONFIG_CTS_SLOTPROTOCOL


961 
i
 = 0; i < 
CFG_CTS_MAX_TOUCH_NUM
; i++) {

962 i‡(
fögî_œ°
[
i
] !0 && 
fögî_cuºít
[i] == 0) {

963 
	`öput_mt_¶Ÿ
(
öput_dev
, 
i
);

964 
	`öput_mt_ªp‹t_¶Ÿ_°©e
(
öput_dev
, 
MT_TOOL_FINGER
, 
Ál£
);

966 
fögî_œ°
[
i
] = 
fögî_cuºít
[i];

968 
	`öput_ªp‹t_key
(
öput_dev
, 
BTN_TOUCH
, 
c⁄è˘
 > 0);

970 i‡(
c⁄è˘
 == 0) {

971 
	`öput_ªp‹t_key
(
öput_dev
, 
BTN_TOUCH
, 0);

972 
	`öput_mt_sync
(
öput_dev
);

975 
	`öput_sync
(
öput_dev
);

976 #ifde‡
CFG_CTS_FORCE_UP


977 i‡(
c⁄è˘
) {

978 
	`mod_timî
(&
pd©a
->
touch_evít_timeout_timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(100));

980 
	`dñ_timî
(&
pd©a
->
touch_evít_timeout_timî
);

984 
	}
}

986 
	$˘s_∂©_ªÀa£_Æl_touch
(
˘s_∂©f‹m_d©a
 *
pd©a
)

988 
öput_dev
 *öput_dev = 
pd©a
->
ts_öput_dev
;

990 #i‡
	`deföed
(
CONFIG_CTS_SLOTPROTOCOL
)

991 
id
;

994 
	`˘s_öfo
("ReleaseállÅouch");

996 #ifde‡
CONFIG_CTS_SLOTPROTOCOL


997 
id
 = 0; id < 
CFG_CTS_MAX_TOUCH_NUM
; id++) {

998 
	`öput_mt_¶Ÿ
(
öput_dev
, 
id
);

999 
	`öput_mt_ªp‹t_¶Ÿ_°©e
(
öput_dev
, 
MT_TOOL_FINGER
, 
Ál£
);

1001 
	`öput_ªp‹t_key
(
öput_dev
, 
BTN_TOUCH
, 0);

1003 
	`öput_ªp‹t_key
(
öput_dev
, 
BTN_TOUCH
, 0);

1004 
	`öput_mt_sync
(
öput_dev
);

1006 
	`öput_sync
(
öput_dev
);

1007 #ifde‡
CFG_CTS_FORCE_UP


1008 
	`dñ_timî
(&
pd©a
->
touch_evít_timeout_timî
);

1011 
	}
}

1013 #ifde‡
CONFIG_CTS_VIRTUALKEY


1014 
	$˘s_∂©_öô_vkey_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
)

1016 
i
;

1018 
	`˘s_öfo
("Init VKey");

1020 
pd©a
->
vkey_°©e
 = 0;

1022 
i
 = 0; i < 
pd©a
->
vkey_num
; i++) {

1023 
	`öput_£t_ˇ∑bûôy
(
pd©a
->
ts_öput_dev
,

1024 
EV_KEY
, 
pd©a
->
vkey_keycodes
[
i
]);

1028 
	}
}

1030 
	$˘s_∂©_deöô_vkey_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
)

1032 
	`˘s_öfo
("De-init VKey");

1034 
pd©a
->
vkey_°©e
 = 0;

1035 
	}
}

1037 
	$˘s_∂©_¥o˚ss_vkey
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
vkey_°©e
)

1039 
u8
 
evít
;

1040 
i
;

1042 
evít
 = 
pd©a
->
vkey_°©e
 ^ vkey_state;

1044 
	`˘s_dbg
("Pro˚s†vkey sèã=0x%02x,Évít=0x%02x", 
vkey_°©e
, 
evít
);

1046 
i
 = 0; i < 
pd©a
->
vkey_num
; i++) {

1047 
	`öput_ªp‹t_key
(
pd©a
->
ts_öput_dev
,

1048 
pd©a
->
vkey_keycodes
[
i
], 
vkey_°©e
 & 
	`BIT
(i) ? 1 : 0);

1051 
pd©a
->
vkey_°©e
 = vkey_state;

1054 
	}
}

1056 
	$˘s_∂©_ªÀa£_Æl_vkey
(
˘s_∂©f‹m_d©a
 *
pd©a
)

1058 
i
;

1060 
	`˘s_öfo
("Releaseáll vkeys");

1062 
i
 = 0; i < 
pd©a
->
vkey_num
; i++) {

1063 i‡(
pd©a
->
vkey_°©e
 & 
	`BIT
(
i
)) {

1064 
	`öput_ªp‹t_key
(
pd©a
->
ts_öput_dev
,Öd©a->
vkey_keycodes
[
i
], 0);

1068 
pd©a
->
vkey_°©e
 = 0;

1071 
	}
}

1074 #ifde‡
CFG_CTS_GESTURE


1075 
	$˘s_∂©_íabÀ_úq_wake
(
˘s_∂©f‹m_d©a
 *
pd©a
)

1077 
	`˘s_öfo
("Enable IRQ wake");

1079 i‡(
pd©a
->
úq
 > 0) {

1080 i‡(!
pd©a
->
úq_wake_íabÀd
) {

1081 
pd©a
->
úq_wake_íabÀd
 = 
åue
;

1082  
	`íabÀ_úq_wake
(
pd©a
->
úq
);

1085 
	`˘s_w¨n
("Enable irq wake whileálready disabled");

1086  -
EINVAL
;

1089 
	`˘s_w¨n
("E«bÀ irq wakêwhûêúq invÆid %d", 
pd©a
->
úq
);

1090  -
ENODEV
;

1091 
	}
}

1093 
	$˘s_∂©_dißbÀ_úq_wake
(
˘s_∂©f‹m_d©a
 *
pd©a
)

1095 
	`˘s_öfo
("Disable IRQ wake");

1097 i‡(
pd©a
->
úq
 > 0) {

1098 i‡(
pd©a
->
úq_wake_íabÀd
) {

1099 
pd©a
->
úq_wake_íabÀd
 = 
Ál£
;

1100  
	`dißbÀ_úq_wake
(
pd©a
->
úq
);

1103 
	`˘s_w¨n
("Disable irq wake whileálready disabled");

1104  -
EINVAL
;

1107 
	`˘s_w¨n
("DißbÀ irq wakêwhûêúq invÆid %d", 
pd©a
->
úq
);

1108  -
ENODEV
;

1109 
	}
}

1111 
	$˘s_∂©_öô_ge°uª
(
˘s_∂©f‹m_d©a
 *
pd©a
)

1113 
i
;

1115 
	`˘s_öfo
("Init gesture");

1120 
i
 = 0; i < 
pd©a
->
ge°uª_num
; i ++) {

1121 
	`öput_£t_ˇ∑bûôy
(
pd©a
->
ts_öput_dev
, 
EV_KEY
,

1122 
pd©a
->
ge°uª_keym≠
[
i
][1]);

1126 
	}
}

1128 
	$˘s_∂©_deöô_ge°uª
(
˘s_∂©f‹m_d©a
 *
pd©a
)

1130 
	`˘s_öfo
("De-init gesture");

1131 
	}
}

1133 
	$˘s_∂©_¥o˚ss_ge°uª_öfo
(
˘s_∂©f‹m_d©a
 *
pd©a
,

1134 
˘s_devi˚_ge°uª_öfo
 *
ge°uª_öfo
)

1136 
i
;

1138 
	`˘s_öfo
("Pro˚s†ge°uª, id=0x%02x", 
ge°uª_öfo
->
ge°uª_id
);

1140 #i‡
	`deföed
(
CFG_CTS_GESTURE_REPORT_KEY
)

1141 
i
 = 0; i < 
CFG_CTS_NUM_GESTURE
; i++) {

1142 i‡(
ge°uª_öfo
->
ge°uª_id
 =
pd©a
->
ge°uª_keym≠
[
i
][0]) {

1143 
	`˘s_öfo
("Rï‹àkey[%u]", 
pd©a
->
ge°uª_keym≠
[
i
][1]);

1144 
	`öput_ªp‹t_key
(
pd©a
->
ts_öput_dev
,

1145 
pd©a
->
ge°uª_keym≠
[
i
][1], 1);

1146 
	`öput_sync
(
pd©a
->
ts_öput_dev
);

1148 
	`öput_ªp‹t_key
(
pd©a
->
ts_öput_dev
,

1149 
pd©a
->
ge°uª_keym≠
[
i
][1], 0);

1150 
	`öput_sync
(
pd©a
->
ts_öput_dev
);

1157 
	`˘s_w¨n
("Process unrecognized gesture id=%u",

1158 
ge°uª_öfo
->
ge°uª_id
);

1160  -
EINVAL
;

1161 
	}
}

	@cts_platform.h

1 #i‚de‡
CTS_PLATFORM_H


2 
	#CTS_PLATFORM_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

6 
	~<löux/bô›s.h
>

7 
	~<löux/˘y≥.h
>

8 
	~<löux/u«lig√d/ac˚ss_ok.h
>

9 
	~<löux/kî√l.h
>

10 
	~<löux/¶ab.h
>

11 
	~<löux/vmÆloc.h
>

12 
	~<löux/moduÀ.h
>

13 
	~<löux/devi˚.h
>

14 
	~<löux/fs.h
>

15 
	~<löux/uac˚ss.h
>

16 
	~<löux/i2c.h
>

17 
	~<löux/öãºu±.h
>

18 
	~<löux/úq.h
>

19 
	~<löux/gpio.h
>

20 
	~<löux/öput.h
>

21 
	~<löux/öput/mt.h
>

22 
	~<löux/•ölock.h
>

23 
	~<löux/πmuãx.h
>

24 
	~<löux/byã‹dî/gíîic.h
>

25 
	~<löux/¥oc_fs.h
>

26 
	~<löux/dñay.h
>

27 
	~<löux/vîsi⁄.h
>

28 
	~<löux/jiffõs.h
>

29 
	~<löux/hπimî.h
>

30 
	~<löux/°rög.h
>

31 
	~<löux/su•íd.h
>

32 
	~<löux/wakñock.h
>

33 
	~<löux/fúmw¨e.h
>

35 #ifde‡
CONFIG_OF


36 
	~<löux/of.h
>

37 
	~<löux/of_gpio.h
>

38 
	~<löux/of_úq.h
>

41 
	~<löux/fb.h
>

42 
	~<löux/nŸifõr.h
>

44 
	~<löux/•i/•i.h
>

45 
	~<löux/•i/•idev.h
>

47 #ifde‡
CFG_CTS_DRM_NOTIFIER


48 
	~<löux/msm_drm_nŸify.h
>

51 
	~"˘s_c⁄fig.h
"

52 
	~"˘s_c‹e.h
"

54 
boﬁ
 
˘s_show_debug_log
;

56 #i‚de‡
LOG_TAG


57 
	#LOG_TAG
 ""

	)

60 
	e˘s_drivî_log_Àvñ
 {

61 
	mCTS_DRIVER_LOG_ERROR
,

62 
	mCTS_DRIVER_LOG_WARN
,

63 
	mCTS_DRIVER_LOG_INFO
,

64 
	mCTS_DRIVER_LOG_DEBUG
,

67 
˘s_°¨t_drivî_log_ªdúe˘
(c⁄° *
fûï©h
, 
boﬁ
 
≠≥nd_to_fûe
,

68 *
log_buf„r
, 
log_buf_size
, 
log_Àvñ
);

69 
˘s_°›_drivî_log_ªdúe˘
();

70 
˘s_gë_drivî_log_ªdúe˘_size
();

71 
˘s_log
(
Àvñ
, c⁄° *
fmt
, ...);

73 
	#˘s_îr
(
fmt
, ...) \

74 
	`˘s_log
(
CTS_DRIVER_LOG_ERROR
, "<E>CTS-" 
LOG_TAG
 " " 
fmt
"\n", ##
__VA_ARGS__
)

	)

75 
	#˘s_w¨n
(
fmt
, ...) \

76 
	`˘s_log
(
CTS_DRIVER_LOG_WARN
, "<W>CTS-" 
LOG_TAG
 " " 
fmt
"\n", ##
__VA_ARGS__
)

	)

77 
	#˘s_öfo
(
fmt
, ...) \

78 
	`˘s_log
(
CTS_DRIVER_LOG_INFO
, "<I>CTS-" 
LOG_TAG
 " " 
fmt
"\n", ##
__VA_ARGS__
)

	)

79 
	#˘s_dbg
(
fmt
, ...) \

80 
	`˘s_log
(
CTS_DRIVER_LOG_DEBUG
, "<D>CTS-" 
LOG_TAG
 " " 
fmt
"\n", ##
__VA_ARGS__
)

	)

82 
	g˘s_devi˚
;

83 
	g˘s_devi˚_touch_msg
;

84 
	g˘s_devi˚_ge°uª_öfo
;

86 
	s˘s_∂©f‹m_d©a
 {

87 
	múq
;

88 
	möt_gpio
;

89 #ifde‡
CFG_CTS_HAS_RESET_PIN


90 
	mr°_gpio
;

93 
u32
 
	mªs_x
;

94 
u32
 
	mªs_y
;

96 #ifde‡
CONFIG_CTS_VIRTUALKEY


97 
u8
 
	mvkey_num
;

98 
u8
 
	mvkey_°©e
;

99 
u8
 
	mvkey_keycodes
[
CFG_CTS_MAX_VKEY_NUM
];

102 
˘s_devi˚
 *
	m˘s_dev
;

104 
öput_dev
 *
	mts_öput_dev
;

106 #i‚de‡
CONFIG_GENERIC_HARDIRQS


107 
w‹k_°ru˘
 
	mts_úq_w‹k
;

110 
π_muãx
 
	mdev_lock
;

111 
•ölock
 
	múq_lock
;

112 
boﬁ
 
	múq_is_dißbÀ
;

114 #ifde‡
CFG_CTS_GESTURE


115 
u8
 
	mge°uª_num
;

116 
u8
 
	mge°uª_keym≠
[
CFG_CTS_NUM_GESTURE
][2];

117 
boﬁ
 
	múq_wake_íabÀd
;

120 #ifde‡
CONFIG_CTS_PM_FB_NOTIFIER


121 
nŸifõr_block
 
	mfb_nŸifõr
;

124 #ifde‡
CFG_CTS_FORCE_UP


125 
timî_li°
 
	mtouch_evít_timeout_timî
;

128 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


129 
u8
 
	mfw_log_buf
[
CTS_FW_LOG_BUF_LEN
];

132 #ifde‡
CONFIG_CTS_I2C_HOST


133 
i2c_˛õ¡
 *
	mi2c_˛õ¡
;

134 
u8
 
	mi2c_fifo_buf
[
CFG_CTS_MAX_I2C_XFER_SIZE
];

136 
•i_devi˚
 *
	m•i_˛õ¡
;

137 
u8
 
	m•i_ˇche_buf
[
ALIGN
(
CFG_CTS_MAX_SPI_XFER_SIZE
+10,4)];

138 
u8
 
	m•i_rx_buf
[
ALIGN
(
CFG_CTS_MAX_SPI_XFER_SIZE
+10,4)];

139 
u8
 
	m•i_tx_buf
[
ALIGN
(
CFG_CTS_MAX_SPI_XFER_SIZE
+10,4)];

140 
u32
 
	m•i_•ìd
;

143 
˘s_devi˚_touch_öfo
 
	mtouch_öfo
;

146 #ifde‡
CONFIG_CTS_I2C_HOST


147 
size_t
 
˘s_∂©_gë_max_i2c_x„r_size
(
˘s_∂©f‹m_d©a
 *
pd©a
);

148 
u8
 *
˘s_∂©_gë_i2c_x„r_buf
(
˘s_∂©f‹m_d©a
 *
pd©a
,

149 
size_t
 
x„r_size
);

150 
˘s_∂©_i2c_wrôe
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
i2c_addr
,

151 c⁄° *
§c
, 
size_t
 
Àn
, 
ªåy
, 
dñay
);

152 
˘s_∂©_i2c_ªad
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
i2c_addr
,

153 c⁄° 
u8
 *
wbuf
, 
size_t
 
wÀn
, *
rbuf
, size_à
æí
,

154 
ªåy
, 
dñay
);

155 
˘s_∂©_is_i2c_⁄löe
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
i2c_addr
);

157 
size_t
 
˘s_∂©_gë_max_•i_x„r_size
(
˘s_∂©f‹m_d©a
 *
pd©a
);

158 
u8
 *
˘s_∂©_gë_•i_x„r_buf
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
size_t
 
x„r_size
);

159 
˘s_∂©_•i_wrôe
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
i2c_addr
, c⁄° *
§c
,

160 
size_t
 
Àn
, 
ªåy
, 
dñay
);

161 
˘s_∂©_•i_ªad
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
i2c_addr
,

162 c⁄° 
u8
 *
wbuf
, 
size_t
 
wÀn
, *
rbuf
, size_à
æí
,

163 
ªåy
, 
dñay
);

164 
˘s_∂©_•i_ªad_dñay_idÀ
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
dev_addr
,

165 c⁄° 
u8
 *
wbuf
, 
size_t
 
wÀn
, *
rbuf
, size_à
æí
,

166 
ªåy
, 
dñay
, 
idÀ
);

167 
˘s_•i_£nd_ªcv
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
size_t
 
Àn
 , 
u8
 *
tx_buf„r
, u8 *
rx_buf„r
);

170 #ifde‡
CONFIG_CTS_I2C_HOST


171 
˘s_öô_∂©f‹m_d©a
(
˘s_∂©f‹m_d©a
 *
pd©a
,

172 
i2c_˛õ¡
 *i2c_client);

174 
˘s_∂©_is_n‹mÆ_mode
(
˘s_∂©f‹m_d©a
 *
pd©a
);

175 
˘s_öô_∂©f‹m_d©a
(
˘s_∂©f‹m_d©a
 *
pd©a
,

176 
•i_devi˚
 *
•i
);

179 
˘s_deöô_∂©f‹m_d©a
(
˘s_∂©f‹m_d©a
 *
pd©a
);

180 
˘s_∂©_ªque°_ªsour˚
(
˘s_∂©f‹m_d©a
 *
pd©a
);

181 
˘s_∂©_‰ì_ªsour˚
(
˘s_∂©f‹m_d©a
 *
pd©a
);

183 
˘s_∂©_ªque°_úq
(
˘s_∂©f‹m_d©a
 *
pd©a
);

184 
˘s_∂©_‰ì_úq
(
˘s_∂©f‹m_d©a
 *
pd©a
);

185 
˘s_∂©_íabÀ_úq
(
˘s_∂©f‹m_d©a
 *
pd©a
);

186 
˘s_∂©_dißbÀ_úq
(
˘s_∂©f‹m_d©a
 *
pd©a
);

188 #ifde‡
CFG_CTS_HAS_RESET_PIN


189 
˘s_∂©_ª£t_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
);

191 
ölöe
 
	$˘s_∂©_ª£t_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
Ë{ 0;
	}
}

194 
˘s_∂©_öô_touch_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
);

195 
˘s_∂©_deöô_touch_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
);

196 
˘s_∂©_¥o˚ss_touch_msg
(
˘s_∂©f‹m_d©a
 *
pd©a
,

197 
˘s_devi˚_touch_msg
 *
msgs
, 
num
);

198 
˘s_∂©_ªÀa£_Æl_touch
(
˘s_∂©f‹m_d©a
 *
pd©a
);

200 #ifde‡
CONFIG_CTS_VIRTUALKEY


201 
˘s_∂©_öô_vkey_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
);

202 
˘s_∂©_deöô_vkey_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
);

203 
˘s_∂©_¥o˚ss_vkey
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
vkey_°©e
);

204 
˘s_∂©_ªÀa£_Æl_vkey
(
˘s_∂©f‹m_d©a
 *
pd©a
);

206 
ölöe
 
	$˘s_∂©_öô_vkey_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
Ë{ 0;
	}
}

207 
ölöe
 
	$˘s_∂©_deöô_vkey_devi˚
(
˘s_∂©f‹m_d©a
 *
pd©a
Ë{
	}
}

208 
ölöe
 
	$˘s_∂©_¥o˚ss_vkey
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
u8
 
vkey_°©e
Ë{ 0;
	}
}

209 
ölöe
 
	$˘s_∂©_ªÀa£_Æl_vkey
(
˘s_∂©f‹m_d©a
 *
pd©a
Ë{ 0;
	}
}

212 #ifde‡
CFG_CTS_GESTURE


213 
˘s_∂©_íabÀ_úq_wake
(
˘s_∂©f‹m_d©a
 *
pd©a
);

214 
˘s_∂©_dißbÀ_úq_wake
(
˘s_∂©f‹m_d©a
 *
pd©a
);

216 
˘s_∂©_öô_ge°uª
(
˘s_∂©f‹m_d©a
 *
pd©a
);

217 
˘s_∂©_deöô_ge°uª
(
˘s_∂©f‹m_d©a
 *
pd©a
);

218 
˘s_∂©_¥o˚ss_ge°uª_öfo
(
˘s_∂©f‹m_d©a
 *
pd©a
,

219 
˘s_devi˚_ge°uª_öfo
 *
ge°uª_öfo
);

221 
ölöe
 
	$˘s_∂©_öô_ge°uª
(
˘s_∂©f‹m_d©a
 *
pd©a
Ë{ 0;
	}
}

222 
ölöe
 
	$˘s_∂©_deöô_ge°uª
(
˘s_∂©f‹m_d©a
 *
pd©a
Ë{
	}
}

225 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


226 
size_t
 
˘s_∂©_gë_max_fw_log_size
(
˘s_∂©f‹m_d©a
 *
pd©a
);

227 
u8
 *
˘s_∂©_gë_fw_log_buf
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
size_t
 
size
);

230 
˘s_∂©_£t_ª£t
(
˘s_∂©f‹m_d©a
 *
pd©a
, 
vÆ
);

231 
˘s_∂©_gë_öt_pö
(
˘s_∂©f‹m_d©a
 *
pd©a
);

	@cts_sfctrl.h

1 #i‚de‡
CTS_SFCTRL_H


2 
	#CTS_SFCTRL_H


	)

4 
	~"˘s_c‹e.h
"

5 
	~"˘s_•i_Êash.h
"

7 
	g˘s_devi˚
;

9 
	s˘s_sf˘æ_›s
 {

10 (*
	mrdid
)(c⁄° 
˘s_devi˚
 *
	m˘s_dev
, 
u32
 *
	mid
);

11 (*
	m£
)(c⁄° 
˘s_devi˚
 *
	m˘s_dev
, 
u32
 
	m£˘‹_addr
);

12 (*
	mbe
)(c⁄° 
˘s_devi˚
 *
	m˘s_dev
, 
u32
 
	m£˘‹_addr
);

13 (*
	mªad
)(c⁄° 
˘s_devi˚
 *
	m˘s_dev
,

14 
u32
 
	mÊash_addr
, *
	md°
, 
size_t
 
	mÀn
);

15 (*
	mªad_to_§am
)(c⁄° 
˘s_devi˚
 *
	m˘s_dev
,

16 
u32
 
	mÊash_addr
, u32 
	m§am_addr
, 
size_t
 
	mÀn
);

17 (*
	m¥ogøm
)(c⁄° 
˘s_devi˚
 *
	m˘s_dev
,

18 
u32
 
	mÊash_addr
, c⁄° *
	m§c
, 
size_t
 
	mÀn
);

19 (*
	m¥ogøm_‰om_§am
)(c⁄° 
˘s_devi˚
 *
	m˘s_dev
,

20 
u32
 
	mÊash_addr
, u32 
	m§am_addr
, 
size_t
 
	mÀn
);

21 (*
	mˇlc_§am_¸c
)(c⁄° 
˘s_devi˚
 *
	m˘s_dev
,

22 
u32
 
	m§am_addr
, 
size_t
 
	mÀn
, u32 *
	m¸c
);

23 (*
	mˇlc_Êash_¸c
)(c⁄° 
˘s_devi˚
 *
	m˘s_dev
,

24 
u32
 
	mÊash_addr
, 
size_t
 
	mÀn
, u32 *
	m¸c
);

28 
	s˘s_sf˘æ
 {

29 
u32
 
	mªg_ba£
;

30 
u32
 
	mxchg_§am_ba£
;

31 
size_t
 
	mxchg_§am_size
;

33 c⁄° 
˘s_sf˘æ_›s
 *
	m›s
;

36 c⁄° 
˘s_sf˘æ_›s
 
˘s_sf˘æv2_›s
;

	@cts_sfctrlv2.c

1 
	#LOG_TAG
 "SFCål"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_sf˘æ.h
"

8 
	#rSFCTRLv2_CMD_SEL
 (0x0000)

	)

9 
	#rSFCTRLv2_FLASH_ADDR
 (0x0004)

	)

10 
	#rSFCTRLv2_SRAM_ADDR
 (0x0008)

	)

11 
	#rSFCTRLv2_DATA_LENGTH
 (0x000C)

	)

12 
	#rSFCTRLv2_START_DEXC
 (0x0010)

	)

13 
	#rSFCTRLv2_RELEASE_FLASH
 (0x0014)

	)

14 
	#rSFCTRLv2_HW_STATE
 (0x0018)

	)

15 
	#rSFCTRLv2_CRC_RESULT
 (0x001C)

	)

16 
	#rSFCTRLv2_SRAM_CRC_START
 (0x0020)

	)

17 
	#rSFCTRLv2_FLASH_CRC_START
 (0x0022)

	)

18 
	#rSFCTRLv2_SF_BUSY
 (0x0024)

	)

21 
	esf˘æv2_cmd
 {

22 
	mSFCTRLv2_CMD_FAST_READ
 = 0x01u,

23 
	mSFCTRLv2_CMD_SE
 = 0x02u,

24 
	mSFCTRLv2_CMD_BE
 = 0x03u,

25 
	mSFCTRLv2_CMD_PP
 = 0x04u,

26 
	mSFCTRLv2_CMD_RDSR
 = 0x05u,

27 
	mSFCTRLv2_CMD_RDID
 = 0x06u

31 
	esf˘æv2_›Êags
 {

32 
	mSFCTRLv2_OPFLAG_READ
 = 
BIT
(0),

33 
	mSFCTRLv2_OPFLAG_SET_FLASH_ADDR
 = 
BIT
(1),

34 
	mSFCTRLv2_OPFLAG_SRAM_DATA_XCHG
 = 
BIT
(2),

35 
	mSFCTRLv2_OPFLAG_SET_DATA_LENGTH
 = 
BIT
(3),

36 
	mSFCTRLv2_OPFLAG_WAIT_WIP_CLR
 = 
BIT
(4),

40 
	#SFCTRLv2_CMD_RDID_FLAGS
 \

41 (
SFCTRLv2_OPFLAG_READ
 | \

42 
SFCTRLv2_OPFLAG_SRAM_DATA_XCHG
)

	)

44 
	#SFCTRLv2_CMD_RDSR_FLAGS
 \

45 (
SFCTRLv2_OPFLAG_READ
 | \

46 
SFCTRLv2_OPFLAG_SRAM_DATA_XCHG
)

	)

48 
	#SFCTRLv2_CMD_SE_FLAGS
 \

49 (
SFCTRLv2_OPFLAG_SET_FLASH_ADDR
 | \

50 
SFCTRLv2_OPFLAG_WAIT_WIP_CLR
)

	)

52 
	#SFCTRLv2_CMD_BE_FLAGS
 \

53 (
SFCTRLv2_OPFLAG_SET_FLASH_ADDR
 | \

54 
SFCTRLv2_OPFLAG_WAIT_WIP_CLR
)

	)

56 
	#SFCTRLv2_CMD_PP_FLAGS
 \

57 (
SFCTRLv2_OPFLAG_SET_FLASH_ADDR
 | \

58 
SFCTRLv2_OPFLAG_SRAM_DATA_XCHG
 | \

59 
SFCTRLv2_OPFLAG_SET_DATA_LENGTH
 | \

60 
SFCTRLv2_OPFLAG_WAIT_WIP_CLR
)

	)

62 
	#SFCTRLv2_CMD_FAST_READ_FLAGS
 \

63 (
SFCTRLv2_OPFLAG_READ
 | \

64 
SFCTRLv2_OPFLAG_SET_FLASH_ADDR
 | \

65 
SFCTRLv2_OPFLAG_SRAM_DATA_XCHG
 | \

66 
SFCTRLv2_OPFLAG_SET_DATA_LENGTH
)

	)

68 
	#sf˘æ_ªg_addr
(
˘s_dev
, 
off£t
) \

69 ((
˘s_dev
)->
hwd©a
->
sf˘æ
->
ªg_ba£
 + 
off£t
)

	)

71 
	#DEFINE_SFCTRL_REG_ACCESS_FUNC
(
ac˚ss_ty≥
, 
d©a_ty≥
) \

72 
ölöe
 
sf˘æ_ªg_
 ## 
	`ac˚ss_ty≥
(c⁄° 
˘s_devi˚
 *
˘s_dev
, \

73 
u32
 
ªg
, 
d©a_ty≥
 
d©a
) { \

74  
˘s_hw_ªg_
 ## 
	`ac˚ss_ty≥
(
˘s_dev
, 
	`sf˘æ_ªg_addr
(˘s_dev, 
ªg
), 
d©a
); \

75 }

	)

77 
	$DEFINE_SFCTRL_REG_ACCESS_FUNC
(
wrôeb
, 
u8
)

78 
	$DEFINE_SFCTRL_REG_ACCESS_FUNC
(
wrôew
, 
u16
)

79 
	$DEFINE_SFCTRL_REG_ACCESS_FUNC
(
wrôñ
, 
u32
)

80 
	$DEFINE_SFCTRL_REG_ACCESS_FUNC
(
ªadb
, 
u8
 *)

81 
	$DEFINE_SFCTRL_REG_ACCESS_FUNC
(
ªadw
, 
u16
 *)

82 
	$DEFINE_SFCTRL_REG_ACCESS_FUNC
(
ªadl
, 
u32
 *)

84 
	#sf˘æ_wrôe_ªg_check_ªt
(
ac˚ss_ty≥
, 
ªg
, 
vÆ
) \

86 
ªt
; \

87 
	`˘s_dbg
("Wrôê" #ªg "Åÿ0x%x", 
vÆ
); \

88 
ªt
 = 
sf˘æ_ªg_
 ## 
	`ac˚ss_ty≥
(
˘s_dev
, 
ªg
, 
vÆ
); \

89 i‡(
ªt
) { \

90 
	`˘s_îr
("Wrôê" #ªg " faûed %d", 
ªt
); \

91  
ªt
; \

93 
	}
} 0)

	)

95 
	#sf˘æ_ªad_ªg_check_ªt
(
ac˚ss_ty≥
, 
ªg
, 
vÆ
) \

97 
ªt
; \

98 
	`˘s_dbg
("Read " #reg ""); \

99 
ªt
 = 
sf˘æ_ªg_
 ## 
	`ac˚ss_ty≥
(
˘s_dev
, 
ªg
, 
vÆ
); \

100 i‡(
ªt
) { \

101 
	`˘s_îr
("Ród " #ªg " faûed %d", 
ªt
); \

102  
ªt
; \

104 } 0)

	)

106 
	$waô_sf˘æ_x„r_comp
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

108 
ªåõs
 = 0;

109 
u8
 
°©us
;

112 
	`sf˘æ_ªad_ªg_check_ªt
(
ªadb
, 
rSFCTRLv2_SF_BUSY
, &
°©us
);

113 if(
°©us
 == 0) {

117 
	`mdñay
(1);

118 } 
°©us
 && 
ªåõs
++ < 1000);

120  -
ETIMEDOUT
;

121 
	}
}

123 
	$sf˘æv2_rd§
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u8
 *
°©us
)

125 
	#RDSR_XCHG_SRAM_ADDR
 (
˘s_dev
->
hwd©a
->
§am_size
 - 1)

	)

127 
ªt
;

129 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôeb
, 
rSFCTRLv2_CMD_SEL
, 
SFCTRLv2_CMD_RDSR
);

130 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôñ
, 
rSFCTRLv2_SRAM_ADDR
, 
RDSR_XCHG_SRAM_ADDR
);

131 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôeb
, 
rSFCTRLv2_START_DEXC
, 1);

133 if((
ªt
 = 
	`waô_sf˘æ_x„r_comp
(
˘s_dev
)) != 0) {

134 
	`˘s_îr
("Waô sf˘æÑódy faûed %d", 
ªt
);

135  
ªt
;

138 
ªt
 = 
	`˘s_§am_ªadb
(
˘s_dev
, 
RDSR_XCHG_SRAM_ADDR
, 
°©us
);

139 i‡(
ªt
) {

140 
	`˘s_îr
("RódÉxch™gê§am faûed %d", 
ªt
);

141  
ªt
;

143 #unde‡
RDSR_XCHG_SRAM_ADDR


146 
	}
}

148 
	$waô_Êash_wù_˛ór
(c⁄° 
˘s_devi˚
 *
˘s_dev
)

150 
	#FLASH_SR_WIP
 
	`BIT
(0Ë

	)

152 
ªt
, 
ªåõs
 = 0;

153 
u8
 
°©us
;

156 
ªt
 = 
	`sf˘æv2_rd§
(
˘s_dev
, &
°©us
);

157 i‡(
ªt
) {

158 
	`˘s_îr
("Ród fœsh sètu†ªgi°î faûed %d", 
ªt
);

159  
ªt
;

162 i‡(
°©us
 & 
FLASH_SR_WIP
) {

163 
	`mdñay
(1);

167 } 
°©us
 & 
FLASH_SR_WIP
 && 
ªåõs
++ < 1000);

169  -
ETIMEDOUT
;

170 #unde‡
FLASH_SR_WIP


171 
	}
}

173 
	$sf˘æv2_å™s„r
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

174 
u8
 
cmd
, *
d©a
, 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
size
, u32 
Êags
)

176 
ªt
;

178 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôeb
, 
rSFCTRLv2_CMD_SEL
, 
cmd
);

180 i‡(
Êags
 & 
SFCTRLv2_OPFLAG_SRAM_DATA_XCHG
) {

181 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôñ
, 
rSFCTRLv2_SRAM_ADDR
, 
§am_addr
);

185 i‡((!(
Êags
 & 
SFCTRLv2_OPFLAG_READ
)Ë&& 
d©a
) {

186 
ªt
 = 
	`˘s_§am_wrôesb
(
˘s_dev
, 
§am_addr
, 
d©a
, 
size
);

187 i‡(
ªt
) {

188 
	`˘s_îr
("Write dataÅoÉxchange sram 0x%06x size %zu failed %d",

189 
§am_addr
, 
size
, 
ªt
);

190  
ªt
;

195 i‡(
Êags
 & 
SFCTRLv2_OPFLAG_SET_FLASH_ADDR
) {

196 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôñ
, 
rSFCTRLv2_FLASH_ADDR
, 
Êash_addr
);

198 i‡(
Êags
 & 
SFCTRLv2_OPFLAG_SET_DATA_LENGTH
) {

199 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôñ
, 
rSFCTRLv2_DATA_LENGTH
, (
u32
)
size
);

202 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôeb
, 
rSFCTRLv2_START_DEXC
, 1);

204 if((
ªt
 = 
	`waô_sf˘æ_x„r_comp
(
˘s_dev
)) != 0) {

205 
	`˘s_îr
("Waô sf˘æÑódy faûed %d", 
ªt
);

206  
ªt
;

209 i‡(
Êags
 & 
SFCTRLv2_OPFLAG_WAIT_WIP_CLR
 &&

210 (
ªt
 = 
	`waô_Êash_wù_˛ór
(
˘s_dev
)) != 0) {

211 
	`˘s_îr
("Waô WIP cÀ¨ faûed %d", 
ªt
);

212  
ªt
;

215 i‡((
Êags
 & 
SFCTRLv2_OPFLAG_READ
Ë&& 
d©a
) {

216 
ªt
 = 
	`˘s_§am_ªadsb
(
˘s_dev
, 
§am_addr
, 
d©a
, 
size
);

217 i‡(
ªt
) {

218 
	`˘s_îr
("Read data fromÉxchange sram 0x%06x size %zu failed %d",

219 
§am_addr
, 
size
, 
ªt
);

220  
ªt
;

225 
	}
}

227 
	$sf˘æv2_rdid
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 *
id
)

229 
ªt
;

230 
u8
 
buf
[4];

232 
ªt
 = 
	`sf˘æv2_å™s„r
(
˘s_dev
, 
SFCTRLv2_CMD_RDID
, 
buf
,

233 0, 
˘s_dev
->
hwd©a
->
sf˘æ
->
xchg_§am_ba£
, 3,

234 
SFCTRLv2_CMD_RDID_FLAGS
);

235 *
id
 = 
ªt
 ? 0 : 
	`gë_u«lig√d_be24
(
buf
);

237  
ªt
;

238 
	}
}

240 
	$sf˘æv2_£
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
£˘‹_addr
)

242  
	`sf˘æv2_å™s„r
(
˘s_dev
, 
SFCTRLv2_CMD_SE
, 
NULL
,

243 
£˘‹_addr
, 0, 0, 
SFCTRLv2_CMD_SE_FLAGS
);

244 
	}
}

246 
	$sf˘æv2_be
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
block_addr
)

248  
	`sf˘æv2_å™s„r
(
˘s_dev
, 
SFCTRLv2_CMD_BE
, 
NULL
,

249 
block_addr
, 0, 0, 
SFCTRLv2_CMD_BE_FLAGS
);

250 
	}
}

252 
	$sf˘æv2_µ
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

253 
u32
 
Êash_addr
, c⁄° *
§c
, 
size_t
 
size
)

255  
	`sf˘æv2_å™s„r
(
˘s_dev
, 
SFCTRLv2_CMD_PP
, (*)
§c
,

256 
Êash_addr
, 
˘s_dev
->
hwd©a
->
sf˘æ
->
xchg_§am_ba£
, 
size
,

257 
SFCTRLv2_CMD_PP_FLAGS
);

258 
	}
}

260 
	$sf˘æv2_¥ogøm_Êash_‰om_§am
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

261 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
Àn
)

263  
	`sf˘æv2_å™s„r
(
˘s_dev
, 
SFCTRLv2_CMD_PP
, 
NULL
,

264 
Êash_addr
, 
§am_addr
, 
Àn
, 
SFCTRLv2_CMD_PP_FLAGS
);

265 
	}
}

267 
	$sf˘æv2_ªad
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

268 
u32
 
Êash_addr
, *
d°
, 
size_t
 
size
)

270  
	`sf˘æv2_å™s„r
(
˘s_dev
, 
SFCTRLv2_CMD_FAST_READ
, 
d°
,

271 
Êash_addr
, 
˘s_dev
->
hwd©a
->
sf˘æ
->
xchg_§am_ba£
, 
size
,

272 
SFCTRLv2_CMD_FAST_READ_FLAGS
);

273 
	}
}

275 
	$sf˘æv2_ªad_Êash_to_§am
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

276 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
size
)

278  
	`sf˘æv2_å™s„r
(
˘s_dev
, 
SFCTRLv2_CMD_FAST_READ
, 
NULL
,

279 
Êash_addr
, 
§am_addr
, 
size
, 
SFCTRLv2_CMD_FAST_READ_FLAGS
);

280 
	}
}

282 
	$sf˘æv2_ˇlc_§am_¸c
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

283 
u32
 
§am_addr
, 
size_t
 
size
, u32 *
¸c
)

285 
ªt
;

287 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôñ
, 
rSFCTRLv2_SRAM_ADDR
, 
§am_addr
);

288 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôñ
, 
rSFCTRLv2_DATA_LENGTH
, (
u32
)
size
);

289 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôeb
, 
rSFCTRLv2_SRAM_CRC_START
, 1);

291 if((
ªt
 = 
	`waô_sf˘æ_x„r_comp
(
˘s_dev
)) != 0) {

292 
	`˘s_îr
("Waô sf˘æÑódy faûed %d", 
ªt
);

293  
ªt
;

296 
	`sf˘æ_ªad_ªg_check_ªt
(
ªadl
, 
rSFCTRLv2_CRC_RESULT
, 
¸c
);

299 
	}
}

301 
	$sf˘æv2_ˇlc_Êash_¸c
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

302 
u32
 
Êash_addr
, 
size_t
 
size
, u32 *
¸c
)

304 
ªt
;

306 
	`˘s_öfo
("CÆ¯¸¯‰om fœsh 0x%06x sizê%zu", 
Êash_addr
, 
size
);

308 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôñ
, 
rSFCTRLv2_FLASH_ADDR
, 
Êash_addr
);

309 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôñ
, 
rSFCTRLv2_DATA_LENGTH
, (
u32
)
size
);

310 
	`sf˘æ_wrôe_ªg_check_ªt
(
wrôeb
, 
rSFCTRLv2_FLASH_CRC_START
, 1);

312 if((
ªt
 = 
	`waô_sf˘æ_x„r_comp
(
˘s_dev
)) != 0) {

313 
	`˘s_îr
("Waô sf˘æÑódy faûed %d", 
ªt
);

314  
ªt
;

317 
	`sf˘æ_ªad_ªg_check_ªt
(
ªadl
, 
rSFCTRLv2_CRC_RESULT
, 
¸c
);

320 
	}
}

322 c⁄° 
˘s_sf˘æ_›s
 
	g˘s_sf˘æv2_›s
 = {

323 .
rdid
 = 
sf˘æv2_rdid
,

324 .
	g£
 = 
sf˘æv2_£
,

325 .
	gbe
 = 
sf˘æv2_be
,

326 .
	gªad
 = 
sf˘æv2_ªad
,

327 .
	gªad_to_§am
 = 
sf˘æv2_ªad_Êash_to_§am
,

328 .
	g¥ogøm
 = 
sf˘æv2_µ
,

329 .
	g¥ogøm_‰om_§am
 = 
sf˘æv2_¥ogøm_Êash_‰om_§am
,

330 .
	gˇlc_§am_¸c
 = 
sf˘æv2_ˇlc_§am_¸c
,

331 .
	gˇlc_Êash_¸c
 = 
sf˘æv2_ˇlc_Êash_¸c
,

	@cts_spi_flash.c

1 
	#LOG_TAG
 "Fœsh"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_sf˘æ.h
"

7 
	~"˘s_•i_Êash.h
"

13 c⁄° 
˘s_Êash
 
	g˘s_Êashes
[] = {

71 c⁄° 
˘s_Êash
 *
	$föd_Êash_by_jedec_id
(
u32
 
jedec_id
)

73 
i
;

75 
i
 = 0; i < 
	`ARRAY_SIZE
(
˘s_Êashes
); i++) {

76 i‡(
˘s_Êashes
[
i
].
jedec_id
 == jedec_id) {

77  &
˘s_Êashes
[
i
];

81  
NULL
;

82 
	}
}

84 
	$¥obe_Êash
(
˘s_devi˚
 *
˘s_dev
)

86 
ªt
;

88 
	`˘s_öfo
("Probe flash");

90 i‡(
˘s_dev
->
hwd©a
->
sf˘æ
->
›s
->
rdid
 !
NULL
) {

91 
u32
 
id
;

93 
	`˘s_öfo
("Read JEDEC ID");

95 
ªt
 = 
˘s_dev
->
hwd©a
->
sf˘æ
->
›s
->
	`rdid
(˘s_dev, &
id
);

96 i‡(
ªt
) {

97 
	`˘s_îr
("Ród JEDEC ID faûed %d", 
ªt
);

98  
ªt
;

101 
˘s_dev
->
Êash
 = 
	`föd_Êash_by_jedec_id
(
id
);

102 i‡(
˘s_dev
->
Êash
 =
NULL
) {

103 
	`˘s_îr
("Unknow¿JEDEC ID: %06x", 
id
);

104  -
ENODEV
;

107 
	`˘s_öfo
("FœshÅy≥: '%s'", 
˘s_dev
->
Êash
->
«me
);

110 
	`˘s_îr
("Probe flash whileÑdid == NULL");

111  -
ENOTSUPP
;

113 
	}
}

116 
	$îa£_£˘‹_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

117 
u32
 
£˘‹_addr
, 
ªåy
)

119 
ªt
, 
ªåõs
;

121 
	`˘s_öfo
(" Eø£ se˘‹ 0x%06x", 
£˘‹_addr
);

123 
ªåõs
 = 0;

125 
ªåõs
++;

126 
ªt
 = 
˘s_dev
->
hwd©a
->
sf˘æ
->
›s
->
	`£
(˘s_dev, 
£˘‹_addr
);

127 i‡(
ªt
) {

128 
	`˘s_îr
("Erase sector 0x%06x failed %dÑetries %d",

129 
£˘‹_addr
, 
ªt
, 
ªåõs
);

132 } 
ªåõs
 < 
ªåy
);

134  
ªt
;

135 
	}
}

138 
ölöe
 
	$îa£_£˘‹
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

139 
u32
 
£˘‹_addr
)

141  
	`îa£_£˘‹_ªåy
(
˘s_dev
, 
£˘‹_addr
, 
CTS_FLASH_ERASE_DEFAULT_RETRY
);

142 
	}
}

145 
	$îa£_block_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

146 
u32
 
block_addr
, 
ªåy
)

148 
ªt
, 
ªåõs
;

150 
	`˘s_öfo
(" Eø£ block 0x%06x", 
block_addr
);

152 
ªåõs
 = 0;

154 
ªåõs
++;

156 
ªt
 = 
˘s_dev
->
hwd©a
->
sf˘æ
->
›s
->
	`be
(˘s_dev, 
block_addr
);

157 i‡(
ªt
) {

158 
	`˘s_îr
("Erase block 0x%06x failed %dÑetries %d",

159 
block_addr
, 
ªt
, 
ªåõs
);

162 } 
ªåõs
 < 
ªåy
);

164  
ªt
;

165 
	}
}

168 
ölöe
 
	$îa£_block
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

169 
u32
 
block_addr
)

171  
	`îa£_block_ªåy
(
˘s_dev
, 
block_addr
, 
CTS_FLASH_ERASE_DEFAULT_RETRY
);

172 
	}
}

174 
	$˘s_¥ï¨e_Êash_›î©i⁄
(
˘s_devi˚
 *
˘s_dev
)

176 
ªt
;

177 
u8
 
diva
 = 0;

178 
boﬁ
 
¥ogøm_mode
 = 
	`˘s_is_devi˚_¥ogøm_mode
(
˘s_dev
);

179 
boﬁ
 
íabÀd
 = 
	`˘s_is_devi˚_íabÀd
(
˘s_dev
);

181 
	`˘s_öfo
("Prepare for flash operation");

183 i‡(
íabÀd
) {

184 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

185 i‡(
ªt
) {

186 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

187  
ªt
;

191 i‡(!
¥ogøm_mode
) {

192 
ªt
 = 
	`˘s_íãr_¥ogøm_mode
(
˘s_dev
);

193 i‡(
ªt
) {

194 
	`˘s_îr
("E¡îÖrogøm modêÁûed %d", 
ªt
);

195 
îr_°¨t_devi˚
;

199 
ªt
 = 
	`˘s_hw_ªg_ªadb_ªåy
(
˘s_dev
, 0x30033, &
diva
, 5, 0);

200 i‡(
ªt
) {

201 
	`˘s_w¨n
("Ród DIVA faûed %d", 
ªt
);

203 
	`˘s_dbg
("Devi˚ DIVA = %d", 
diva
);

206 i‡(
ªt
 =0 && 
diva
 == 0x0C) {

207 
	`˘s_öfo
("DIVA isÑeadyálready");

209 
ªåõs
;

212 
ªt
 = 
	`˘s_hw_ªg_wrôeb_ªåy
(
˘s_dev
, 0x30033, 0x0C, 5, 0);

213 i‡(
ªt
) {

214 
	`˘s_îr
("WrôêDIVA faûed %d", 
ªt
);

215 
îr_íãr_n‹mÆ_mode
;

219 
ªt
 = 
	`˘s_hw_ªg_wrôeb_ªåy
(
˘s_dev
, 0x30008, 0xFB, 5, 0);

220 i‡(
ªt
) {

221 
	`˘s_îr
("Re£àsf˘»Áûed %d", 
ªt
);

222 
îr_íãr_n‹mÆ_mode
;

225 
ªåõs
 = 0;

227 
u8
 
°©e
;

229 
ªt
 = 
	`˘s_hw_ªg_ªadb
(
˘s_dev
, 0x3401B, &
°©e
);

230 i‡(
ªt
 =0 && (
°©e
 & 0x40) != 0) {

231 
öô_Êash
;

234 
	`mdñay
(2);

235 } ++
ªåõs
 < 1000);

237 
	`˘s_w¨n
("Waô SFCTRLÑódy faûed %d", 
ªt
);

241 
öô_Êash
:

242 i‡(
˘s_dev
->
Êash
 =
NULL
) {

243 
	`˘s_öfo
("Flash isÇot initialized,ÅryÅoÖrobe...");

244 i‡((
ªt
 = 
	`¥obe_Êash
(
˘s_dev
)) != 0) {

245 
˘s_dev
->
πd©a
.
has_Êash
 = 
Ál£
;

246 
	`˘s_w¨n
("ProbêÊash faûed %d", 
ªt
);

251 
˘s_dev
->
πd©a
.
has_Êash
 = 
åue
;

254 
îr_íãr_n‹mÆ_mode
:

255 i‡(!
¥ogøm_mode
) {

256 
r
 = 
	`˘s_íãr_n‹mÆ_mode
(
˘s_dev
);

257 i‡(
r
) {

258 
	`˘s_îr
("E¡îÇ‹mÆ modêÁûed %d", 
r
);

261 
îr_°¨t_devi˚
:

262 i‡(
íabÀd
) {

263 
r
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

264 i‡(
r
) {

265 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
r
);

269  
ªt
;

270 
	}
}

272 
	$˘s_po°_Êash_›î©i⁄
(
˘s_devi˚
 *
˘s_dev
)

274 
	`˘s_öfo
("Post flash operation");

276  
	`˘s_hw_ªg_wrôeb_ªåy
(
˘s_dev
, 0x30033, 4, 5, 0);

277 
	}
}

279 
	$˘s_ªad_Êash_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

280 
u32
 
Êash_addr
, *
d°
, 
size_t
 
size
, 
ªåy
)

282 c⁄° 
˘s_sf˘æ
 *
sf˘æ
;

283 c⁄° 
˘s_Êash
 *
Êash
;

284 
ªt
;

286 
	`˘s_öfo
("Ród from 0x%06x sizê%zu", 
Êash_addr
, 
size
);

288 
sf˘æ
 = 
˘s_dev
->
hwd©a
->sfctrl;

289 
Êash
 = 
˘s_dev
->flash;

291 i‡(
Êash
 =
NULL
 ||

292 
sf˘æ
 =
NULL
 ||

293 
sf˘æ
->
›s
 =
NULL
 ||

294 
sf˘æ
->
›s
->
ªad
 =
NULL
) {

295 
	`˘s_îr
("ReadÇot supported");

296  -
ENOTSUPP
;

299 i‡(
Êash_addr
 > 
Êash
->
tŸÆ_size
) {

300 
	`˘s_îr
("Read from 0x%06x > flash size 0x%06zx",

301 
Êash_addr
, 
Êash
->
tŸÆ_size
);

302  -
EINVAL
;

304 
size
 = 
	`mö
(size, 
Êash
->
tŸÆ_size
 - 
Êash_addr
);

306 
	`˘s_öfo
("Ródá˘uÆly from 0x%06x sizê%zu", 
Êash_addr
, 
size
);

308 
size
) {

309 
size_t
 
l
;

311 
l
 = 
	`mö
(
sf˘æ
->
xchg_§am_size
, 
size
);

313 
ªt
 = 
sf˘æ
->
›s
->
	`ªad
(
˘s_dev
, 
Êash_addr
, 
d°
, 
l
);

314 if(
ªt
 < 0) {

315 
	`˘s_îr
("Read from 0x%06x size %zu failed %d",

316 
Êash_addr
, 
size
, 
ªt
);

317  
ªt
;

320 
d°
 +
l
;

321 
size
 -
l
;

322 
Êash_addr
 +
l
;

326 
	}
}

328 
	$˘s_ªad_Êash_to_§am_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

329 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
size
, 
ªåy
)

331 c⁄° 
˘s_sf˘æ
 *
sf˘æ
;

332 c⁄° 
˘s_Êash
 *
Êash
;

333 
ªt
, 
ªåõs
;

335 
	`˘s_öfo
("Read from 0x%06xÅo sram 0x%06x size %zu",

336 
Êash_addr
, 
§am_addr
, 
size
);

338 
sf˘æ
 = 
˘s_dev
->
hwd©a
->sfctrl;

339 
Êash
 = 
˘s_dev
->flash;

341 i‡(
Êash
 =
NULL
 ||

342 
sf˘æ
 =
NULL
 ||

343 
sf˘æ
->
›s
 =
NULL
 ||

344 
sf˘æ
->
›s
->
ªad_to_§am
 =
NULL
) {

345 
	`˘s_îr
("ReadÅo sramÇot supported");

346  -
ENOTSUPP
;

349 i‡(
Êash_addr
 > 
Êash
->
tŸÆ_size
) {

350 
	`˘s_îr
("ReadÅo sram from 0x%06x > flash size 0x%06zx",

351 
Êash_addr
, 
Êash
->
tŸÆ_size
);

352  -
EINVAL
;

354 
size
 = 
	`mö
(size, 
Êash
->
tŸÆ_size
 - 
Êash_addr
);

356 
	`˘s_öfo
("RódÅÿ§amá˘uÆly from 0x%06x sizê%zu", 
Êash_addr
, 
size
);

358 
ªåõs
 = 0;

360 
ªåõs
++;

361 
ªt
 = 
sf˘æ
->
›s
->
	`ªad_to_§am
(
˘s_dev
, 
Êash_addr
, 
§am_addr
, 
size
);

362 if(
ªt
) {

363 
	`˘s_îr
("Read from 0x%06xÅo sram 0x%06x size %zu failed %dÑetries %d",

364 
Êash_addr
, 
§am_addr
, 
size
, 
ªt
, 
ªåõs
);

367 } 
ªåõs
 < 
ªåy
);

369  
ªt
;

370 
	}
}

372 
	$˘s_ªad_Êash_to_§am_check_¸c_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

373 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
size
, u32 
¸c
, 
ªåy
)

375 c⁄° 
˘s_sf˘æ
 *
sf˘æ
;

376 c⁄° 
˘s_Êash
 *
Êash
;

377 
ªt
, 
ªåõs
;

379 
	`˘s_öfo
("Read from 0x%06xÅo sram 0x%06x size %zu with crc check",

380 
Êash_addr
, 
§am_addr
, 
size
);

382 
sf˘æ
 = 
˘s_dev
->
hwd©a
->sfctrl;

383 
Êash
 = 
˘s_dev
->flash;

385 i‡(
Êash
 =
NULL
 ||

386 
sf˘æ
 =
NULL
 ||

387 
sf˘æ
->
›s
 =
NULL
 ||

388 
sf˘æ
->
›s
->
ªad_to_§am
 =
NULL
 ||

389 
sf˘æ
->
›s
->
ˇlc_§am_¸c
 =
NULL
) {

390 
	`˘s_îr
("ReadÅo sram check crcÇot supported");

391  -
ENOTSUPP
;

394 i‡(
Êash_addr
 > 
Êash
->
tŸÆ_size
) {

395 
	`˘s_îr
("ReadÅo sram from 0x%06x > flash size 0x%06zx",

396 
Êash_addr
, 
Êash
->
tŸÆ_size
);

397  -
EINVAL
;

399 
size
 = 
	`mö
(size, 
Êash
->
tŸÆ_size
 - 
Êash_addr
);

401 
	`˘s_öfo
("ReadÅo sramáctually from 0x%06x size %zu with crc check",

402 
Êash_addr
, 
size
);

404 
ªåõs
 = 0;

406 
u32
 
¸c_§am
;

408 
ªåõs
++;

410 
ªt
 = 
sf˘æ
->
›s
->
	`ªad_to_§am
(
˘s_dev
, 
Êash_addr
, 
§am_addr
, 
size
);

411 if(
ªt
) {

412 
	`˘s_îr
("Read from 0x%06xÅo sram 0x%06x size %zu failed %dÑetries %d",

413 
Êash_addr
, 
§am_addr
, 
size
, 
ªt
, 
ªåõs
);

417 
ªt
 = 
sf˘æ
->
›s
->
	`ˇlc_§am_¸c
(
˘s_dev
, 
§am_addr
, 
size
, &
¸c_§am
);

418 i‡(
ªt
) {

419 
	`˘s_îr
("Get crc forÑead from 0x%06xÅo sram 0x%06x size %zu "

421 
Êash_addr
, 
§am_addr
, 
size
, 
ªt
, 
ªåõs
);

425 i‡(
¸c
 =
¸c_§am
) {

429 
	`˘s_îr
("Check crc forÑead from 0x%06xÅo sram 0x%06x size %zu "

431 
Êash_addr
, 
§am_addr
, 
size
, 
¸c
, 
¸c_§am
, 
ªåõs
);

432 
ªt
 = -
EFAULT
;

433 } 
ªåõs
 < 
ªåy
);

435  
ªt
;

436 
	}
}

438 
	$˘s_¥ogøm_Êash
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

439 
u32
 
Êash_addr
, c⁄° *
§c
, 
size_t
 
size
)

441 c⁄° 
˘s_sf˘æ
 *
sf˘æ
;

442 c⁄° 
˘s_Êash
 *
Êash
;

443 
ªt
;

445 
	`˘s_öfo
("ProgømÅÿ0x%06x sizê%zu", 
Êash_addr
, 
size
);

447 
sf˘æ
 = 
˘s_dev
->
hwd©a
->sfctrl;

448 
Êash
 = 
˘s_dev
->flash;

450 i‡(
Êash
 =
NULL
 ||

451 
sf˘æ
 =
NULL
 ||

452 
sf˘æ
->
›s
 =
NULL
 ||

453 
sf˘æ
->
›s
->
¥ogøm
 =
NULL
) {

454 
	`˘s_îr
("ProgramÇot supported");

455  -
ENOTSUPP
;

458 i‡(
Êash_addr
 >
Êash
->
tŸÆ_size
) {

459 
	`˘s_îr
("Program from 0x%06x >= flash size 0x%06zx",

460 
Êash_addr
, 
Êash
->
tŸÆ_size
);

461  -
EINVAL
;

463 
size
 = 
	`mö
(size, 
Êash
->
tŸÆ_size
 - 
Êash_addr
);

465 
	`˘s_öfo
("Progømá˘uÆlyÅÿ0x%06x sizê%zu", 
Êash_addr
, 
size
);

467 
size
) {

468 
size_t
 
l
, 
off£t
;

470 
l
 = 
	`mö
(
Êash
->
∑ge_size
, 
size
);

471 
off£t
 = 
Êash_addr
 & (
Êash
->
∑ge_size
 - 1);

473 i‡(
off£t
) {

474 
l
 = 
	`mö
(
Êash
->
∑ge_size
 - 
off£t
,Ü);

477 
ªt
 = 
sf˘æ
->
›s
->
	`¥ogøm
(
˘s_dev
, 
Êash_addr
, 
§c
, 
l
);

478 if(
ªt
) {

479 
	`˘s_îr
("ProgømÅÿ0x%06x sizê%zu faûed %d", 
Êash_addr
, 
l
, 
ªt
);

480  
ªt
;

483 
§c
 +
l
;

484 
size
 -
l
;

485 
Êash_addr
 +
l
;

489 
	}
}

491 
	$˘s_¥ogøm_Êash_‰om_§am
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

492 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
size
)

494 c⁄° 
˘s_sf˘æ
 *
sf˘æ
;

495 c⁄° 
˘s_Êash
 *
Êash
;

496 
ªt
;

498 
	`˘s_öfo
("ProgramÅo 0x%06x from sram 0x%06x size %zu",

499 
Êash_addr
, 
§am_addr
, 
size
);

501 
sf˘æ
 = 
˘s_dev
->
hwd©a
->sfctrl;

502 
Êash
 = 
˘s_dev
->flash;

504 i‡(
Êash
 =
NULL
 ||

505 
sf˘æ
 =
NULL
 ||

506 
sf˘æ
->
›s
 =
NULL
 ||

507 
sf˘æ
->
›s
->
¥ogøm_‰om_§am
 =
NULL
) {

508 
	`˘s_îr
("Program from sramÇot supported");

509  -
ENOTSUPP
;

512 i‡(
Êash_addr
 >
Êash
->
tŸÆ_size
) {

513 
	`˘s_îr
("Program from 0x%06x >= flash size 0x%06zx",

514 
Êash_addr
, 
Êash
->
tŸÆ_size
);

515  -
EINVAL
;

517 
size
 = 
	`mö
(size, 
Êash
->
tŸÆ_size
 - 
Êash_addr
);

519 
	`˘s_öfo
("ProgramáctuallyÅo 0x%06x from sram 0x%06x size %zu",

520 
Êash_addr
, 
§am_addr
, 
size
);

522 
size
) {

523 
size_t
 
l
, 
off£t
;

525 
l
 = 
	`mö
(
Êash
->
∑ge_size
, 
size
);

526 
off£t
 = 
Êash_addr
 & (
Êash
->
∑ge_size
 - 1);

528 i‡(
off£t
) {

529 
l
 = 
	`mö
(
Êash
->
∑ge_size
 - 
off£t
,Ü);

532 
ªt
 = 
sf˘æ
->
›s
->
	`¥ogøm_‰om_§am
(
˘s_dev
, 
Êash_addr
, 
§am_addr
, 
l
);

533 if(
ªt
) {

534 
	`˘s_îr
("ProgramÅo 0x%06x from sram 0x%06x size %zu failed %d",

535 
Êash_addr
, 
§am_addr
, 
l
, 
ªt
);

536  
ªt
;

539 
size
 -
l
;

540 
Êash_addr
 +
l
;

541 
§am_addr
 +
l
;

545 
	}
}

547 
	$˘s_îa£_Êash
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
, 
size_t
 
size
)

549 c⁄° 
˘s_sf˘æ
 *
sf˘æ
;

550 c⁄° 
˘s_Êash
 *
Êash
;

551 
ªt
;

553 
	`˘s_öfo
("Eø£ from 0x%06x sizê%zu", 
addr
, 
size
);

555 
sf˘æ
 = 
˘s_dev
->
hwd©a
->sfctrl;

556 
Êash
 = 
˘s_dev
->flash;

558 i‡(
Êash
 =
NULL
 ||

559 
sf˘æ
 =
NULL
 || sf˘æ->
›s
 == NULL ||

560 
sf˘æ
->
›s
->
£
 =
NULL
 || sf˘æ->›s->
be
 == NULL ||

561 
Êash
 =
NULL
) {

562 
	`˘s_îr
("Oops");

563  -
EINVAL
;

567 
addr
 = 
	`rounddown
◊ddr, 
Êash
->
£˘‹_size
);

568 
size
 = 
	`roundup
(size, 
Êash
->
£˘‹_size
);

570 i‡(
addr
 > 
Êash
->
tŸÆ_size
) {

571 
	`˘s_îr
("Erase from 0x%06x > flash size 0x%06zx",

572 
addr
, 
Êash
->
tŸÆ_size
);

573  -
EINVAL
;

575 
size
 = 
	`mö
(size, 
Êash
->
tŸÆ_size
 - 
addr
);

577 
	`˘s_öfo
("Eø£á˘uÆly from 0x%06x sizê%zu", 
addr
, 
size
);

579 i‡(
Êash
->
block_size
) {

580 
addr
 !
	`ALIGN
◊ddr, 
Êash
->
block_size
) &&

581 
size
 >
Êash
->
£˘‹_size
) {

582 
ªt
 = 
	`îa£_£˘‹
(
˘s_dev
, 
addr
);

583 i‡(
ªt
) {

584 
	`˘s_îr
("Erase sector 0x%06x size 0x%04zx failed %d",

585 
addr
, 
Êash
->
£˘‹_size
, 
ªt
);

586  
ªt
;

588 
addr
 +
Êash
->
£˘‹_size
;

589 
size
 -
Êash
->
£˘‹_size
;

592 
size
 >
Êash
->
block_size
) {

593 
ªt
 = 
	`îa£_block
(
˘s_dev
, 
addr
);

594 i‡(
ªt
) {

595 
	`˘s_îr
("Erase block 0x%06x size 0x%04zx failed %d",

596 
addr
, 
Êash
->
block_size
, 
ªt
);

597  
ªt
;

599 
addr
 +
Êash
->
block_size
;

600 
size
 -
Êash
->
block_size
;

604 
size
 >
Êash
->
£˘‹_size
) {

605 
ªt
 = 
	`îa£_£˘‹
(
˘s_dev
, 
addr
);

606 i‡(
ªt
) {

607 
	`˘s_îr
("Erase sector 0x%06x size 0x%04zx failed %d",

608 
addr
, 
Êash
->
£˘‹_size
, 
ªt
);

609  
ªt
;

611 
addr
 +
Êash
->
£˘‹_size
;

612 
size
 -
Êash
->
£˘‹_size
;

616 
	}
}

	@cts_spi_flash.h

1 #i‚de‡
CTS_SPI_FLASH_H


2 
	#CTS_SPI_FLASH_H


	)

4 
	s˘s_Êash
 {

5 c⁄° *
	m«me
;

6 
u32
 
	mjedec_id
;

7 
size_t
 
	m∑ge_size
;

8 
size_t
 
	m£˘‹_size
;

9 
size_t
 
	mblock_size
;

11 
size_t
 
	mtŸÆ_size
;

15 
	#CTS_FLASH_READ_DEFAULT_RETRY
 (3)

	)

16 
	#CTS_FLASH_ERASE_DEFAULT_RETRY
 (3)

	)

18 
	g˘s_devi˚
;

20 
˘s_¥ï¨e_Êash_›î©i⁄
(
˘s_devi˚
 *
˘s_dev
);

21 
˘s_po°_Êash_›î©i⁄
(
˘s_devi˚
 *
˘s_dev
);

23 
˘s_ªad_Êash_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

24 
u32
 
Êash_addr
, *
d°
, 
size_t
 
size
, 
ªåy
);

25 
ölöe
 
	$˘s_ªad_Êash
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

26 
u32
 
Êash_addr
, *
d°
, 
size_t
 
size
)

28  
	`˘s_ªad_Êash_ªåy
(
˘s_dev
,

29 
Êash_addr
, 
d°
, 
size
, 
CTS_FLASH_READ_DEFAULT_RETRY
);

30 
	}
}

32 
˘s_ªad_Êash_to_§am_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

33 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
size
, 
ªåy
);

34 
ölöe
 
	$˘s_ªad_Êash_to_§am
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

35 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
size
)

37  
	`˘s_ªad_Êash_to_§am_ªåy
(
˘s_dev
,

38 
Êash_addr
, 
§am_addr
, 
size
, 
CTS_FLASH_READ_DEFAULT_RETRY
);

39 
	}
}

41 
˘s_ªad_Êash_to_§am_check_¸c_ªåy
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

42 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
size
, u32 
¸c
, 
ªåy
);

43 
ölöe
 
	$˘s_ªad_Êash_to_§am_check_¸c
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

44 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
size
, u32 
¸c
)

46  
	`˘s_ªad_Êash_to_§am_check_¸c_ªåy
(
˘s_dev
,

47 
Êash_addr
, 
§am_addr
, 
size
, 
¸c
, 
CTS_FLASH_READ_DEFAULT_RETRY
);

48 
	}
}

50 
˘s_îa£_Êash
(c⁄° 
˘s_devi˚
 *
˘s_dev
, 
u32
 
addr
, 
size_t
 
size
);

52 
˘s_¥ogøm_Êash
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

53 
u32
 
Êash_addr
, c⁄° *
§c
, 
size_t
 
size
);

54 
˘s_¥ogøm_Êash_‰om_§am
(c⁄° 
˘s_devi˚
 *
˘s_dev
,

55 
u32
 
Êash_addr
, u32 
§am_addr
, 
size_t
 
size
);

	@cts_strerror.c

1 
	~<löux/kî√l.h
>

2 
	~<löux/î∫o.h
>

4 
	#ERROR_TEXT_ENTRY
(
î∫o
, 
îr_desc_°r
) \

5 [(
î∫o
)] = #î∫ÿ", " 
îr_desc_°r


	)

7 c⁄° * c⁄° 
	g_îr‹_ãxt
[] = {

9 
ERROR_TEXT_ENTRY
(
EPERM
, "OperationÇotÖermitted"),

10 
ERROR_TEXT_ENTRY
(
ENOENT
, "No such file or directory"),

11 
ERROR_TEXT_ENTRY
(
ESRCH
, "No suchÖrocess"),

12 
ERROR_TEXT_ENTRY
(
EINTR
, "Interrupted system call"),

13 
ERROR_TEXT_ENTRY
(
EIO
, "Input/outputÉrror"),

14 
ERROR_TEXT_ENTRY
(
ENXIO
, "No such device oráddress"),

15 
ERROR_TEXT_ENTRY
(
E2BIG
, "ArgumentÜistÅooÜong"),

16 
ERROR_TEXT_ENTRY
(
ENOEXEC
, "Exec formatÉrror"),

17 
ERROR_TEXT_ENTRY
(
EBADF
, "Bad file descriptor"),

18 
ERROR_TEXT_ENTRY
(
ECHILD
, "No childÖrocesses"),

19 
ERROR_TEXT_ENTRY
(
EAGAIN
, "ResourceÅemporarily unavailable"),

20 
ERROR_TEXT_ENTRY
(
ENOMEM
, "Cannotállocate memory"),

21 
ERROR_TEXT_ENTRY
(
EACCES
, "Permission denied"),

22 
ERROR_TEXT_ENTRY
(
EFAULT
, "Badáddress"),

23 
ERROR_TEXT_ENTRY
(
ENOTBLK
, "Block deviceÑequired"),

24 
ERROR_TEXT_ENTRY
(
EBUSY
, "Device orÑesource busy"),

25 
ERROR_TEXT_ENTRY
(
EEXIST
, "FileÉxists"),

26 
ERROR_TEXT_ENTRY
(
EXDEV
, "Invalid cross-deviceÜink"),

27 
ERROR_TEXT_ENTRY
(
ENODEV
, "No such device"),

28 
ERROR_TEXT_ENTRY
(
ENOTDIR
, "Notá directory"),

29 
ERROR_TEXT_ENTRY
(
EISDIR
, "Isá directory"),

30 
ERROR_TEXT_ENTRY
(
EINVAL
, "Invalidárgument"),

31 
ERROR_TEXT_ENTRY
(
EMFILE
, "Too many open files"),

32 
ERROR_TEXT_ENTRY
(
ENFILE
, "Too many open files in system"),

33 
ERROR_TEXT_ENTRY
(
ENOTTY
, "Inappropriate ioctl for device"),

34 
ERROR_TEXT_ENTRY
(
ETXTBSY
, "Text file busy"),

35 
ERROR_TEXT_ENTRY
(
EFBIG
, "FileÅooÜarge"),

36 
ERROR_TEXT_ENTRY
(
ENOSPC
, "No spaceÜeft on device"),

37 
ERROR_TEXT_ENTRY
(
ESPIPE
, "Illegal seek"),

38 
ERROR_TEXT_ENTRY
(
EROFS
, "Read-only file system"),

39 
ERROR_TEXT_ENTRY
(
EMLINK
, "Too manyÜinks"),

40 
ERROR_TEXT_ENTRY
(
EPIPE
, "BrokenÖipe"),

41 
ERROR_TEXT_ENTRY
(
EDOM
, "Numericalárgument out of domain"),

42 
ERROR_TEXT_ENTRY
(
ERANGE
, "NumericalÑesult out ofÑange"),

43 
ERROR_TEXT_ENTRY
(
EDEADLK
, "Resource deadlockávoided"),

44 
ERROR_TEXT_ENTRY
(
ENAMETOOLONG
, "FileÇameÅooÜong"),

45 
ERROR_TEXT_ENTRY
(
ENOLCK
, "NoÜocksávailable"),

46 
ERROR_TEXT_ENTRY
(
ENOSYS
, "FunctionÇot implemented"),

47 
ERROR_TEXT_ENTRY
(
ENOTEMPTY
, "DirectoryÇotÉmpty"),

48 
ERROR_TEXT_ENTRY
(
ELOOP
, "Too manyÜevels of symbolicÜinks"),

49 
ERROR_TEXT_ENTRY
(
EWOULDBLOCK
, "Operation would block"),

50 
ERROR_TEXT_ENTRY
(
ENOMSG
, "No message of desiredÅype"),

51 
ERROR_TEXT_ENTRY
(
EIDRM
, "IdentifierÑemoved"),

52 
ERROR_TEXT_ENTRY
(
ECHRNG
, "ChannelÇumber out ofÑange"),

53 
ERROR_TEXT_ENTRY
(
EL2NSYNC
, "Level 2Çot synchronized"),

54 
ERROR_TEXT_ENTRY
(
EL3HLT
, "Level 3 halted"),

55 
ERROR_TEXT_ENTRY
(
EL3RST
, "Level 3Ñeset"),

56 
ERROR_TEXT_ENTRY
(
ELNRNG
, "LinkÇumber out ofÑange"),

57 
ERROR_TEXT_ENTRY
(
EUNATCH
, "Protocol driverÇotáttached"),

58 
ERROR_TEXT_ENTRY
(
ENOCSI
, "No CSI structureávailable"),

59 
ERROR_TEXT_ENTRY
(
EL2HLT
, "Level 2 halted"),

60 
ERROR_TEXT_ENTRY
(
EBADE
, "InvalidÉxchange"),

61 
ERROR_TEXT_ENTRY
(
EBADR
, "InvalidÑequest descriptor"),

62 
ERROR_TEXT_ENTRY
(
EXFULL
, "Exchange full"),

63 
ERROR_TEXT_ENTRY
(
ENOANO
, "Noánode"),

64 
ERROR_TEXT_ENTRY
(
EBADRQC
, "InvalidÑequest code"),

65 
ERROR_TEXT_ENTRY
(
EBADSLT
, "Invalid slot"),

66 
ERROR_TEXT_ENTRY
(
EDEADLOCK
, "FileÜocking deadlockÉrror"),

67 
ERROR_TEXT_ENTRY
(
EBFONT
, "Bad font file format"),

68 
ERROR_TEXT_ENTRY
(
ENOSTR
, "DeviceÇotá stream"),

69 
ERROR_TEXT_ENTRY
(
ENODATA
, "No dataávailable"),

70 
ERROR_TEXT_ENTRY
(
ETIME
, "TimerÉxpired"),

71 
ERROR_TEXT_ENTRY
(
ENOSR
, "Out of streamsÑesources"),

72 
ERROR_TEXT_ENTRY
(
ENONET
, "Machine isÇot onÅheÇetwork"),

73 
ERROR_TEXT_ENTRY
(
ENOPKG
, "PackageÇot installed"),

74 
ERROR_TEXT_ENTRY
(
EREMOTE
, "Object isÑemote"),

75 
ERROR_TEXT_ENTRY
(
ENOLINK
, "Link has been severed"),

76 
ERROR_TEXT_ENTRY
(
EADV
, "AdvertiseÉrror"),

77 
ERROR_TEXT_ENTRY
(
ESRMNT
, "SrmountÉrror"),

78 
ERROR_TEXT_ENTRY
(
ECOMM
, "CommunicationÉrror on send"),

79 
ERROR_TEXT_ENTRY
(
EPROTO
, "ProtocolÉrror"),

80 
ERROR_TEXT_ENTRY
(
EMULTIHOP
, "Multihopáttempted"),

81 
ERROR_TEXT_ENTRY
(
EDOTDOT
, "RFS specificÉrror"),

82 
ERROR_TEXT_ENTRY
(
EBADMSG
, "Bad message"),

83 
ERROR_TEXT_ENTRY
(
EOVERFLOW
, "ValueÅooÜarge for defined dataÅype"),

84 
ERROR_TEXT_ENTRY
(
ENOTUNIQ
, "NameÇot unique onÇetwork"),

85 
ERROR_TEXT_ENTRY
(
EBADFD
, "File descriptor in bad state"),

86 
ERROR_TEXT_ENTRY
(
EREMCHG
, "Remoteáddress changed"),

87 
ERROR_TEXT_ENTRY
(
ELIBACC
, "CanÇotáccessáÇeeded sharedÜibrary"),

88 
ERROR_TEXT_ENTRY
(
ELIBBAD
, "Accessingá corrupted sharedÜibrary"),

89 
ERROR_TEXT_ENTRY
(
ELIBSCN
, ".lib section iná.out corrupted"),

90 
ERROR_TEXT_ENTRY
(
ELIBMAX
, "AttemptingÅoÜink inÅoo many sharedÜibraries"),

91 
ERROR_TEXT_ENTRY
(
ELIBEXEC
, "CannotÉxecá sharedÜibrary directly"),

92 
ERROR_TEXT_ENTRY
(
EILSEQ
, "Invalid or incomplete multibyte or wide character"),

93 
ERROR_TEXT_ENTRY
(
ERESTART
, "Interrupted system call should beÑestarted"),

94 
ERROR_TEXT_ENTRY
(
ESTRPIPE
, "StreamsÖipeÉrror"),

95 
ERROR_TEXT_ENTRY
(
EUSERS
, "Too many users"),

96 
ERROR_TEXT_ENTRY
(
ENOTSOCK
, "Socket operation onÇon-socket"),

97 
ERROR_TEXT_ENTRY
(
EDESTADDRREQ
, "DestinationáddressÑequired"),

98 
ERROR_TEXT_ENTRY
(
EMSGSIZE
, "MessageÅooÜong"),

99 
ERROR_TEXT_ENTRY
(
EPROTOTYPE
, "Protocol wrongÅype for socket"),

100 
ERROR_TEXT_ENTRY
(
ENOPROTOOPT
, "ProtocolÇotávailable"),

101 
ERROR_TEXT_ENTRY
(
EPROTONOSUPPORT
, "ProtocolÇot supported"),

102 
ERROR_TEXT_ENTRY
(
ESOCKTNOSUPPORT
, "SocketÅypeÇot supported"),

103 
ERROR_TEXT_ENTRY
(
EOPNOTSUPP
, "OperationÇot supported"),

104 
ERROR_TEXT_ENTRY
(
EPFNOSUPPORT
, "Protocol familyÇot supported"),

105 
ERROR_TEXT_ENTRY
(
EAFNOSUPPORT
, "Address familyÇot supported byÖrotocol"),

106 
ERROR_TEXT_ENTRY
(
EADDRINUSE
, "Addressálready in use"),

107 
ERROR_TEXT_ENTRY
(
EADDRNOTAVAIL
, "CannotássignÑequestedáddress"),

108 
ERROR_TEXT_ENTRY
(
ENETDOWN
, "Network is down"),

109 
ERROR_TEXT_ENTRY
(
ENETUNREACH
, "Network is unreachable"),

110 
ERROR_TEXT_ENTRY
(
ENETRESET
, "Network dropped connection onÑeset"),

111 
ERROR_TEXT_ENTRY
(
ECONNABORTED
, "Software caused connectionábort"),

112 
ERROR_TEXT_ENTRY
(
ECONNRESET
, "ConnectionÑeset byÖeer"),

113 
ERROR_TEXT_ENTRY
(
ENOBUFS
, "No buffer spaceávailable"),

114 
ERROR_TEXT_ENTRY
(
EISCONN
, "TransportÉndpoint isálready connected"),

115 
ERROR_TEXT_ENTRY
(
ENOTCONN
, "TransportÉndpoint isÇot connected"),

116 
ERROR_TEXT_ENTRY
(
ESHUTDOWN
, "Cannot sendáfterÅransportÉndpoint shutdown"),

117 
ERROR_TEXT_ENTRY
(
ETOOMANYREFS
, "Too manyÑeferences: cannot splice"),

118 
ERROR_TEXT_ENTRY
(
ETIMEDOUT
, "ConnectionÅimed out"),

119 
ERROR_TEXT_ENTRY
(
ECONNREFUSED
, "ConnectionÑefused"),

120 
ERROR_TEXT_ENTRY
(
EHOSTDOWN
, "Host is down"),

121 
ERROR_TEXT_ENTRY
(
EHOSTUNREACH
, "NoÑouteÅo host"),

122 
ERROR_TEXT_ENTRY
(
EALREADY
, "Operationálready inÖrogress"),

123 
ERROR_TEXT_ENTRY
(
EINPROGRESS
, "OperationÇow inÖrogress"),

124 
ERROR_TEXT_ENTRY
(
ESTALE
, "Stale file handle"),

125 
ERROR_TEXT_ENTRY
(
EUCLEAN
, "StructureÇeeds cleaning"),

126 
ERROR_TEXT_ENTRY
(
ENOTNAM
, "Notá XENIXÇamedÅype file"),

127 
ERROR_TEXT_ENTRY
(
ENAVAIL
, "No XENIX semaphoresávailable"),

128 
ERROR_TEXT_ENTRY
(
EISNAM
, "IsáÇamedÅype file"),

129 
ERROR_TEXT_ENTRY
(
EREMOTEIO
, "Remote I/OÉrror"),

130 
ERROR_TEXT_ENTRY
(
EDQUOT
, "Disk quotaÉxceeded"),

131 
ERROR_TEXT_ENTRY
(
ENOMEDIUM
, "No medium found"),

132 
ERROR_TEXT_ENTRY
(
EMEDIUMTYPE
, "Wrong mediumÅype"),

133 
ERROR_TEXT_ENTRY
(
ECANCELED
, "Operation canceled"),

134 
ERROR_TEXT_ENTRY
(
ENOKEY
, "Required keyÇotávailable"),

135 
ERROR_TEXT_ENTRY
(
EKEYEXPIRED
, "Key hasÉxpired"),

136 
ERROR_TEXT_ENTRY
(
EKEYREVOKED
, "Key has beenÑevoked"),

137 
ERROR_TEXT_ENTRY
(
EKEYREJECTED
, "Key wasÑejected by service"),

138 
ERROR_TEXT_ENTRY
(
EOWNERDEAD
, "Owner died"),

139 
ERROR_TEXT_ENTRY
(
ENOTRECOVERABLE
, "StateÇotÑecoverable"),

140 
ERROR_TEXT_ENTRY
(
ERFKILL
, "OperationÇotÖossible dueÅo RF-kill"),

141 
ERROR_TEXT_ENTRY
(
EHWPOISON
, "MemoryÖage has hardwareÉrror"),

142 
ERROR_TEXT_ENTRY
(
ERESTARTSYS
, "Restart system"),

143 
ERROR_TEXT_ENTRY
(
ERESTARTNOINTR
, "Restart monitor"),

144 
ERROR_TEXT_ENTRY
(
ERESTARTNOHAND
, "Restart ifÇo handler"),

145 
ERROR_TEXT_ENTRY
(
ENOIOCTLCMD
, "No ioctl command"),

146 
ERROR_TEXT_ENTRY
(
ERESTART_RESTARTBLOCK
, "Restart by calling sys_restart_syscall"),

147 
ERROR_TEXT_ENTRY
(
EPROBE_DEFER
, "DriverÑequestsÖrobeÑetry"),

148 
ERROR_TEXT_ENTRY
(
EOPENSTALE
, "Open foundá stale dentry"),

150 
ERROR_TEXT_ENTRY
(
EBADHANDLE
, "Illegal NFS file handle"),

151 
ERROR_TEXT_ENTRY
(
ENOTSYNC
, "Update synchronization mismatch"),

152 
ERROR_TEXT_ENTRY
(
EBADCOOKIE
, "Cookie is stale"),

153 
ERROR_TEXT_ENTRY
(
ENOTSUPP
, "Operation isÇot supported"),

154 
ERROR_TEXT_ENTRY
(
ETOOSMALL
, "Buffer orÑequest isÅoo small"),

155 
ERROR_TEXT_ENTRY
(
ESERVERFAULT
, "An untranslatableÉrror occurred"),

156 
ERROR_TEXT_ENTRY
(
EBADTYPE
, "TypeÇot supported by server"),

157 
ERROR_TEXT_ENTRY
(
EJUKEBOX
, "Request initiated, but willÇot complete beforeÅimeout"),

158 
ERROR_TEXT_ENTRY
(
EIOCBQUEUED
, "IOCB queued, will get completionÉvent"),

161 
	#ERROR_TEXT_ARRAY_SIZE
 ((
_îr‹_ãxt
Ë/ (_îr‹_ãxt[0]))

	)

163 c⁄° *
	$˘s_°ªº‹
(
î∫o
)

165 i‡(
î∫o
 > 0) {

167 } i‡(-
î∫o
 < ()
ERROR_TEXT_ARRAY_SIZE
) {

168 c⁄° *
s
 = 
_îr‹_ãxt
[-
î∫o
];

169 i‡(
s
) {

170  
s
;

175 
	}
}

	@cts_strerror.h

1 #i‚de‡
CTS_STRERROR_H


2 
	#CTS_STRERROR_H


	)

4 
	#CTS_ERR_FMT_STR
 "%d(%s)"

	)

5 
	#CTS_ERR_ARG
(
î∫o
Ëî∫o, 
	`˘s_°ªº‹
”ºno)

	)

7 c⁄° *
˘s_°ªº‹
(
î∫o
);

	@cts_sysfs.c

1 
	#LOG_TAG
 "Sysfs"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_ã°.h
"

7 
	~"˘s_sf˘æ.h
"

8 
	~"˘s_•i_Êash.h
"

9 
	~"˘s_fúmw¨e.h
"

11 #ifde‡
CONFIG_CTS_SYSFS


13 
	#SPLIT_LINE_STR
 \

14 "-----------------------------------------------------------------------------------------------\n"

	)

15 
	#ROW_NUM_FORMAT_STR
 "%2d | "

	)

16 
	#COL_NUM_FORMAT_STR
 "%4u "

	)

17 
	#DATA_FORMAT_STR
 "%5d"

	)

20 
	#DIFFDATA_BUFFER_SIZE
(
˘s_dev
) \

21 (
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
 * 2)

	)

23 
	#MAX_ARG_NUM
 (100)

	)

24 
	#MAX_ARG_LENGTH
 (1024)

	)

26 
	gcmdlöe_∑øm
[
MAX_ARG_LENGTH
 + 1];

27 
	g¨gc
;

28 *
	g¨gv
[
MAX_ARG_NUM
];

30 
	gjôãr_ã°_‰ame
 = 10;

31 
s16
 *
	gm™uÆdiff_ba£
 = 
NULL
;

32 
u16
 
	g•ìd
 = 1000;

34 
	$∑r£_¨g
(c⁄° *
buf
, 
size_t
 
cou¡
)

36 *
p
;

38 
	`mem˝y
(
cmdlöe_∑øm
, 
buf
, 
	`mö
((
size_t
)
MAX_ARG_LENGTH
, 
cou¡
));

39 
cmdlöe_∑øm
[
cou¡
] = '\0';

41 
¨gc
 = 0;

42 
p
 = 
	`°rim
(
cmdlöe_∑øm
);

43 i‡(
p
 =
NULL
 ||Ö[0] == '\0') {

47 
p
 &&Ö[0] !'\0' && 
¨gc
 < 
MAX_ARG_NUM
) {

48 
¨gv
[
¨gc
++] = 
	`°r£p
(&
p
, " ,");

51  
¨gc
;

52 
	}
}

55 
ssize_t
 
	$wrôe_fúmw¨e_ªgi°î_°‹e
(
devi˚
 *
dev
,

56 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

58 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

59 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

60 
u16
 
addr
;

61 
i
, 
ªt
;

62 
u8
 *
d©a
 = 
NULL
;

64 
	`∑r£_¨g
(
buf
, 
cou¡
);

66 
	`˘s_öfo
("Wrôêfúmw¨êªgi°î '%.*s'", ()
cou¡
, 
buf
);

68 i‡(
¨gc
 < 2) {

69 
	`˘s_îr
("Toÿ„wárg†%d", 
¨gc
);

70  -
EFAULT
;

73 
ªt
 = 
	`k°πou16
(
¨gv
[0], 0, &
addr
);

74 i‡(
ªt
) {

75 
	`˘s_îr
("InvÆidáddªs†%s", 
¨gv
[0]);

76  -
EINVAL
;

79 
d©a
 = (
u8
 *)
	`kmÆloc
(
¨gc
 - 1, 
GFP_KERNEL
);

80 i‡(
d©a
 =
NULL
) {

81 
	`˘s_îr
("Allocate buffer for write data failed\n");

82  -
ENOMEM
;

85 
i
 = 1; i < 
¨gc
; i++) {

86 
ªt
 = 
	`k°πou8
(
¨gv
[
i
], 0, 
d©a
 + i - 1);

87 i‡(
ªt
) {

88 
	`˘s_îr
("InvÆid vÆuê%s", 
¨gv
[
i
]);

89 
‰ì_d©a
;

93 
ªt
 = 
	`˘s_fw_ªg_wrôesb
(
˘s_dev
, 
addr
, 
d©a
, 
¨gc
 - 1);

94 i‡(
ªt
) {

95 
	`˘s_îr
("Write firmwareÑegisteráddr: 0x%04x size: %d failed",

96 
addr
, 
¨gc
 - 1);

97 
‰ì_d©a
;

100 
‰ì_d©a
:

101 
	`k‰ì
(
d©a
);

103  (
ªt
 < 0 ?Ñë : 
cou¡
);

104 
	}
}

105 
DEVICE_ATTR
(
wrôe_ªg
, 
S_IWUSR
, 
NULL
, 
wrôe_fúmw¨e_ªgi°î_°‹e
);

107 
ssize_t
 
	$ªad_fúmw¨e_ªgi°î_show
(
devi˚
 *
dev
,

108 
devi˚_©åibuã
 *
©å
, *
buf
)

110 
	#PRINT_ROW_SIZE
 (16)

	)

111 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

112 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

113 
u16
 
addr
, 
size
, 
i
, 
ªmaöög
;

114 
u8
 *
d©a
 = 
NULL
;

115 
ssize_t
 
cou¡
 = 0;

116 
ªt
;

118 
	`˘s_öfo
("Read firmwareÑegister ");

120 i‡(
¨gc
 != 2) {

121  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

124 " 2. c©Ñód_ªg\n", 
¨gc
);

127 
ªt
 = 
	`k°πou16
(
¨gv
[0], 0, &
addr
);

128 i‡(
ªt
) {

129  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆidáddªss: %s\n", 
¨gv
[0]);

131 
ªt
 = 
	`k°πou16
(
¨gv
[1], 0, &
size
);

132 i‡(
ªt
) {

133  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid size: %s\n", 
¨gv
[1]);

136 
d©a
 = (
u8
 *)
	`kmÆloc
(
size
, 
GFP_KERNEL
);

137 i‡(
d©a
 =
NULL
) {

138  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Allocate buffer forÑead data failed\n");

141 
	`˘s_öfo
("Ród fúmw¨êªgi°î from 0x%04x sizê%u", 
addr
, 
size
);

142 
	`˘s_lock_devi˚
(
˘s_dev
);

143 
ªt
 = 
	`˘s_fw_ªg_ªadsb
(
˘s_dev
, 
addr
, 
d©a
, (
size_t
)
size
);

144 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

145 i‡(
ªt
) {

146 
cou¡
 = 
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

148 
addr
, 
size
, 
ªt
);

149 
îr_‰ì_d©a
;

152 
ªmaöög
 = 
size
;

153 
i
 = 0; i < 
size
 && 
cou¡
 <
PAGE_SIZE
; i +
PRINT_ROW_SIZE
) {

154 
size_t
 
löñí
 = 
	`mö
((size_t)
ªmaöög
, (size_t)
PRINT_ROW_SIZE
);

155 
ªmaöög
 -
PRINT_ROW_SIZE
;

157 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, "%04x: ", 
addr
);

160 
	`hex_dump_to_buf„r
(
d©a
 + 
i
, 
löñí
, 
PRINT_ROW_SIZE
, 1,

161 
buf
 + 
cou¡
, 
PAGE_SIZE
 - cou¡, 
åue
);

162 
cou¡
 +
	`°æí
(
buf
 + count);

164 i‡(
cou¡
 < 
PAGE_SIZE
) {

165 
buf
[
cou¡
++] = '\n';

166 
addr
 +
PRINT_ROW_SIZE
;

172 
îr_‰ì_d©a
:

173 
	`k‰ì
(
d©a
);

175  
cou¡
;

176 #unde‡
PRINT_ROW_SIZE


177 
	}
}

180 
ssize_t
 
	$ªad_fúmw¨e_ªgi°î_°‹e
(
devi˚
 *
dev
,

181 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

183 
	`∑r£_¨g
(
buf
, 
cou¡
);

185  (
¨gc
 =0 ? 0 : 
cou¡
);

186 
	}
}

187 
DEVICE_ATTR
(
ªad_ªg
, 
S_IWUSR
 | 
S_IRUSR
,

188 
ªad_fúmw¨e_ªgi°î_show
, 
ªad_fúmw¨e_ªgi°î_°‹e
);

192 
ssize_t
 
	$ªad_hw_ªg_show
(
devi˚
 *
dev
,

193 
devi˚_©åibuã
 *
©å
, *
buf
)

195 
	#PRINT_ROW_SIZE
 (16)

	)

196 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

197 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

198 
u32
 
addr
, 
size
, 
i
, 
ªmaöög
;

199 
u8
 *
d©a
 = 
NULL
;

200 
ssize_t
 
cou¡
 = 0;

201 
ªt
;

203 
	`˘s_öfo
("Read hwÑegister");

205 i‡(
¨gc
 != 2) {

206  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

209 " 2. c©Ñód_hw_ªg\n", 
¨gc
);

212 
ªt
 = 
	`k°πou32
(
¨gv
[0], 0, &
addr
);

213 i‡(
ªt
) {

214  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆidáddªss: %s\n", 
¨gv
[0]);

216 
ªt
 = 
	`k°πou32
(
¨gv
[1], 0, &
size
);

217 i‡(
ªt
) {

218  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid size: %s\n", 
¨gv
[1]);

221 
d©a
 = (
u8
 *)
	`kmÆloc
(
size
, 
GFP_KERNEL
);

222 i‡(
d©a
 =
NULL
) {

223  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Allocate buffer forÑead data failed\n");

226 
	`˘s_öfo
("Ród hwÑegi°î from 0x%08x sizê%u", 
addr
, 
size
);

227 
	`˘s_lock_devi˚
(
˘s_dev
);

228 
ªt
 = 
	`˘s_hw_ªg_ªadsb
(
˘s_dev
, 
addr
, 
d©a
, 
size
);

229 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

231 i‡(
ªt
) {

232 
cou¡
 = 
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Ród hwÑegi°î faûed %d", 
ªt
);

233 
îr_‰ì_d©a
;

236 
ªmaöög
 = 
size
;

237 
i
 = 0; i < 
size
 && 
cou¡
 <
PAGE_SIZE
; i +
PRINT_ROW_SIZE
) {

238 
size_t
 
löñí
 = 
	`mö
((size_t)
ªmaöög
, (size_t)
PRINT_ROW_SIZE
);

239 
ªmaöög
 -
PRINT_ROW_SIZE
;

241 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count, "%04x-%04x: ",

242 (
u16
)(
addr
 >> 16), (u16)addr);

245 
	`hex_dump_to_buf„r
(
d©a
 + 
i
, 
löñí
, 
PRINT_ROW_SIZE
, 1,

246 
buf
 + 
cou¡
, 
PAGE_SIZE
 - cou¡, 
åue
);

247 
cou¡
 +
	`°æí
(
buf
 + count);

249 i‡(
cou¡
 < 
PAGE_SIZE
) {

250 
buf
[
cou¡
++] = '\n';

251 
addr
 +
PRINT_ROW_SIZE
;

257 
îr_‰ì_d©a
:

258 
	`k‰ì
(
d©a
);

260  
cou¡
;

261 #unde‡
PRINT_ROW_SIZE


262 
	}
}

265 
ssize_t
 
	$ªad_hw_ªg_°‹e
(
devi˚
 *
dev
,

266 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

268 
	`∑r£_¨g
(
buf
, 
cou¡
);

270  (
¨gc
 =0 ? 0 : 
cou¡
);

271 
	}
}

273 
DEVICE_ATTR
(
ªad_hw_ªg
, 
S_IRUSR
 | 
S_IWUSR
, 
ªad_hw_ªg_show
, 
ªad_hw_ªg_°‹e
);

275 
ssize_t
 
	$wrôe_hw_ªg_°‹e
(
devi˚
 *
dev
,

276 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

278 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

279 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

280 
u32
 
addr
;

281 
i
, 
ªt
;

282 
u8
 *
d©a
 = 
NULL
;

284 
	`∑r£_¨g
(
buf
, 
cou¡
);

286 
	`˘s_öfo
("Write hwÑegister");

288 i‡(
¨gc
 < 2) {

289 
	`˘s_îr
("Toÿ„wárg†%d", 
¨gc
);

290  -
EFAULT
;

293 
ªt
 = 
	`k°πou32
(
¨gv
[0], 0, &
addr
);

294 i‡(
ªt
) {

295 
	`˘s_îr
("InvÆidáddªs†%s", 
¨gv
[0]);

296  -
EINVAL
;

299 
d©a
 = (
u8
 *)
	`kmÆloc
(
¨gc
 - 1, 
GFP_KERNEL
);

300 i‡(
d©a
 =
NULL
) {

301 
	`˘s_îr
("Allocate buffer for write data failed\n");

302  -
ENOMEM
;

305 
i
 = 1; i < 
¨gc
; i++) {

306 
ªt
 = 
	`k°πou8
(
¨gv
[
i
], 0, 
d©a
 + i - 1);

307 i‡(
ªt
) {

308 
	`˘s_îr
("InvÆid vÆuê%s", 
¨gv
[
i
]);

309 
‰ì_d©a
;

313 
	`˘s_öfo
("WrôêhwÑegi°î from 0x%08x sizê%u", 
addr
, 
¨gc
 - 1);

315 
	`˘s_lock_devi˚
(
˘s_dev
);

316 
ªt
 = 
	`˘s_hw_ªg_wrôesb
(
˘s_dev
, 
addr
, 
d©a
, 
¨gc
 - 1);

317 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

319 i‡(
ªt
) {

320 
	`˘s_îr
("WrôêhwÑegi°î faûed %d", 
ªt
);

323 
‰ì_d©a
:

324 
	`k‰ì
(
d©a
);

326  (
ªt
 < 0 ?Ñë : 
cou¡
);

327 
	}
}

329 
DEVICE_ATTR
(
wrôe_hw_ªg
, 
S_IWUSR
, 
NULL
, 
wrôe_hw_ªg_°‹e
);

332 
ssize_t
 
	$cuº_fúmw¨e_vîsi⁄_show
(
devi˚
 *
dev
,

333 
devi˚_©åibuã
 *
©å
, *
buf
)

335 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

337  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Current firmware version: %04x\n",

338 
˘s_d©a
->
˘s_dev
.
fwd©a
.
vîsi⁄
);

339 
	}
}

340 
DEVICE_ATTR
(
cuº_vîsi⁄
, 
S_IRUGO
, 
cuº_fúmw¨e_vîsi⁄_show
, 
NULL
);

342 
ssize_t
 
	$cuº_ddi_vîsi⁄_show
(
devi˚
 *
dev
,

343 
devi˚_©åibuã
 *
©å
, *
buf
)

345 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

347  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Current ddi version: %02x\n",

348 
˘s_d©a
->
˘s_dev
.
fwd©a
.
ddi_vîsi⁄
);

349 
	}
}

350 
DEVICE_ATTR
(
cuº_ddi_vîsi⁄
, 
S_IRUGO
, 
cuº_ddi_vîsi⁄_show
, 
NULL
);

352 
ssize_t
 
	$rows_show
(
devi˚
 *
dev
,

353 
devi˚_©åibuã
 *
©å
, *
buf
)

355 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

357  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "NumÑows: %u\n",

358 
˘s_d©a
->
˘s_dev
.
fwd©a
.
rows
);

359 
	}
}

360 
DEVICE_ATTR
(
rows
, 
S_IRUGO
, 
rows_show
, 
NULL
);

362 
ssize_t
 
	$cﬁs_show
(
devi˚
 *
dev
,

363 
devi˚_©åibuã
 *
©å
, *
buf
)

365 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

367  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Num cols: %u\n",

368 
˘s_d©a
->
˘s_dev
.
fwd©a
.
cﬁs
);

369 
	}
}

370 
DEVICE_ATTR
(
cﬁs
, 
S_IRUGO
, 
cﬁs_show
, 
NULL
);

372 
ssize_t
 
	$ªs_x_show
(
devi˚
 *
dev
,

373 
devi˚_©åibuã
 *
©å
, *
buf
)

375 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

377  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "X Resolution: %u\n",

378 
˘s_d©a
->
˘s_dev
.
fwd©a
.
ªs_x
);

379 
	}
}

380 
DEVICE_ATTR
(
ªs_x
, 
S_IRUGO
, 
ªs_x_show
, 
NULL
);

382 
ssize_t
 
	$ªs_y_show
(
devi˚
 *
dev
,

383 
devi˚_©åibuã
 *
©å
, *
buf
)

385 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

387  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Y Resolution: %u\n",

388 
˘s_d©a
->
˘s_dev
.
fwd©a
.
ªs_y
);

389 
	}
}

390 
DEVICE_ATTR
(
ªs_y
, 
S_IRUGO
, 
ªs_y_show
, 
NULL
);

392 
ssize_t
 
	$esd_¥Ÿe˘i⁄_show
(
devi˚
 *
dev
,

393 
devi˚_©åibuã
 *
©å
, *
buf
)

395 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

396 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

397 
ªt
;

398 
u8
 
esd_¥Ÿe˘i⁄
;

400 
	`˘s_lock_devi˚
(
˘s_dev
);

401 
ªt
 = 
	`˘s_fw_ªg_ªadb
(&
˘s_d©a
->
˘s_dev
,

402 
CTS_DEVICE_FW_REG_ESD_PROTECTION
, &
esd_¥Ÿe˘i⁄
);

403 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

404 i‡(
ªt
) {

405  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

406 "Ród fúmw¨êESDÖrŸe˘i⁄Ñegi°î faûed %d\n", 
ªt
);

409  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "ESDÖrŸe˘i⁄: %u\n", 
esd_¥Ÿe˘i⁄
);

410 
	}
}

411 
DEVICE_ATTR
(
esd_¥Ÿe˘i⁄
, 
S_IRUGO
, 
esd_¥Ÿe˘i⁄_show
, 
NULL
);

413 
ssize_t
 
	$m⁄ô‹_mode_show
(
devi˚
 *
dev
,

414 
devi˚_©åibuã
 *
©å
, *
buf
)

416 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

417 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

418 
ªt
;

419 
u8
 
vÆue
;

421 
	`˘s_lock_devi˚
(
˘s_dev
);

422 
ªt
 = 
	`˘s_fw_ªg_ªadb
(&
˘s_d©a
->
˘s_dev
,

423 
CTS_DEVICE_FW_REG_FLAG_BITS
, &
vÆue
);

424 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

425 i‡(
ªt
) {

426  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

427 "Ród fúmw¨êm⁄ô‹É«bÀÑegi°î faûed %d\n", 
ªt
);

430  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Monitor mode: %s\n",

431 
vÆue
 & 
	`BIT
(0) ? "Enable" : "Disable");

432 
	}
}

434 
ssize_t
 
	$m⁄ô‹_mode_°‹e
(
devi˚
 *
dev
,

435 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

437 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

438 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

439 
ªt
;

440 
u8
 
vÆue
, 
íabÀ
 = 0;

442 i‡(
buf
[0] == 'Y' || buf[0] == 'y' || buf[0] == '1') {

443 
íabÀ
 = 1;

446 
	`˘s_öfo
("Write firmware monitor modeÅo '%c', %s",

447 
buf
[0], 
íabÀ
 ? "Enable" : "Disable");

449 
	`˘s_lock_devi˚
(
˘s_dev
);

450 
ªt
 = 
	`˘s_fw_ªg_ªadb
(&
˘s_d©a
->
˘s_dev
,

451 
CTS_DEVICE_FW_REG_FLAG_BITS
, &
vÆue
);

452 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

453 i‡(
ªt
) {

454 
	`˘s_îr
("Wrôêfúmw¨êm⁄ô‹É«bÀÑegi°î faûed %d", 
ªt
);

455  -
EIO
;

458 i‡((
vÆue
 & 
	`BIT
(0)Ë&& 
íabÀ
) {

459 
	`˘s_öfo
("Monitor modeálreadyÉnabled");

460 } i‡((
vÆue
 & 
	`BIT
(0)Ë=0 && 
íabÀ
 == 0) {

461 
	`˘s_öfo
("Monitor modeálready disabled");

463 i‡(
íabÀ
) {

464 
vÆue
 |
	`BIT
(0);

466 
vÆue
 &~
	`BIT
(0);

469 
	`˘s_lock_devi˚
(
˘s_dev
);

470 
ªt
 = 
	`˘s_fw_ªg_wrôeb
(&
˘s_d©a
->
˘s_dev
,

471 
CTS_DEVICE_FW_REG_FLAG_BITS
, 
vÆue
);

472 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

473 i‡(
ªt
) {

474 
	`˘s_îr
("Wrôêfúmw¨êm⁄ô‹É«bÀÑegi°î faûed %d", 
ªt
);

475  -
EIO
;

479  
cou¡
;

480 
	}
}

481 
DEVICE_ATTR
(
m⁄ô‹_mode
, 
S_IRUGO
, 
m⁄ô‹_mode_show
, 
m⁄ô‹_mode_°‹e
);

483 
ssize_t
 
	$auto_com≥nßã_show
(
devi˚
 *
dev
,

484 
devi˚_©åibuã
 *
©å
, *
buf
)

486 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

487 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

488 
ªt
;

489 
u8
 
vÆue
;

491 
	`˘s_lock_devi˚
(
˘s_dev
);

492 
ªt
 = 
	`˘s_fw_ªg_ªadb
(&
˘s_d©a
->
˘s_dev
,

493 
CTS_DEVICE_FW_REG_AUTO_CALIB_COMP_CAP_ENABLE
, &
vÆue
);

494 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

495 i‡(
ªt
) {

496  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

497 "Ródáutÿcom≥nßãÉ«bÀÑegi°î faûed %d\n", 
ªt
);

500  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

501 "Autÿcom≥nßã: %s\n", 
vÆue
 ? "Enable" : "Disable");

502 
	}
}

503 
DEVICE_ATTR
(
auto_com≥nßã
, 
S_IRUGO
, 
auto_com≥nßã_show
, 
NULL
);

505 #ifde‡
CFG_CTS_DRIVER_BUILTIN_FIRMWARE


506 
ssize_t
 
	$drivî_buûtö_fúmw¨e_show
(
devi˚
 *
dev
,

507 
devi˚_©åibuã
 *
©å
, *
buf
)

509 
i
, 
cou¡
 = 0;

511 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

513 
	`˘s_gë_num_drivî_buûtö_fúmw¨e
());

515 
i
 = 0; i < 
	`˘s_gë_num_drivî_buûtö_fúmw¨e
(); i++) {

516 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
 =

517 
	`˘s_ªque°_drivî_buûtö_fúmw¨e_by_ödex
(
i
);

518 i‡(
fúmw¨e
) {

519 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

521 
i
, 
fúmw¨e
->
hwid
, fúmw¨e->
fwid
, 
	`FIRMWARE_VERSION
(firmware),

522 
fúmw¨e
->
size
, fúmw¨e->
«me
);

524 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

525 "%-2d: INVALID\n", 
i
);

529  
cou¡
;

530 
	}
}

533 
ssize_t
 
	$drivî_buûtö_fúmw¨e_°‹e
(
devi˚
 *
dev
,

534 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

536 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

537 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

538 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
;

539 
boﬁ
 
to_Êash
 = 
åue
;

540 
ªt
, 
ödex
 = -1;

542 
	`∑r£_¨g
(
buf
, 
cou¡
);

544 i‡(
¨gc
 != 1 &&árgc != 2) {

545 
	`˘s_îr
("InvalidÇumárgs %d\n"

546 "Échÿödex/«mê[Êash/§am] > drivî_buûtö_fúmw¨e\n", 
¨gc
);

547  -
EFAULT
;

550 i‡(
	`isdigô
(*
¨gv
[0])) {

551 
ödex
 = 
	`sim∂e_°πoul
(
¨gv
[0], 
NULL
, 0);

554 i‡(
¨gc
 > 1) {

555 i‡(
	`°∫ˇ£cmp
(
¨gv
[1], "flash", 5) == 0) {

556 
to_Êash
 = 
åue
;

557 } i‡(
	`°∫ˇ£cmp
(
¨gv
[1], "sram", 4) == 0) {

558 
to_Êash
 = 
Ál£
;

560 
	`˘s_îr
("InvÆidÜoˇti⁄ '%s', mu° bê'Êash' o∏'§am'", 
¨gv
[1]);

561  -
EINVAL
;

565 
	`˘s_öfo
("Update driver builtin firmware '%s'Åo %s",

566 
¨gv
[1], 
to_Êash
 ? "flash" : "sram");

568 i‡(
ödex
 >0 && index < 
	`˘s_gë_num_drivî_buûtö_fúmw¨e
()) {

569 
fúmw¨e
 = 
	`˘s_ªque°_drivî_buûtö_fúmw¨e_by_ödex
(
ödex
);

571 
fúmw¨e
 = 
	`˘s_ªque°_drivî_buûtö_fúmw¨e_by_«me
(
¨gv
[0]);

574 i‡(
fúmw¨e
) {

575 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

576 i‡(
ªt
) {

577 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

578  
ªt
;

581 
	`˘s_lock_devi˚
(
˘s_dev
);

582 
ªt
 = 
	`˘s_upd©e_fúmw¨e
(
˘s_dev
, 
fúmw¨e
, 
to_Êash
);

583 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

585 i‡(
ªt
) {

586 
	`˘s_îr
("Upd©êfúmw¨êÁûed %d", 
ªt
);

587 
îr_°¨t_devi˚
;

590 
ªt
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

591 i‡(
ªt
) {

592 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
ªt
);

593  
ªt
;

596 
	`˘s_îr
("Fúmw¨ê'%s' NOT found", 
¨gv
[0]);

597  -
ENOENT
;

600  
cou¡
;

602 
îr_°¨t_devi˚
:

603 
	`˘s_°¨t_devi˚
(
˘s_dev
);

605  
ªt
;

606 
	}
}

607 
DEVICE_ATTR
(
drivî_buûtö_fúmw¨e
, 
S_IWUSR
 | 
S_IRUGO
,

608 
drivî_buûtö_fúmw¨e_show
, 
drivî_buûtö_fúmw¨e_°‹e
);

611 #ifde‡
CFG_CTS_FIRMWARE_IN_FS


613 
ssize_t
 
	$upd©e_fúmw¨e_‰om_fûe_°‹e
(
devi˚
 *
dev
,

614 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

616 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

617 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

618 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
;

619 
boﬁ
 
to_Êash
 = 
åue
;

620 
ªt
;

623 
	`∑r£_¨g
(
buf
, 
cou¡
);

625 i‡(
¨gc
 > 2) {

626 
	`˘s_îr
("InvalidÇumárgs %d\n"

627 "Échÿfûï©h [Êash/§am] > upd©e_‰om_fûe\n", 
¨gc
);

628  -
EFAULT
;

629 } i‡(
¨gc
 > 1) {

630 i‡(
	`°∫ˇ£cmp
(
¨gv
[1], "flash", 5) == 0) {

631 
to_Êash
 = 
åue
;

632 } i‡(
	`°∫ˇ£cmp
(
¨gv
[1], "sram", 4) == 0) {

633 
to_Êash
 = 
Ál£
;

635 
	`˘s_îr
("InvÆidÜoˇti⁄ '%s', mu° bê'Êash' o∏'§am'", 
¨gv
[1]);

636  -
EINVAL
;

640 
	`˘s_öfo
("Upd©êfúmw¨ê‰om fûê'%s'", 
¨gv
[0]);

642 
fúmw¨e
 = 
	`˘s_ªque°_fúmw¨e_‰om_fs
(
¨gv
[0]);

643 i‡(
fúmw¨e
 =
NULL
) {

644 
	`˘s_îr
("Reque° fúmw¨ê‰om fûê'%s' faûed", 
¨gv
[0]);

645  -
ENOENT
;

648 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

649 i‡(
ªt
) {

650 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

651 
îr_ªÀa£_fúmw¨e
;

654 
	`˘s_lock_devi˚
(
˘s_dev
);

655 
ªt
 = 
	`˘s_upd©e_fúmw¨e
(
˘s_dev
, 
fúmw¨e
, 
to_Êash
);

656 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

658 i‡(
ªt
) {

659 
	`˘s_îr
("Upd©êfúmw¨êÁûed %d", 
ªt
);

660 
îr_ªÀa£_fúmw¨e
;

663 
ªt
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

664 i‡(
ªt
) {

665 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
ªt
);

666 
îr_ªÀa£_fúmw¨e
;

669  
cou¡
;

671 
îr_ªÀa£_fúmw¨e
:

672 
	`˘s_ªÀa£_fúmw¨e
(
fúmw¨e
);

674  
ªt
;

675 
	}
}

676 
DEVICE_ATTR
(
upd©e_‰om_fûe
, 
S_IWUSR
, 
NULL
, 
upd©e_fúmw¨e_‰om_fûe_°‹e
);

679 
ssize_t
 
	$upd©ög_show
(
devi˚
 *
dev
,

680 
devi˚_©åibuã
 *
©å
, *
buf
)

682 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

684  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Updating: %s\n",

685 
˘s_d©a
->
˘s_dev
.
πd©a
.
upd©ög
 ? "Y" : "N");

686 
	}
}

687 
DEVICE_ATTR
(
upd©ög
, 
S_IRUGO
, 
upd©ög_show
, 
NULL
);

689 
©åibuã
 *
	g˘s_dev_fúmw¨e_©ts
[] = {

690 &
dev_©å_cuº_vîsi⁄
.
©å
,

691 &
dev_©å_cuº_ddi_vîsi⁄
.
©å
,

692 &
dev_©å_rows
.
©å
,

693 &
dev_©å_cﬁs
.
©å
,

694 &
dev_©å_ªs_x
.
©å
,

695 &
dev_©å_ªs_y
.
©å
,

696 &
dev_©å_esd_¥Ÿe˘i⁄
.
©å
,

697 &
dev_©å_m⁄ô‹_mode
.
©å
,

698 &
dev_©å_auto_com≥nßã
.
©å
,

699 #ifde‡
CFG_CTS_DRIVER_BUILTIN_FIRMWARE


700 &
dev_©å_drivî_buûtö_fúmw¨e
.
©å
,

702 #ifde‡
CFG_CTS_FIRMWARE_IN_FS


703 &
dev_©å_upd©e_‰om_fûe
.
©å
,

705 &
dev_©å_upd©ög
.
©å
,

706 
NULL


709 c⁄° 
©åibuã_group
 
	g˘s_dev_fúmw¨e_©å_group
 = {

710 .
«me
 = "cts_firmware",

711 .
	g©ås
 = 
˘s_dev_fúmw¨e_©ts
,

714 
ssize_t
 
	$Êash_öfo_show
(
devi˚
 *
dev
,

715 
devi˚_©åibuã
 *
©å
, *
buf
)

717 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

718 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

719 c⁄° 
˘s_Êash
 *
Êash
;

721 i‡(
˘s_dev
->
Êash
 =
NULL
) {

722 
boﬁ
 
¥ogøm_mode
;

723 
boﬁ
 
íabÀd
;

724 
ªt
;

726 
¥ogøm_mode
 = 
	`˘s_is_devi˚_¥ogøm_mode
(
˘s_dev
);

727 
íabÀd
 = 
	`˘s_is_devi˚_íabÀd
(
˘s_dev
);

729 
ªt
 = 
	`˘s_¥ï¨e_Êash_›î©i⁄
(
˘s_dev
);

730 i‡(
ªt
) {

731  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Pª∑ª fœsh o≥øti⁄ faûed %d", 
ªt
);

734 
	`˘s_po°_Êash_›î©i⁄
(
˘s_dev
);

736 i‡(!
¥ogøm_mode
) {

737 
ªt
 = 
	`˘s_íãr_n‹mÆ_mode
(
˘s_dev
);

738 i‡(
ªt
) {

739  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "E¡îÇ‹mÆ modêÁûed %d", 
ªt
);

743 i‡(
íabÀd
) {

744 
ªt
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

745 i‡(
ªt
) {

746  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Sèπ devi˚ faûed %d", 
ªt
);

750 i‡(
˘s_dev
->
Êash
 =
NULL
) {

751  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "FlashÇot found\n");

755 
Êash
 = 
˘s_dev
->flash;

756  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

763 
Êash
->
«me
, fœsh->
jedec_id
, fœsh->
∑ge_size
,

764 
Êash
->
£˘‹_size
, fœsh->
block_size
, fœsh->
tŸÆ_size
);

765 
	}
}

766 
DEVICE_ATTR
(
öfo
, 
S_IRUGO
, 
Êash_öfo_show
, 
NULL
);

768 
ssize_t
 
	$ªad_Êash_show
(
devi˚
 *
dev
,

769 
devi˚_©åibuã
 *
©å
, *
buf
)

771 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

772 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

773 
u32
 
Êash_addr
, 
size
, 
i
, 
ªmaöög
;

774 
u8
 *
d©a
 = 
NULL
;

775 
ssize_t
 
cou¡
 = 0;

776 
ªt
;

777 
boﬁ
 
¥ogøm_mode
;

778 
boﬁ
 
íabÀd
;

779 
loff_t
 
pos
 = 0;

781 i‡(
¨gc
 != 2 &&árgc != 3) {

782  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆidÇumárg†%d\n", 
¨gc
);

785 
ªt
 = 
	`k°πou32
(
¨gv
[0], 0, &
Êash_addr
);

786 i‡(
ªt
) {

787  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid fœsháddr: %s\n", 
¨gv
[0]);

789 
ªt
 = 
	`k°πou32
(
¨gv
[1], 0, &
size
);

790 i‡(
ªt
) {

791  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid size: %s\n", 
¨gv
[1]);

794 
d©a
 = (
u8
 *)
	`kmÆloc
(
size
, 
GFP_KERNEL
);

795 i‡(
d©a
 =
NULL
) {

796  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Allocate buffer forÑead data failed\n");

799 
	`˘s_öfo
("Read flash from 0x%06x size %u%s%s",

800 
Êash_addr
, 
size
, 
¨gc
 == 3 ? "Åo file " : "",

801 
¨gc
 =3 ? 
¨gv
[2] : "");

803 
	`˘s_lock_devi˚
(
˘s_dev
);

804 
¥ogøm_mode
 = 
	`˘s_is_devi˚_¥ogøm_mode
(
˘s_dev
);

805 
íabÀd
 = 
	`˘s_is_devi˚_íabÀd
(
˘s_dev
);

807 
ªt
 = 
	`˘s_¥ï¨e_Êash_›î©i⁄
(
˘s_dev
);

808 i‡(
ªt
) {

809 
cou¡
 +
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Pª∑ª fœsh o≥øti⁄ faûed %d", 
ªt
);

810 
îr_‰ì_d©a
;

813 
ªt
 = 
	`˘s_ªad_Êash
(
˘s_dev
, 
Êash_addr
, 
d©a
, 
size
);

814 i‡(
ªt
) {

815 
cou¡
 = 
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Ród fœsh d©®Áûed %d\n", 
ªt
);

816 
îr_po°_Êash_›î©i⁄
;

819 i‡(
¨gc
 == 3) {

820 
fûe
 *file;

822 
	`˘s_öfo
("WrôêÊash d©®tÿfûê'%s'", 
¨gv
[2]);

824 
fûe
 = 
	`fûp_›í
(
¨gv
[2], 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

825 i‡(
	`IS_ERR
(
fûe
)) {

826 
cou¡
 +
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Open file '%s' failed %ld",

827 
¨gv
[2], 
	`PTR_ERR
(
fûe
));

828 
îr_po°_Êash_›î©i⁄
;

830 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,14,0)

831 
ªt
 = 
	`kî√l_wrôe
(
fûe
, 
d©a
, 
size
, &
pos
);

833 
ªt
 = 
	`kî√l_wrôe
(
fûe
, 
d©a
, 
size
, 
pos
);

835 i‡(
ªt
 !
size
) {

836 
cou¡
 +
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Write flash dataÅo file '%s' failed %d",

837 
¨gv
[2], 
ªt
);

840 
ªt
 = 
	`fûp_˛o£
(
fûe
, 
NULL
);

841 i‡(
ªt
) {

842 
cou¡
 +
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Clo£ fûê'%s' faûed %d", 
¨gv
[2], 
ªt
);

845 
	#PRINT_ROW_SIZE
 (16)

	)

846 
ªmaöög
 = 
size
;

847 
i
 = 0; i < 
size
 && 
cou¡
 <
PAGE_SIZE
; i +
PRINT_ROW_SIZE
) {

848 
size_t
 
löñí
 = 
	`mö
((size_t)
ªmaöög
, (size_t)
PRINT_ROW_SIZE
);

849 
ªmaöög
 -
PRINT_ROW_SIZE
;

851 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count - 1,

852 "%04x-%04x: ", 
Êash_addr
 >> 16, flash_addr & 0xFFFF);

854 
	`hex_dump_to_buf„r
(
d©a
 + 
i
, 
löñí
, 
PRINT_ROW_SIZE
, 1,

855 
buf
 + 
cou¡
, 
PAGE_SIZE
 - cou¡ - 1, 
åue
);

856 
cou¡
 +
	`°æí
(
buf
 + count);

857 
buf
[
cou¡
++] = '\n';

858 
Êash_addr
 +
löñí
;

859 #unde‡
PRINT_ROW_SIZE


863 
îr_po°_Êash_›î©i⁄
:

864 
	`˘s_po°_Êash_›î©i⁄
(
˘s_dev
);

866 i‡(!
¥ogøm_mode
) {

867 
r
 = 
	`˘s_íãr_n‹mÆ_mode
(
˘s_dev
);

868 i‡(
r
) {

869 
cou¡
 +
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "E¡îÇ‹mÆ modêÁûed %d", 
r
);

873 i‡(
íabÀd
) {

874 
r
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

875 i‡(
r
) {

876 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

877  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Sèπ devi˚ faûed %d", 
r
);

880 
îr_‰ì_d©a
:

881 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

882 
	`k‰ì
(
d©a
);

884  (
ªt
 < 0 ?Ñë : 
cou¡
);

885 
	}
}

888 
ssize_t
 
	$ªad_Êash_°‹e
(
devi˚
 *
dev
,

889 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

891 
	`∑r£_¨g
(
buf
, 
cou¡
);

893  
cou¡
;

894 
	}
}

895 
DEVICE_ATTR
(
ªad
, 
S_IWUSR
 | 
S_IRUGO
, 
ªad_Êash_show
, 
ªad_Êash_°‹e
);

898 
ssize_t
 
	$îa£_Êash_°‹e
(
devi˚
 *
dev
,

899 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

901 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

902 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

903 
u32
 
Êash_addr
, 
size
;

904 
ªt
;

905 
boﬁ
 
¥ogøm_mode
;

906 
boﬁ
 
íabÀd
;

908 
	`∑r£_¨g
(
buf
, 
cou¡
);

910 i‡(
¨gc
 != 2) {

911 
	`˘s_îr
("InvÆidÇumárg†%d", 
¨gc
);

912  -
EFAULT
;

915 
ªt
 = 
	`k°πou32
(
¨gv
[0], 0, &
Êash_addr
);

916 i‡(
ªt
) {

917 
	`˘s_îr
("InvÆid fœsháddr: %s", 
¨gv
[0]);

918  -
EINVAL
;

920 
ªt
 = 
	`k°πou32
(
¨gv
[1], 0, &
size
);

921 i‡(
ªt
) {

922 
	`˘s_îr
("InvÆid size: %s", 
¨gv
[1]);

923  -
EINVAL
;

926 
	`˘s_öfo
("Eø£ fœsh from 0x%06x sizê%u", 
Êash_addr
, 
size
);

928 
	`˘s_lock_devi˚
(
˘s_dev
);

929 
¥ogøm_mode
 = 
	`˘s_is_devi˚_¥ogøm_mode
(
˘s_dev
);

930 
íabÀd
 = 
	`˘s_is_devi˚_íabÀd
(
˘s_dev
);

932 
ªt
 = 
	`˘s_¥ï¨e_Êash_›î©i⁄
(
˘s_dev
);

933 i‡(
ªt
) {

934 
	`˘s_îr
("Pª∑ª fœsh o≥øti⁄ faûed %d", 
ªt
);

935 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

936  
ªt
;

939 
ªt
 = 
	`˘s_îa£_Êash
(
˘s_dev
, 
Êash_addr
, 
size
);

940 i‡(
ªt
) {

941 
	`˘s_îr
("Erase flash from 0x%06x size %u failed %d",

942 
Êash_addr
, 
size
, 
ªt
);

943 
îr_po°_Êash_›î©i⁄
;

946 
îr_po°_Êash_›î©i⁄
:

947 
	`˘s_po°_Êash_›î©i⁄
(
˘s_dev
);

949 i‡(!
¥ogøm_mode
) {

950 
r
 = 
	`˘s_íãr_n‹mÆ_mode
(
˘s_dev
);

951 i‡(
r
) {

952 
	`˘s_îr
("E¡îÇ‹mÆ modêÁûed %d", 
r
);

956 i‡(
íabÀd
) {

957 
r
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

958 i‡(
r
) {

959 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
r
);

962 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

964  (
ªt
 < 0 ?Ñë : 
cou¡
);

965 
	}
}

966 
DEVICE_ATTR
(
îa£
, 
S_IWUSR
, 
NULL
, 
îa£_Êash_°‹e
);

968 
©åibuã
 *
	g˘s_dev_Êash_©ås
[] = {

969 &
dev_©å_öfo
.
©å
,

970 &
dev_©å_ªad
.
©å
,

971 &
dev_©å_îa£
.
©å
,

973 
NULL


976 c⁄° 
©åibuã_group
 
	g˘s_dev_Êash_©å_group
 = {

977 .
«me
 = "flash",

978 .
	g©ås
 = 
˘s_dev_Êash_©ås
,

981 
ssize_t
 
	$›í_ã°_show
(
devi˚
 *
dev
,

982 
devi˚_©åibuã
 *
©å
, *
buf
)

984 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

985 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

986 
˘s_ã°_∑øm
 
ã°_∑øm
 = {

987 .
Êags
 = 
CTS_TEST_FLAG_VALIDATE_DATA
 |

988 
CTS_TEST_FLAG_VALIDATE_MIN
 |

989 
CTS_TEST_FLAG_STOP_TEST_IF_VALIDATE_FAILED
 |

990 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
,

991 .
num_övÆid_node
 = 0,

992 .
övÆid_nodes
 = 
NULL
,

994 
mö
 = 0;

995 
ªt
;

997 i‡(
¨gc
 != 1) {

998  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆidÇumárg†%d\n", 
¨gc
);

1001 
ªt
 = 
	`k°πoöt
(
¨gv
[0], 0, &
mö
);

1002 i‡(
ªt
) {

1003  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid möÅhªs: %s\n", 
¨gv
[0]);

1006 
	`˘s_öfo
("O≥¿ã°,Åhªshﬁd = %u", 
mö
);

1008 
ã°_∑øm
.
mö
 = &min;

1010 
ªt
 = 
	`˘s_ã°_›í
(
˘s_dev
, &
ã°_∑øm
);

1011 i‡(
ªt
) {

1012  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1013 "O≥¿ã° FAILED %d,Åhªshﬁd = %u\n", 
ªt
, 
mö
);

1015  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1016 "O≥¿ã° PASSED,Åhªshﬁd = %u\n", 
mö
);

1018 
	}
}

1022 
ssize_t
 
	$›í_ã°_°‹e
(
devi˚
 *
dev
,

1023 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

1025 
	`∑r£_¨g
(
buf
, 
cou¡
);

1027  
cou¡
;

1028 
	}
}

1029 
DEVICE_ATTR
(
›í_ã°
, 
S_IWUSR
 | 
S_IRUGO
, 
›í_ã°_show
, 
›í_ã°_°‹e
);

1031 
ssize_t
 
	$sh‹t_ã°_show
(
devi˚
 *
dev
,

1032 
devi˚_©åibuã
 *
©å
, *
buf
)

1034 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1035 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1036 
˘s_ã°_∑øm
 
ã°_∑øm
 = {

1037 .
Êags
 = 
CTS_TEST_FLAG_VALIDATE_DATA
 |

1038 
CTS_TEST_FLAG_VALIDATE_MIN
 |

1039 
CTS_TEST_FLAG_STOP_TEST_IF_VALIDATE_FAILED
 |

1040 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
,

1041 .
num_övÆid_node
 = 0,

1042 .
övÆid_nodes
 = 
NULL
,

1044 
mö
 = 0;

1045 
ªt
;

1047 i‡(
¨gc
 != 1) {

1048  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆidÇumárg†%d\n", 
¨gc
);

1051 
ªt
 = 
	`k°πoöt
(
¨gv
[0], 0, &
mö
);

1052 i‡(
ªt
) {

1053  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid möÅhªs: %s\n", 
¨gv
[0]);

1056 
	`˘s_öfo
("Sh‹àã°,Åhªshﬁd = %u", 
mö
);

1058 
ã°_∑øm
.
mö
 = &min;

1060 
ªt
 = 
	`˘s_ã°_sh‹t
(
˘s_dev
, &
ã°_∑øm
);

1061 i‡(
ªt
) {

1062  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1063 "Sh‹àã° FAILED %d,Åhªshﬁd = %u\n", 
ªt
, 
mö
);

1065  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1066 "Sh‹àã° PASSED,Åhªshﬁd = %u\n", 
mö
);

1068 
	}
}

1072 
ssize_t
 
	$sh‹t_ã°_°‹e
(
devi˚
 *
dev
,

1073 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

1075 
	`∑r£_¨g
(
buf
, 
cou¡
);

1077  
cou¡
;

1078 
	}
}

1079 
DEVICE_ATTR
(
sh‹t_ã°
, 
S_IWUSR
 | 
S_IRUGO
,

1080 
sh‹t_ã°_show
, 
sh‹t_ã°_°‹e
);

1082 
ssize_t
 
	$ã°ög_show
(
devi˚
 *
dev
,

1083 
devi˚_©åibuã
 *
©å
, *
buf
)

1085 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1087  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Testting: %s\n",

1088 
˘s_d©a
->
˘s_dev
.
πd©a
.
ã°ög
 ? "Y" : "N");

1089 
	}
}

1090 
DEVICE_ATTR
(
ã°ög
, 
S_IRUGO
, 
ã°ög_show
, 
NULL
);

1092 
ssize_t
 
	$ª£t_pö_ã°_show
(
devi˚
 *
dev
,

1093 
devi˚_©åibuã
 *
©å
, *
buf
)

1095 #ifde‡
CFG_CTS_HAS_RESET_PIN


1096 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1097 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1098 
˘s_ã°_∑øm
 
ã°_∑øm
 = {

1099 .
Êags
 = 0,

1101 
ªt
;

1103 
ªt
 = 
	`˘s_ã°_ª£t_pö
(
˘s_dev
, &
ã°_∑øm
);

1104 i‡(
ªt
) {

1105  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1106 "Re£t-PöÅe° FAIL %d\n", 
ªt
);

1108  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1112  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1115 
	}
}

1116 
DEVICE_ATTR
(
ª£t_pö_ã°
, 
S_IRUGO
, 
ª£t_pö_ã°_show
, 
NULL
);

1118 
ssize_t
 
	$öt_pö_ã°_show
(
devi˚
 *
dev
,

1119 
devi˚_©åibuã
 *
©å
, *
buf
)

1121 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1122 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1123 
˘s_ã°_∑øm
 
ã°_∑øm
 = {

1124 .
Êags
 = 0,

1126 
ªt
;

1128 
ªt
 = 
	`˘s_ã°_öt_pö
(
˘s_dev
, &
ã°_∑øm
);

1129 i‡(
ªt
) {

1130  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1131 "I¡-PöÅe° FAIL %d\n", 
ªt
);

1133  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1136 
	}
}

1137 
DEVICE_ATTR
(
öt_pö_ã°
, 
S_IRUGO
, 
öt_pö_ã°_show
, 
NULL
);

1139 
ssize_t
 
	$com≥nßã_ˇp_ã°_show
(
devi˚
 *
dev
,

1140 
devi˚_©åibuã
 *
©å
, *
buf
)

1142 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1143 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1144 
˘s_ã°_∑øm
 
ã°_∑øm
 = {

1145 .
Êags
 = 
CTS_TEST_FLAG_VALIDATE_DATA
 |

1146 
CTS_TEST_FLAG_VALIDATE_MIN
 |

1147 
CTS_TEST_FLAG_VALIDATE_MAX
 |

1148 
CTS_TEST_FLAG_STOP_TEST_IF_VALIDATE_FAILED
 |

1149 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
,

1150 .
num_övÆid_node
 = 0,

1151 .
övÆid_nodes
 = 
NULL
,

1153 
mö
 = 0, 
max
 = 0;

1154 
ªt
;

1156 i‡(
¨gc
 != 2) {

1157  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvalidÇumárgs\n"

1163 
ªt
 = 
	`k°πoöt
(
¨gv
[0], 0, &
mö
);

1164 i‡(
ªt
) {

1165  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid möÅhªs: %s\n", 
¨gv
[0]);

1168 
ªt
 = 
	`k°πoöt
(
¨gv
[1], 0, &
max
);

1169 i‡(
ªt
) {

1170  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid maxÅhªs: %s\n", 
¨gv
[1]);

1173 
	`˘s_öfo
("Compensate capÅest, min: %u, max: %u",

1174 
mö
, 
max
);

1176 
ã°_∑øm
.
mö
 = &min;

1177 
ã°_∑øm
.
max
 = &max;

1179 
ªt
 = 
	`˘s_ã°_com≥nßã_ˇp
(
˘s_dev
, &
ã°_∑øm
);

1180 i‡(
ªt
) {

1181  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1182 "Com≥nßã c≠Åe° FAILED, mö: %u, max: %u\n", 
mö
, 
max
);

1184  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1185 "Com≥nßã c≠Åe° PASSED, mö: %u, max: %u\n", 
mö
, 
max
);

1187 
	}
}

1191 
ssize_t
 
	$com≥nßã_ˇp_ã°_°‹e
(
devi˚
 *
dev
,

1192 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

1194 
	`∑r£_¨g
(
buf
, 
cou¡
);

1196  
cou¡
;

1197 
	}
}

1198 
DEVICE_ATTR
(
com≥nßã_ˇp_ã°
, 
S_IWUSR
 | 
S_IRUGO
,

1199 
com≥nßã_ˇp_ã°_show
, 
com≥nßã_ˇp_ã°_°‹e
);

1201 
ssize_t
 
	$øwd©a_ã°_show
(
devi˚
 *
dev
,

1202 
devi˚_©åibuã
 *
©å
, *
buf
)

1204 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1205 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1206 
˘s_øwd©a_ã°_¥iv_∑øm
 
¥iv_∑øm
 = {

1207 .
‰ames
 = 16,

1210 
˘s_ã°_∑øm
 
ã°_∑øm
 = {

1211 .
Êags
 = 
CTS_TEST_FLAG_VALIDATE_DATA
 |

1212 
CTS_TEST_FLAG_VALIDATE_MIN
 |

1213 
CTS_TEST_FLAG_VALIDATE_MAX
 |

1214 
CTS_TEST_FLAG_STOP_TEST_IF_VALIDATE_FAILED
 |

1215 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
,

1216 .
num_övÆid_node
 = 0,

1217 .
övÆid_nodes
 = 
NULL
,

1218 .
¥iv_∑øm
 = &priv_param,

1219 .
¥iv_∑øm_size
 = (
¥iv_∑øm
),

1222 
mö_thªs
, 
max_thªs
;

1223 
ªt
;

1225 i‡(
¨gc
 < 2 ||árgc > 3) {

1226  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvalidÇumárgs\n"

1232 
ªt
 = 
	`k°πoöt
(
¨gv
[0], 0, &
mö_thªs
);

1233 i‡(
ªt
) {

1234  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid möÅhªs: %s\n", 
¨gv
[0]);

1237 
ªt
 = 
	`k°πoöt
(
¨gv
[1], 0, &
max_thªs
);

1238 i‡(
ªt
) {

1239  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid maxÅhªs: %s\n", 
¨gv
[1]);

1242 i‡(
¨gc
 > 2) {

1243 
ªt
 = 
	`k°πou32
(
¨gv
[2], 0, &
¥iv_∑øm
.
‰ames
);

1244 i‡(
ªt
) {

1245  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid fømes: %s\n", 
¨gv
[2]);

1249 
	`˘s_öfo
("RawdataÅest, frames: %u min: %d, max: %d",

1250 
¥iv_∑øm
.
‰ames
, 
mö_thªs
, 
max_thªs
);

1252 
ã°_∑øm
.
mö
 = &
mö_thªs
;

1253 
ã°_∑øm
.
max
 = &
max_thªs
;

1255 
ªt
 = 
	`˘s_ã°_øwd©a
(
˘s_dev
, &
ã°_∑øm
);

1256 i‡(
ªt
) {

1257  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1259 
ªt
, 
mö_thªs
, 
max_thªs
);

1261  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1263 
mö_thªs
, 
max_thªs
);

1265 
	}
}

1267 
ssize_t
 
	$øwd©a_ã°_°‹e
(
devi˚
 *
dev
,

1268 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

1270 
	`∑r£_¨g
(
buf
, 
cou¡
);

1272  
cou¡
;

1273 
	}
}

1274 
DEVICE_ATTR
(
øwd©a_ã°
, 
S_IWUSR
 | 
S_IRUGO
,

1275 
øwd©a_ã°_show
, 
øwd©a_ã°_°‹e
);

1277 
ssize_t
 
	$noi£_ã°_show
(
devi˚
 *
dev
,

1278 
devi˚_©åibuã
 *
©å
, *
buf
)

1280 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1281 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1282 
˘s_noi£_ã°_¥iv_∑øm
 
¥iv_∑øm
 = {

1283 .
‰ames
 = 16,

1286 
˘s_ã°_∑øm
 
ã°_∑øm
 = {

1287 .
Êags
 = 
CTS_TEST_FLAG_VALIDATE_DATA
 |

1288 
CTS_TEST_FLAG_VALIDATE_MAX
 |

1289 
CTS_TEST_FLAG_STOP_TEST_IF_VALIDATE_FAILED
 |

1290 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
,

1291 .
num_övÆid_node
 = 0,

1292 .
övÆid_nodes
 = 
NULL
,

1293 .
¥iv_∑øm
 = &priv_param,

1294 .
¥iv_∑øm_size
 = (
¥iv_∑øm
),

1297 
thªshlod
;

1298 
ªt
;

1300 i‡(
¨gc
 < 1 ||árgc > 2) {

1301  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvalidÇumárgs\n"

1307 
ªt
 = 
	`k°πoöt
(
¨gv
[0], 0, &
thªshlod
);

1308 i‡(
ªt
) {

1309  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid möÅhªs: %s\n", 
¨gv
[0]);

1312 i‡(
¨gc
 > 1) {

1313 
ªt
 = 
	`k°πou32
(
¨gv
[1], 0, &
¥iv_∑øm
.
‰ames
);

1314 i‡(
ªt
) {

1315  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvÆid fømes: %s\n", 
¨gv
[1]);

1319 
	`˘s_öfo
("NoiseÅest, frames: %uÅhreshold: %d",

1320 
¥iv_∑øm
.
‰ames
, 
thªshlod
);

1322 
ã°_∑øm
.
max
 = &
thªshlod
;

1324 
ªt
 = 
	`˘s_ã°_noi£
(
˘s_dev
, &
ã°_∑øm
);

1325 i‡(
ªt
) {

1326  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1328 
ªt
, 
thªshlod
);

1330  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1331 "Noi£Åe° PASS,Åhªshﬁd: %u\n", 
thªshlod
);

1333 
	}
}

1335 
ssize_t
 
	$noi£_ã°_°‹e
(
devi˚
 *
dev
,

1336 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

1338 
	`∑r£_¨g
(
buf
, 
cou¡
);

1340  
cou¡
;

1341 
	}
}

1342 
DEVICE_ATTR
(
noi£_ã°
, 
S_IWUSR
 | 
S_IRUGO
,

1343 
noi£_ã°_show
, 
noi£_ã°_°‹e
);

1345 
©åibuã
 *
	g˘s_dev_ã°_©ts
[] = {

1346 &
dev_©å_ã°ög
.
©å
,

1347 &
dev_©å_ª£t_pö_ã°
.
©å
,

1348 &
dev_©å_öt_pö_ã°
.
©å
,

1349 &
dev_©å_øwd©a_ã°
.
©å
,

1350 &
dev_©å_noi£_ã°
.
©å
,

1351 &
dev_©å_›í_ã°
.
©å
,

1352 &
dev_©å_sh‹t_ã°
.
©å
,

1353 &
dev_©å_com≥nßã_ˇp_ã°
.
©å
,

1354 
NULL


1357 c⁄° 
©åibuã_group
 
	g˘s_dev_ã°_©å_group
 = {

1358 .
«me
 = "test",

1359 .
	g©ås
 = 
˘s_dev_ã°_©ts
,

1362 
ssize_t
 
	$ic_ty≥_show
(
devi˚
 *
dev
,

1363 
devi˚_©åibuã
 *
©å
, *
buf
)

1365 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1367  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "IC Type : %s\n",

1368 
˘s_d©a
->
˘s_dev
.
hwd©a
->
«me
);

1369 
	}
}

1370 
DEVICE_ATTR
(
ic_ty≥
, 
S_IRUGO
, 
ic_ty≥_show
, 
NULL
);

1372 
ssize_t
 
	$¥ogøm_mode_show
(
devi˚
 *
dev
,

1373 
devi˚_©åibuã
 *
©å
, *
buf
)

1375 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1377  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Program mode: %s\n",

1378 
˘s_d©a
->
˘s_dev
.
πd©a
.
¥ogøm_mode
 ? "Y" : "N");

1379 
	}
}

1380 
ssize_t
 
	$¥ogøm_mode_°‹e
(
devi˚
 *
dev
,

1381 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

1383 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1384 
ªt
;

1385 
	`∑r£_¨g
(
buf
, 
cou¡
);

1387 i‡(
¨gc
 != 1) {

1388 
	`˘s_îr
("InvÆidÇumárg†%d", 
¨gc
);

1389  -
EFAULT
;

1392 i‡(*
¨gv
[0] ='1' || 
	`tﬁowî
(*argv[0]) == 'y') {

1393 
ªt
 = 
	`˘s_íãr_¥ogøm_mode
(&
˘s_d©a
->
˘s_dev
);

1394 i‡(
ªt
) {

1395 
	`˘s_îr
("E¡îÖrogøm modêÁûed %d", 
ªt
);

1396  
ªt
;

1398 } i‡(*
¨gv
[0] ='0' || 
	`tﬁowî
(*argv[0]) == 'n') {

1399 
ªt
 = 
	`˘s_íãr_n‹mÆ_mode
(&
˘s_d©a
->
˘s_dev
);

1400 i‡(
ªt
) {

1401 
	`˘s_îr
("ExôÖrogøm modêÁûed %d", 
ªt
);

1402  
ªt
;

1405 
	`˘s_îr
("Invalidárgs");

1408  
cou¡
;

1409 
	}
}

1410 
DEVICE_ATTR
(
¥ogøm_mode
, 
S_IWUSR
 | 
S_IRUGO
,

1411 
¥ogøm_mode_show
, 
¥ogøm_mode_°‹e
);

1413 
ssize_t
 
	$øwd©a_show
(
devi˚
 *
dev
,

1414 
devi˚_©åibuã
 *
©å
, *
buf
)

1416 
	#RAWDATA_BUFFER_SIZE
(
˘s_dev
) \

1417 (
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
 * 2)

	)

1419 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1420 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1421 
u16
 *
øwd©a
 = 
NULL
;

1422 
ªt
, 
r
, 
c
, 
cou¡
 = 0;

1423 
u32
 
max
, 
mö
, 
sum
, 
avîage
;

1424 
max_r
, 
max_c
, 
mö_r
, 
mö_c
;

1425 
boﬁ
 
d©a_vÆid
 = 
åue
;

1427 
	`˘s_öfo
("ShowÑawdata");

1429 
øwd©a
 = (
u16
 *)
	`kmÆloc
(
	`RAWDATA_BUFFER_SIZE
(
˘s_dev
), 
GFP_KERNEL
);

1430 i‡(
øwd©a
 =
NULL
) {

1431  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Allocate memory forÑawdata failed\n");

1434 
	`˘s_lock_devi˚
(
˘s_dev
);

1435 
ªt
 = 
	`˘s_íabÀ_gë_øwd©a
(
˘s_dev
);

1436 i‡(
ªt
) {

1437 
cou¡
 +
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "E«bÀÑódÑaw d©®Áûed %d\n", 
ªt
);

1438 
îr_‰ì_øwd©a
;

1441 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_QUIT_GESTURE_MONITOR
);

1442 i‡(
ªt
) {

1443 
cou¡
 +
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Síd cmd QUIT_GESTURE_MONITOR faûed %d\n", 
ªt
);

1444 
îr_‰ì_øwd©a
;

1446 
	`m¶ìp
(50);

1448 
ªt
 = 
	`˘s_gë_øwd©a
(
˘s_dev
, 
øwd©a
);

1449 if(
ªt
) {

1450 
cou¡
 +
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "GëÑaw d©®Áûed %d\n", 
ªt
);

1451 
d©a_vÆid
 = 
Ál£
;

1454 
ªt
 = 
	`˘s_dißbÀ_gë_øwd©a
(
˘s_dev
);

1455 i‡(
ªt
) {

1456 
cou¡
 +
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "DißbÀÑódÑaw d©®Áûed %d\n", 
ªt
);

1460 i‡(
d©a_vÆid
) {

1461 
max
 = 
mö
 = 
øwd©a
[0];

1462 
sum
 = 0;

1463 
max_r
 = 
max_c
 = 
mö_r
 = 
mö_c
 = 0;

1464 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

1465 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1466 
u16
 
vÆ
 = 
øwd©a
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
];

1467 
sum
 +
vÆ
;

1468 i‡(
vÆ
 > 
max
) {

1469 
max
 = 
vÆ
;

1470 
max_r
 = 
r
;

1471 
max_c
 = 
c
;

1472 } i‡(
vÆ
 < 
mö
) {

1473 
mö
 = 
vÆ
;

1474 
mö_r
 = 
r
;

1475 
mö_c
 = 
c
;

1479 
avîage
 = 
sum
 / (
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
);

1481 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

1482 
SPLIT_LINE_STR


1484 
SPLIT_LINE_STR


1485 " | ", 
mö_r
, 
mö_c
, 
mö
, 
max_r
, 
max_c
, 
max
, 
avîage
);

1486 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1487 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, 
COL_NUM_FORMAT_STR
, 
c
);

1489 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, "\n" 
SPLIT_LINE_STR
);

1491 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
 && 
cou¡
 < 
PAGE_SIZE
;Ñ++) {

1492 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, 
ROW_NUM_FORMAT_STR
, 
r
);

1493 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
 && 
cou¡
 < 
PAGE_SIZE
; c++) {

1494 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

1495 
DATA_FORMAT_STR
, 
øwd©a
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
]);

1497 
buf
[
cou¡
++] = '\n';

1501 
îr_‰ì_øwd©a
:

1502 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1503 
	`k‰ì
(
øwd©a
);

1505  (
d©a_vÆid
 ? 
cou¡
 : 
ªt
);

1507 #unde‡
RAWDATA_BUFFER_SIZE


1508 
	}
}

1509 
DEVICE_ATTR
(
øwd©a
, 
S_IRUGO
, 
øwd©a_show
, 
NULL
);

1511 
ssize_t
 
	$diffd©a_show
(
devi˚
 *
dev
,

1512 
devi˚_©åibuã
 *
©å
, *
buf
)

1514 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1515 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1516 
s16
 *
diffd©a
 = 
NULL
;

1517 
ªt
, 
r
, 
c
, 
cou¡
 = 0;

1518 
max
, 
mö
, 
sum
, 
avîage
;

1519 
max_r
, 
max_c
, 
mö_r
, 
mö_c
;

1520 
boﬁ
 
d©a_vÆid
 = 
åue
;

1522 
	`˘s_öfo
("Show diffdata");

1524 
diffd©a
 = (
s16
 *)
	`kmÆloc
(
	`DIFFDATA_BUFFER_SIZE
(
˘s_dev
), 
GFP_KERNEL
);

1525 i‡(
diffd©a
 =
NULL
) {

1526 
	`˘s_îr
("Allocate memory for diffdata failed");

1527  -
ENOMEM
;

1530 
	`˘s_lock_devi˚
(
˘s_dev
);

1531 
ªt
 = 
	`˘s_íabÀ_gë_øwd©a
(
˘s_dev
);

1532 i‡(
ªt
) {

1533 
	`˘s_îr
("E«bÀÑód dif‡d©®Áûed %d", 
ªt
);

1534 
îr_‰ì_diffd©a
;

1537 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_QUIT_GESTURE_MONITOR
);

1538 i‡(
ªt
) {

1539 
	`˘s_îr
("Síd cmd QUIT_GESTURE_MONITOR faûed %d", 
ªt
);

1540 
îr_‰ì_diffd©a
;

1542 
	`m¶ìp
(50);

1544 
ªt
 = 
	`˘s_gë_diffd©a
(
˘s_dev
, 
diffd©a
);

1545 if(
ªt
) {

1546 
	`˘s_îr
("Gë dif‡d©®Áûed %d", 
ªt
);

1547 
d©a_vÆid
 = 
Ál£
;

1550 
ªt
 = 
	`˘s_dißbÀ_gë_øwd©a
(
˘s_dev
);

1551 i‡(
ªt
) {

1552 
	`˘s_îr
("DißbÀÑód dif‡d©®Áûed %d", 
ªt
);

1556 i‡(
d©a_vÆid
) {

1557 
max
 = 
mö
 = 
diffd©a
[0];

1558 
sum
 = 0;

1559 
max_r
 = 
max_c
 = 
mö_r
 = 
mö_c
 = 0;

1560 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

1561 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1562 
s16
 
vÆ
 = 
diffd©a
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
];

1564 
sum
 +
vÆ
;

1565 i‡(
vÆ
 > 
max
) {

1566 
max
 = 
vÆ
;

1567 
max_r
 = 
r
;

1568 
max_c
 = 
c
;

1569 } i‡(
vÆ
 < 
mö
) {

1570 
mö
 = 
vÆ
;

1571 
mö_r
 = 
r
;

1572 
mö_c
 = 
c
;

1576 
avîage
 = 
sum
 / (
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
);

1578 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

1579 
SPLIT_LINE_STR


1581 
SPLIT_LINE_STR


1582 " | ", 
mö_r
, 
mö_c
, 
mö
, 
max_r
, 
max_c
, 
max
, 
avîage
);

1583 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1584 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, 
COL_NUM_FORMAT_STR
, 
c
);

1586 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, "\n" 
SPLIT_LINE_STR
);

1588 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

1589 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, 
ROW_NUM_FORMAT_STR
, 
r
);

1590 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1591 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

1592 
DATA_FORMAT_STR
, 
diffd©a
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
]);

1594 
buf
[
cou¡
++] = '\n';

1598 
îr_‰ì_diffd©a
:

1599 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1600 
	`k‰ì
(
diffd©a
);

1602  (
d©a_vÆid
 ? 
cou¡
 : 
ªt
);

1603 
	}
}

1604 
DEVICE_ATTR
(
diffd©a
, 
S_IRUGO
, 
diffd©a_show
, 
NULL
);

1606 
ssize_t
 
	$m™uÆdiffd©a_show
(
devi˚
 *
dev
,

1607 
devi˚_©åibuã
 *
©å
, *
buf
)

1609 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1610 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1611 
s16
 *
øwd©a
 = 
NULL
;

1612 
ªt
, 
r
, 
c
, 
cou¡
 = 0;

1613 
max
, 
mö
, 
sum
, 
avîage
;

1614 
max_r
, 
max_c
, 
mö_r
, 
mö_c
;

1615 
boﬁ
 
d©a_vÆid
 = 
åue
;

1616 
‰ame
;

1617 
fûe
 *fûê
NULL
;

1618 
i
;

1619 
loff_t
 
pos
 = 0;

1621 
	`˘s_öfo
("Show manualdiff");

1623 i‡(
¨gc
 != 1 &&árgc != 2) {

1624  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "InvalidÇumárgs\n"

1634 i‡(
¨gc
 == 2) {

1635 
ªt
 = 
	`k°πou32
(
¨gv
[0], 0, &
‰ame
);

1636 i‡(
ªt
) {

1637  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Invalid frameÇum\n");

1639 
fûe
 = 
	`fûp_›í
(
¨gv
[1], 
O_RDWR
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

1640 i‡(
	`IS_ERR
(
fûe
)) {

1641  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "C™'à›í fûe:%s", 
¨gv
[1]);

1645 
‰ame
 = 1;

1648 
øwd©a
 = (
s16
 *)
	`kmÆloc
(
	`DIFFDATA_BUFFER_SIZE
(
˘s_dev
), 
GFP_KERNEL
);

1649 i‡(
øwd©a
 =
NULL
) {

1650 
	`˘s_îr
("Allocate memory forÑawdata failed");

1651 
	`fûp_˛o£
(
fûe
, 
NULL
);

1652  -
ENOMEM
;

1655 
	`˘s_lock_devi˚
(
˘s_dev
);

1656 
ªt
 = 
	`˘s_íabÀ_gë_øwd©a
(
˘s_dev
);

1657 i‡(
ªt
) {

1658 
	`˘s_îr
("E«bÀÑódÑaw d©®Áûed %d", 
ªt
);

1659 
îr_‰ì_diffd©a
;

1662 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_QUIT_GESTURE_MONITOR
);

1663 i‡(
ªt
) {

1664 
	`˘s_îr
("Síd cmd QUIT_GESTURE_MONITOR faûed %d", 
ªt
);

1665 
îr_‰ì_diffd©a
;

1667 
	`m¶ìp
(50);

1669 
	`˘s_öfo
("‰amê%d, fûe:%s", 
‰ame
, 
¨gv
[1]);

1670 
i
 = 0; i < 
‰ame
; i++) {

1671 
ªt
 = 
	`˘s_gë_øwd©a
(
˘s_dev
, 
øwd©a
);

1672 if(
ªt
) {

1673 
	`˘s_îr
("GëÑaw d©®Áûed %d", 
ªt
);

1674 
d©a_vÆid
 = 
Ál£
;

1677 
d©a_vÆid
 = 
åue
;

1679 
	`m¶ìp
(50);

1681 i‡(
d©a_vÆid
) {

1682 
max
 = -32768;

1683 
mö
 = 32767;

1684 
sum
 = 0;

1685 
max_r
 = 
max_c
 = 
mö_r
 = 
mö_c
 = 0;

1686 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

1687 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1688 
s16
 
vÆ
;

1690 
øwd©a
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
] -
m™uÆdiff_ba£
[r * cts_dev->fwdata.cols + c];

1691 
vÆ
 = 
øwd©a
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
];

1692 
sum
 +
vÆ
;

1693 i‡(
vÆ
 > 
max
) {

1694 
max
 = 
vÆ
;

1695 
max_r
 = 
r
;

1696 
max_c
 = 
c
;

1697 } i‡(
vÆ
 < 
mö
) {

1698 
mö
 = 
vÆ
;

1699 
mö_r
 = 
r
;

1700 
mö_c
 = 
c
;

1704 
avîage
 = 
sum
 / (
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
);

1705 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

1706 
SPLIT_LINE_STR


1708 
SPLIT_LINE_STR


1709 " | ", 
mö_r
, 
mö_c
, 
mö
, 
max_r
, 
max_c
, 
max
, 
avîage
);

1710 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1711 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡,
PAGE_SIZE
 - cou¡, 
COL_NUM_FORMAT_STR
, 
c
);

1713 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, "\n" 
SPLIT_LINE_STR
);

1715 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

1716 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, 
ROW_NUM_FORMAT_STR
, 
r
);

1717 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1718 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

1719 
DATA_FORMAT_STR
, 
øwd©a
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
]);

1721 
buf
[
cou¡
++] = '\n';

1724 i‡(
¨gc
 == 2) {

1725 
pos
 = 
fûe
->
f_pos
;

1726 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,14,0)

1727 
ªt
 = 
	`kî√l_wrôe
(
fûe
, 
buf
, 
cou¡
, &
pos
);

1729 
ªt
 = 
	`kî√l_wrôe
(
fûe
, 
buf
, 
cou¡
, 
pos
);

1731 i‡(
ªt
 !
cou¡
) {

1732 
	`˘s_îr
("Wrôêd©®tÿfûê'%s' faûed %d", 
¨gv
[1], 
ªt
);

1734 
fûe
->
f_pos
 +
cou¡
;

1735 
cou¡
 = 0;

1739 i‡(
¨gc
 == 2) {

1740 
	`fûp_˛o£
(
fûe
, 
NULL
);

1743 
ªt
 = 
	`˘s_dißbÀ_gë_øwd©a
(
˘s_dev
);

1744 i‡(
ªt
) {

1745 
	`˘s_îr
("DißbÀÑódÑaw d©®Áûed %d", 
ªt
);

1749 
îr_‰ì_diffd©a
:

1750 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1751 
	`k‰ì
(
øwd©a
);

1753  (
d©a_vÆid
 ? 
cou¡
 : 
ªt
);

1754 
	}
}

1756 
ssize_t
 
	$m™uÆdiffd©a_°‹e
(
devi˚
 *
dev
,

1757 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

1759 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1760 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1761 
ªt
;

1763 
	`∑r£_¨g
(
buf
, 
cou¡
);

1765 
	`˘s_lock_devi˚
(
˘s_dev
);

1766 i‡(
	`°∫ˇ£cmp
("upd©eba£", 
¨gv
[0], 10) == 0) {

1767 
ªt
 = 
	`˘s_íabÀ_gë_øwd©a
(
˘s_dev
);

1768 i‡(
ªt
) {

1769 
	`˘s_îr
("E«bÀÑódÑaw d©®Áûed %d", 
ªt
);

1770 
îr_m™uÆ_diff_°‹e
;

1773 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_QUIT_GESTURE_MONITOR
);

1774 i‡(
ªt
) {

1775 
	`˘s_îr
("Síd cmd QUIT_GESTURE_MONITOR faûed %d", 
ªt
);

1776 
îr_m™uÆ_diff_°‹e
;

1778 
	`m¶ìp
(50);

1780 i‡(
m™uÆdiff_ba£
 !
NULL
) {

1781 
ªt
 = 
	`˘s_gë_øwd©a
(
˘s_dev
, 
m™uÆdiff_ba£
);

1782 if(
ªt
) {

1783 
	`˘s_îr
("GëÑaw d©®Áûed %d", 
ªt
);

1787 
ªt
 = 
	`˘s_dißbÀ_gë_øwd©a
(
˘s_dev
);

1788 i‡(
ªt
) {

1789 
	`˘s_îr
("DißbÀÑódÑaw d©®Áûed %d", 
ªt
);

1792 
îr_m™uÆ_diff_°‹e
:

1793 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1794  
cou¡
;

1795 
	}
}

1797 
DEVICE_ATTR
(
m™uÆdiff
, 
S_IRUSR
|
S_IWUSR
, 
m™uÆdiffd©a_show
, 
m™uÆdiffd©a_°‹e
);

1799 
ssize_t
 
	$jôãr_°‹e
(
devi˚
 *
dev
,

1800 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

1802 
u16
 
˙t
;

1803 
ªt
;

1805 
	`∑r£_¨g
(
buf
, 
cou¡
);

1807 i‡(
¨gc
 != 1) {

1808 
	`˘s_îr
("InvÆidÇumárg†%d", 
¨gc
);

1809  -
EFAULT
;

1812 
ªt
 = 
	`k°πou16
(
¨gv
[0], 0, &
˙t
);

1813 i‡(
ªt
 == 0) {

1814 i‡(
˙t
 > 2 || cnt < 10000) {

1815 
jôãr_ã°_‰ame
 = 
˙t
;

1819 
	`˘s_öfo
("jôã∏ã° føme: %d", 
jôãr_ã°_‰ame
);

1820  
cou¡
;

1821 
	}
}

1823 
ssize_t
 
	$jôãr_show
(
devi˚
 *
dev
,

1824 
devi˚_©åibuã
 *
©å
, *
buf
)

1826 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1827 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1828 
s16
 *
øwd©a
 = 
NULL
;

1829 
s16
 *
øwd©a_mö
 = 
NULL
;

1830 
s16
 *
øwd©a_max
 = 
NULL
;

1831 
ªt
, 
r
, 
c
, 
cou¡
 = 0;

1832 
max
, 
mö
, 
sum
, 
avîage
;

1833 
max_r
, 
max_c
, 
mö_r
, 
mö_c
;

1834 
boﬁ
 
d©a_vÆid
 = 
Ál£
;

1835 
i
;

1837 
	`˘s_öfo
("Show jitter");

1838 
	`˘s_lock_devi˚
(
˘s_dev
);

1839 
øwd©a
 = (
s16
 *)
	`kmÆloc
(
	`DIFFDATA_BUFFER_SIZE
(
˘s_dev
), 
GFP_KERNEL
);

1840 i‡(
øwd©a
 =
NULL
) {

1841 
	`˘s_îr
("Allocate memory forÑawdata failed");

1842 
ªt
 = -
ENOMEM
;

1843 
îr_jôãr_show_exô
;

1845 
øwd©a_mö
 = (
s16
 *)
	`kmÆloc
(
	`DIFFDATA_BUFFER_SIZE
(
˘s_dev
), 
GFP_KERNEL
);

1846 i‡(
øwd©a_mö
 =
NULL
) {

1847 
	`˘s_îr
("Allocate memory forÑawdata failed");

1848 
ªt
 = -
ENOMEM
;

1849 
îr_‰ì_øwd©a
;

1851 
øwd©a_max
 = (
s16
 *)
	`kmÆloc
(
	`DIFFDATA_BUFFER_SIZE
(
˘s_dev
), 
GFP_KERNEL
);

1852 i‡(
øwd©a_max
 =
NULL
) {

1853 
	`˘s_îr
("Allocate memory forÑawdata failed");

1854 
ªt
 = -
ENOMEM
;

1855 
îr_‰ì_øwd©a_mö
;

1858 
i
 = 0; i < 
	`DIFFDATA_BUFFER_SIZE
(
˘s_dev
)/2; i++) {

1859 
øwd©a_mö
[
i
] = 32767;

1860 
øwd©a_max
[
i
] = -32768;

1863 
ªt
 = 
	`˘s_íabÀ_gë_øwd©a
(
˘s_dev
);

1864 i‡(
ªt
) {

1865 
	`˘s_îr
("E«bÀÑódÑaw d©®Áûed %d", 
ªt
);

1866 
îr_‰ì_øwd©a_max
;

1869 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_QUIT_GESTURE_MONITOR
);

1870 i‡(
ªt
) {

1871 
	`˘s_îr
("Síd cmd QUIT_GESTURE_MONITOR faûed %d", 
ªt
);

1872 
îr_‰ì_øwd©a_max
;

1874 
	`m¶ìp
(50);

1875 
d©a_vÆid
 = 
åue
;

1876 
i
 = 0; i < 
jôãr_ã°_‰ame
; i++)

1878 
ªt
 = 
	`˘s_gë_øwd©a
(
˘s_dev
, 
øwd©a
);

1879 if(
ªt
) {

1880 
	`˘s_îr
("GëÑaw d©®Áûed %d", 
ªt
);

1883 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

1884 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1885 
ödex
;

1886 
ödex
 = 
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
;

1887 i‡(
øwd©a_mö
[
ödex
] > 
øwd©a
[index])

1888 
øwd©a_mö
[
ödex
] = 
øwd©a
[index];

1889 i‡(
øwd©a_max
[
ödex
] < 
øwd©a
[index])

1890 
øwd©a_max
[
ödex
] = 
øwd©a
[index];

1893 
	`m¶ìp
(1);

1895 
ªt
 = 
	`˘s_dißbÀ_gë_øwd©a
(
˘s_dev
);

1896 i‡(
ªt
) {

1897 
	`˘s_îr
("DißbÀÑódÑaw d©®Áûed %d", 
ªt
);

1900 i‡(
d©a_vÆid
) {

1901 
max
 = -32768;

1902 
mö
 = 32767;

1903 
sum
 = 0;

1904 
max_r
 = 
max_c
 = 
mö_r
 = 
mö_c
 = 0;

1905 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

1906 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1907 
s16
 
vÆ
;

1908 
ödex
 = 
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
;

1910 
vÆ
 = 
øwd©a_max
[
ödex
] - 
øwd©a_mö
[index];

1911 
øwd©a
[
ödex
] = 
vÆ
;

1912 
sum
 +
vÆ
;

1913 i‡(
vÆ
 > 
max
) {

1914 
max
 = 
vÆ
;

1915 
max_r
 = 
r
;

1916 
max_c
 = 
c
;

1917 } i‡(
vÆ
 < 
mö
) {

1918 
mö
 = 
vÆ
;

1919 
mö_r
 = 
r
;

1920 
mö_c
 = 
c
;

1924 
avîage
 = 
sum
 / (
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
);

1926 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

1927 
SPLIT_LINE_STR


1929 
SPLIT_LINE_STR


1930 " | ", 
mö_r
, 
mö_c
, 
mö
, 
max_r
, 
max_c
, 
max
, 
avîage
, 
jôãr_ã°_‰ame
);

1931 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1932 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, 
COL_NUM_FORMAT_STR
, 
c
);

1934 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, "\n" 
SPLIT_LINE_STR
);

1936 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

1937 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, 
ROW_NUM_FORMAT_STR
, 
r
);

1938 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1939 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

1940 
DATA_FORMAT_STR
, 
øwd©a
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
]);

1942 
buf
[
cou¡
++] = '\n';

1946 
îr_‰ì_øwd©a_max
:

1947 
	`k‰ì
(
øwd©a_max
);

1948 
îr_‰ì_øwd©a_mö
:

1949 
	`k‰ì
(
øwd©a_mö
);

1950 
îr_‰ì_øwd©a
:

1951 
	`k‰ì
(
øwd©a
);

1952 
îr_jôãr_show_exô
:

1953 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1954  (
d©a_vÆid
 ? 
cou¡
 : 
ªt
);

1955 
	}
}

1957 
DEVICE_ATTR
(
jôãr
, 
S_IRUSR
|
S_IWUSR
, 
jôãr_show
, 
jôãr_°‹e
);

1959 
ssize_t
 
	$com≥nßã_ˇp_show
(
devi˚
 *
dev
,

1960 
devi˚_©åibuã
 *
©å
, *
buf
)

1962 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

1963 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

1964 
u8
 *
ˇp
 = 
NULL
;

1965 
ªt
;

1966 
ssize_t
 
cou¡
 = 0;

1967 
r
, 
c
, 
mö
, 
max
, 
max_r
, 
max_c
, 
mö_r
, 
mö_c
, 
sum
, 
avîage
;

1969 
	`˘s_öfo
("Ród '%s'", 
©å
->©å.
«me
);

1971 
ˇp
 = 
	`kzÆloc
(
˘s_dev
->
hwd©a
->
num_row
 * cts_dev->hwd©a->
num_cﬁ
,

1972 
GFP_KERNEL
);

1973 i‡(
ˇp
 =
NULL
) {

1974  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1978 
	`˘s_lock_devi˚
(
˘s_dev
);

1979 
ªt
 = 
	`˘s_gë_com≥nßã_ˇp
(
˘s_dev
, 
ˇp
);

1980 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1981 i‡(
ªt
) {

1982 
	`k‰ì
(
ˇp
);

1983  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

1984 "Gë com≥nßã c≠ faûed %d\n", 
ªt
);

1987 
max
 = 
mö
 = 
ˇp
[0];

1988 
sum
 = 0;

1989 
max_r
 = 
max_c
 = 
mö_r
 = 
mö_c
 = 0;

1990 
r
 = 0;Ñ < 
˘s_dev
->
hwd©a
->
num_row
;Ñ++) {

1991 
c
 = 0; c < 
˘s_dev
->
hwd©a
->
num_cﬁ
; c++) {

1992 
u16
 
vÆ
 = 
ˇp
[
r
 * 
˘s_dev
->
hwd©a
->
num_cﬁ
 + 
c
];

1993 
sum
 +
vÆ
;

1994 i‡(
vÆ
 > 
max
) {

1995 
max
 = 
vÆ
;

1996 
max_r
 = 
r
;

1997 
max_c
 = 
c
;

1998 } i‡(
vÆ
 < 
mö
) {

1999 
mö
 = 
vÆ
;

2000 
mö_r
 = 
r
;

2001 
mö_c
 = 
c
;

2005 
avîage
 = 
sum
 / (
˘s_dev
->
hwd©a
->
num_row
 * cts_dev->hwd©a->
num_cﬁ
);

2007 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

2011 " |", 
mö_r
, 
mö_c
, 
mö
, 
max_r
, 
max_c
, 
max
, 
avîage
);

2012 
c
 = 0; c < 
˘s_dev
->
hwd©a
->
num_cﬁ
; c++) {

2013 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, " %3u", 
c
);

2015 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

2019 
r
 = 0;Ñ < 
˘s_dev
->
hwd©a
->
num_row
;Ñ++) {

2020 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - cou¡, "%2u |", 
r
);

2021 
c
 = 0; c < 
˘s_dev
->
hwd©a
->
num_cﬁ
; c++) {

2022 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

2023 " %3u", 
ˇp
[
r
 * 
˘s_dev
->
hwd©a
->
num_cﬁ
 + 
c
]);

2025 
buf
[
cou¡
++] = '\n';

2027 
cou¡
 +
	`s˙¥ötf
(
buf
 + cou¡, 
PAGE_SIZE
 - count,

2030 
	`k‰ì
(
ˇp
);

2032  
cou¡
;

2033 
	}
}

2034 
DEVICE_ATTR
(
com≥nßã_ˇp
, 
S_IRUGO
, 
com≥nßã_ˇp_show
, 
NULL
);

2036 #ifde‡
CFG_CTS_HAS_RESET_PIN


2037 
ssize_t
 
	$ª£t_pö_show
(
devi˚
 *
dev
,

2038 
devi˚_©åibuã
 *
©å
, *
buf
)

2040 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

2042 
	`˘s_öfo
("Read RESET-PIN");

2044  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

2046 
˘s_d©a
->
pd©a
->
r°_gpio
,

2047 
	`gpio_gë_vÆue
(
˘s_d©a
->
pd©a
->
r°_gpio
));

2048 
	}
}

2050 
ssize_t
 
	$ª£t_pö_°‹e
(
devi˚
 *
dev
,

2051 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

2053 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

2054 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

2056 
	`˘s_öfo
("Write RESET-PIN");

2057 
	`˘s_öfo
("Chip staus maybe changed");

2059 
	`˘s_∂©_£t_ª£t
(
˘s_dev
->
pd©a
, (
buf
[0] == '1') ? 1 : 0);

2060  
cou¡
;

2061 
	}
}

2062 
DEVICE_ATTR
(
ª£t_pö
, 
S_IRUSR
 | 
S_IWUSR
, 
ª£t_pö_show
, 
ª£t_pö_°‹e
);

2065 
ssize_t
 
	$úq_pö_show
(
devi˚
 *
dev
,

2066 
devi˚_©åibuã
 *
©å
, *
buf
)

2068 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

2070 
	`˘s_öfo
("Read IRQ-PIN");

2072  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

2074 
˘s_d©a
->
pd©a
->
öt_gpio
,

2075 
	`gpio_gë_vÆue
(
˘s_d©a
->
pd©a
->
öt_gpio
));

2076 
	}
}

2077 
DEVICE_ATTR
(
úq_pö
, 
S_IRUGO
, 
úq_pö_show
, 
NULL
);

2079 
ssize_t
 
	$úq_öfo_show
(
devi˚
 *
dev
,

2080 
devi˚_©åibuã
 *
©å
, *
buf
)

2082 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

2083 
úq_desc
 *
desc
;

2085 
	`˘s_öfo
("Read IRQ-INFO");

2087 
desc
 = 
	`úq_to_desc
(
˘s_d©a
->
pd©a
->
úq
);

2088 i‡(
desc
 =
NULL
) {

2089  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "IRQ: %d descriptorÇot found\n",

2090 
˘s_d©a
->
pd©a
->
úq
);

2093  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
,

2096 
˘s_d©a
->
pd©a
->
úq
, 
desc
->
dïth
,

2097 
desc
->
úq_cou¡
, desc->
úqs_unh™dÀd
,

2098 
desc
->
œ°_unh™dÀd
);

2099 
	}
}

2100 
DEVICE_ATTR
(
úq_öfo
, 
S_IRUGO
, 
úq_öfo_show
, 
NULL
);

2102 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


2103 
ssize_t
 
	$fw_log_ªdúe˘_show
(
devi˚
 *
dev
,

2104 
devi˚_©åibuã
 *
©å
, *
buf
)

2106 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

2107 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

2109  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "FwÜogÑedirect is %s\n",

2110 
	`˘s_is_fw_log_ªdúe˘
(
˘s_dev
)? "enable":"disable");

2111 
	}
}

2113 
ssize_t
 
	$fw_log_ªdúe˘_°‹e
(
devi˚
 *
dev
,

2114 
devi˚_©åibuã
 *
©å
,

2115 c⁄° *
buf
, 
size_t
 
cou¡
)

2117 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

2118 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

2119 
u8
 
íabÀ
 = 0;

2121 i‡(
buf
[0] == 'Y' || buf[0] == 'y' || buf[0] == '1') {

2122 
íabÀ
 = 1;

2124 i‡(
íabÀ
) {

2125 
	`˘s_íabÀ_fw_log_ªdúe˘
(
˘s_dev
);

2127 
	`˘s_dißbÀ_fw_log_ªdúe˘
(
˘s_dev
);

2130  
cou¡
;

2131 
	}
}

2133 
DEVICE_ATTR
(
fw_log_ªdúe˘
, 
S_IRUSR
 | 
S_IWUSR
,

2134 
fw_log_ªdúe˘_show
, 
fw_log_ªdúe˘_°‹e
);

2137 
ssize_t
 
	$debug_•i_show
(
devi˚
 *
dev
,

2138 
devi˚_©åibuã
 *
©å
, *
buf
)

2143  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "•i_•ìd=%d\n", 
•ìd
);

2144 
	}
}

2146 
ssize_t
 
	$debug_•i_°‹e
(
devi˚
 *
dev
,

2147 
devi˚_©åibuã
 *
©å
,

2148 c⁄° *
buf
, 
size_t
 
cou¡
)

2150 
u16
 
s
 = 0;

2151 
ªt
 = 0;

2153 
	`∑r£_¨g
(
buf
, 
cou¡
);

2155 i‡(
¨gc
 != 1) {

2156 
	`˘s_îr
("InvÆidÇumárg†%d", 
¨gc
);

2157  -
EFAULT
;

2160 
ªt
 = 
	`k°πou16
(
¨gv
[0], 0, &
s
);

2161 i‡(
ªt
) {

2162 
	`˘s_îr
("InvÆid spò•ìd: %s", 
¨gv
[0]);

2163  -
EINVAL
;

2166 
•ìd
 = 
s
;

2168  
cou¡
;

2169 
	}
}

2171 
DEVICE_ATTR
(
debug_•i
, 
S_IRUSR
 | 
S_IWUSR
,

2172 
debug_•i_show
, 
debug_•i_°‹e
);

2174 #ifde‡
CFG_CTS_GESTURE


2175 
ssize_t
 
	$ge°uª_í_show
(
devi˚
 *
dev
,

2176 
devi˚_©åibuã
 *
©å
, *
buf
)

2178 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

2179 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

2181  
	`s˙¥ötf
(
buf
, 
PAGE_SIZE
, "Gesture wakup is %s\n",

2182 
	`˘s_is_ge°uª_wakeup_íabÀd
(
˘s_dev
)? "enable":"disable");

2183 
	}
}

2185 
ssize_t
 
	$ge°uª_í_°‹e
(
devi˚
 *
dev
,

2186 
devi˚_©åibuã
 *
©å
, c⁄° *
buf
, 
size_t
 
cou¡
)

2188 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

2189 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

2190 
u8
 
íabÀ
 = 0;

2192 i‡(
buf
[0] == 'Y' || buf[0] == 'y' || buf[0] == '1') {

2193 
íabÀ
 = 1;

2195 i‡(
íabÀ
) {

2196 
	`˘s_íabÀ_ge°uª_wakeup
(
˘s_dev
);

2199 
	`˘s_dißbÀ_ge°uª_wakeup
(
˘s_dev
);

2202  
cou¡
;

2203 
	}
}

2204 
DEVICE_ATTR
(
ge°uª_í
, 
S_IRUSR
|
S_IWUSR
, 
ge°uª_í_show
, 
ge°uª_í_°‹e
);

2207 
©åibuã
 *
	g˘s_dev_misc_©ts
[] = {

2208 &
dev_©å_ic_ty≥
.
©å
,

2209 &
dev_©å_¥ogøm_mode
.
©å
,

2210 &
dev_©å_øwd©a
.
©å
,

2211 &
dev_©å_diffd©a
.
©å
,

2212 &
dev_©å_m™uÆdiff
.
©å
,

2213 &
dev_©å_jôãr
.
©å
,

2214 #ifde‡
CFG_CTS_HAS_RESET_PIN


2215 &
dev_©å_ª£t_pö
.
©å
,

2217 &
dev_©å_úq_pö
.
©å
,

2218 &
dev_©å_úq_öfo
.
©å
,

2219 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


2220 &
dev_©å_fw_log_ªdúe˘
.
©å
,

2222 &
dev_©å_com≥nßã_ˇp
.
©å
,

2223 &
dev_©å_ªad_ªg
.
©å
,

2224 &
dev_©å_wrôe_ªg
.
©å
,

2225 &
dev_©å_ªad_hw_ªg
.
©å
,

2226 &
dev_©å_wrôe_hw_ªg
.
©å
,

2227 &
dev_©å_debug_•i
.
©å
,

2228 #ifde‡
CFG_CTS_GESTURE


2229 &
dev_©å_ge°uª_í
.
©å
,

2231 
NULL


2234 c⁄° 
©åibuã_group
 
	g˘s_dev_misc_©å_group
 = {

2235 .
«me
 = "misc",

2236 .
	g©ås
 = 
˘s_dev_misc_©ts
,

2239 c⁄° 
©åibuã_group
 *
	g˘s_dev_©å_groups
[] = {

2240 &
˘s_dev_fúmw¨e_©å_group
,

2241 &
˘s_dev_Êash_©å_group
,

2242 &
˘s_dev_ã°_©å_group
,

2243 &
˘s_dev_misc_©å_group
,

2244 
NULL


2247 
	$˘s_sysfs_add_devi˚
(
devi˚
 *
dev
)

2249 
chù⁄e_ts_d©a
 *
˘s_d©a
 = 
	`dev_gë_drvd©a
(
dev
);

2250 
˘s_devi˚
 *
˘s_dev
 = &
˘s_d©a
->cts_dev;

2251 
ªt
 = 0, 
i
;

2253 
	`˘s_öfo
("Add deviceáttr groups");

2256 
i
 = 0; 
˘s_dev_©å_groups
[i]; i++) {

2257 
ªt
 = 
	`sysfs_¸óã_group
(&
dev
->
kobj
, 
˘s_dev_©å_groups
[
i
]);

2258 i‡(
ªt
) {

2259 --
i
 >= 0) {

2260 
	`sysfs_ªmove_group
(&
dev
->
kobj
, 
˘s_dev_©å_groups
[
i
]);

2266 i‡(
ªt
) {

2267 
	`˘s_îr
("Add devi˚áâ∏Áûed %d", 
ªt
);

2268  
ªt
;

2271 
m™uÆdiff_ba£
 = (
s16
 *)
	`kzÆloc
(
	`DIFFDATA_BUFFER_SIZE
(
˘s_dev
), 
GFP_KERNEL
);

2272 i‡(
m™uÆdiff_ba£
 =
NULL
) {

2273 
	`˘s_îr
("Malloc manualdiff_base failed");

2274  -
ENOMEM
;

2277 
ªt
 = 
	`sysfs_¸óã_lök
(
NULL
, &
dev
->
kobj
, "chipone-tddi");

2278 i‡(
ªt
) {

2279 
	`˘s_îr
("Cª©êsysf†lökÉº‹:%d", 
ªt
);

2282 
	}
}

2284 
	$˘s_sysfs_ªmove_devi˚
(
devi˚
 *
dev
)

2286 
i
;

2288 
	`˘s_öfo
("Remove deviceáttr groups");

2290 i‡(
m™uÆdiff_ba£
 !
NULL
) {

2291 
	`k‰ì
(
m™uÆdiff_ba£
);

2292 
m™uÆdiff_ba£
 = 
NULL
;

2295 
	`sysfs_ªmove_lök
(
NULL
, "chipone-tddi");

2297 
i
 = 0; 
˘s_dev_©å_groups
[i]; i++) {

2298 
	`sysfs_ªmove_group
(&
dev
->
kobj
, 
˘s_dev_©å_groups
[
i
]);

2300 
	}
}

2302 #unde‡
SPLIT_LINE_STR


2303 #unde‡
ROW_NUM_FORMAT_STR


2304 #unde‡
COL_NUM_FORMAT_STR


2305 #unde‡
DATA_FORMAT_STR


	@cts_sysfs.h

1 #i‚de‡
CTS_SYSFS_H


2 
	#CTS_SYSFS_H


	)

4 
	~"˘s_c⁄fig.h
"

6 
	gdevi˚
;

8 
u16
 
•ìd
;

10 #ifde‡
CONFIG_CTS_SYSFS


11 
˘s_sysfs_add_devi˚
(
devi˚
 *
dev
);

12 
˘s_sysfs_ªmove_devi˚
(
devi˚
 *
dev
);

14 
ölöe
 
	$˘s_sysfs_add_devi˚
(
devi˚
 *
dev
Ë{ -
ENOTSUPP
;
	}
}

15 
ölöe
 
	$˘s_sysfs_ªmove_devi˚
(
devi˚
 *
dev
Ë{
	}
}

	@cts_test.c

1 
	#LOG_TAG
 "Te°"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_ã°.h
"

8 c⁄° *
	$˘s_ã°_ôem_°r
(
ã°_ôem
)

10 
	#ˇ£_ã°_ôem
(
ôem
) \

11 
CTS_TEST_
 ## 
ôem
:  #ôem "-TEST"

	)

13 
ã°_ôem
) {

14 
	`ˇ£_ã°_ôem
(
RESET_PIN
);

15 
	`ˇ£_ã°_ôem
(
INT_PIN
);

16 
	`ˇ£_ã°_ôem
(
RAWDATA
);

17 
	`ˇ£_ã°_ôem
(
NOISE
);

18 
	`ˇ£_ã°_ôem
(
OPEN
);

19 
	`ˇ£_ã°_ôem
(
SHORT
);

20 
	`ˇ£_ã°_ôem
(
COMPENSATE_CAP
);

24 #unde‡
ˇ£_ã°_ôem


25 
	}
}

27 
	#CTS_FIRMWARE_WORK_MODE_NORMAL
 (0x00)

	)

28 
	#CTS_FIRMWARE_WORK_MODE_FACTORY
 (0x01)

	)

29 
	#CTS_FIRMWARE_WORK_MODE_CONFIG
 (0x02)

	)

30 
	#CTS_FIRMWARE_WORK_MODE_TEST
 (0x03)

	)

32 
	#CTS_TEST_SHORT
 (0x01)

	)

33 
	#CTS_TEST_OPEN
 (0x02)

	)

35 
	#CTS_SHORT_TEST_UNDEFINED
 (0x00)

	)

36 
	#CTS_SHORT_TEST_BETWEEN_COLS
 (0x01)

	)

37 
	#CTS_SHORT_TEST_BETWEEN_ROWS
 (0x02)

	)

38 
	#CTS_SHORT_TEST_BETWEEN_GND
 (0x03)

	)

40 
	#TEST_RESULT_BUFFER_SIZE
(
˘s_dev
) \

41 (
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
 * 2)

	)

43 
	#RAWDATA_BUFFER_SIZE
(
˘s_dev
) \

44 (
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
 * 2)

	)

46 
	$dißbÀ_fw_m⁄ô‹_mode
(
˘s_devi˚
 *
˘s_dev
)

48 
ªt
;

49 
u8
 
vÆue
;

51 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_FLAG_BITS
, &
vÆue
);

52 i‡(
ªt
) {

53  
ªt
;

56 i‡(
vÆue
 & 
	`BIT
(0)) {

57  
	`˘s_fw_ªg_wrôeb
(
˘s_dev
,

58 
CTS_DEVICE_FW_REG_FLAG_BITS
, 
vÆue
 & (~
	`BIT
(0)));

62 
	}
}

64 
	$dißbÀ_fw_auto_com≥nßã
(
˘s_devi˚
 *
˘s_dev
)

66  
	`˘s_fw_ªg_wrôeb
(
˘s_dev
,

67 
CTS_DEVICE_FW_REG_AUTO_CALIB_COMP_CAP_ENABLE
, 0);

68 
	}
}

70 
	$£t_fw_w‹k_mode
(
˘s_devi˚
 *
˘s_dev
, 
u8
 
mode
)

72 
ªt
, 
ªåõs
;

73 
u8
 
pwr_mode
;

75 
	`˘s_öfo
("Së fúmw¨êw‹k modêtÿ%u", 
mode
);

77 
ªt
 = 
	`˘s_fw_ªg_wrôeb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_WORK_MODE
, 
mode
);

78 i‡(
ªt
) {

79 
	`˘s_îr
("Wrôêfúmw¨êw‹k modêªgi°î faûed %d", 
ªt
);

80  
ªt
;

83 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_POWER_MODE
,

84 &
pwr_mode
);

85 i‡(
ªt
) {

86 
	`˘s_îr
("Ród fúmw¨êpowî modêªgi°î faûed %d", 
ªt
);

87  
ªt
;

90 i‡(
pwr_mode
 == 1) {

91 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_QUIT_GESTURE_MONITOR
);

92 i‡(
ªt
) {

93 
	`˘s_îr
("Síd cmd QUIT_GESTURE_MONITOR faûed %d", 
ªt
);

94  
ªt
;

97 
	`m¶ìp
(50);

100 
ªåõs
 = 0;

102 
u8
 
sys_busy
, 
cuº_mode
;

104 
	`m¶ìp
(10);

106 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_SYS_BUSY
,

107 &
sys_busy
);

108 i‡(
ªt
) {

109 
	`˘s_îr
("Ród fúmw¨êsy°em busyÑegi°î faûed %d", 
ªt
);

113 i‡(
sys_busy
)

116 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_GET_WORK_MODE
,

117 &
cuº_mode
);

118 i‡(
ªt
) {

119 
	`˘s_îr
("Ród fúmw¨êcuºíàw‹k modêÁûed %d", 
ªt
);

124 i‡(
cuº_mode
 =
mode
 ) {

127 } 
ªåõs
++ < 1000);

129  (
ªåõs
 >1000 ? -
ETIMEDOUT
 : 0);

130 
	}
}

132 
	$£t_di•œy_°©e
(
˘s_devi˚
 *
˘s_dev
, 
boﬁ
 
a˘ive
)

134 
ªt
;

135 
u8
 
ac˚ss_Êag
;

137 
	`˘s_öfo
("Së di•œy sèãÅÿ%s", 
a˘ive
 ? "ACTIVE" : "SLEEP");

139 
ªt
 = 
	`˘s_hw_ªg_ªadb
(
˘s_dev
, 0x3002C, &
ac˚ss_Êag
);

140 i‡(
ªt
) {

141 
	`˘s_îr
("Ród di•œyác˚s†Êag faûed %d", 
ªt
);

142  
ªt
;

145 
ªt
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 0x3002C, 
ac˚ss_Êag
 | 0x01);

146 i‡(
ªt
) {

147 
	`˘s_îr
("Wrôêdi•œyác˚s†Êag %02x faûed %d", 
ac˚ss_Êag
, 
ªt
);

148  
ªt
;

151 i‡(
a˘ive
) {

152 
ªt
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 0x3C044, 0x55);

153 i‡(
ªt
) {

154 
	`˘s_îr
("Write DCS-CMD11 fail");

155  
ªt
;

158 
	`m¶ìp
(100);

160 
ªt
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 0x3C0A4, 0x55);

161 i‡(
ªt
) {

162 
	`˘s_îr
("Write DCS-CMD29 fail");

163  
ªt
;

166 
	`m¶ìp
(100);

168 
ªt
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 0x3C0A0, 0x55);

169 i‡(
ªt
) {

170 
	`˘s_îr
("Write DCS-CMD28 fail");

171  
ªt
;

174 
	`m¶ìp
(100);

176 
ªt
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 0x3C040, 0x55);

177 i‡(
ªt
) {

178 
	`˘s_îr
("Write DCS-CMD10 fail");

179  
ªt
;

182 
	`m¶ìp
(100);

185 
ªt
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 0x3002C, 
ac˚ss_Êag
);

186 i‡(
ªt
) {

187 
	`˘s_îr
("Re°‹êdi•œyác˚s†Êag %02x faûed %d", 
ac˚ss_Êag
, 
ªt
);

188  
ªt
;

192 
	}
}

194 
	$waô_ã°_com∂ëe
(
˘s_devi˚
 *
˘s_dev
, 
skù_‰ames
)

196 
ªt
, 
i
, 
j
;

198 
	`˘s_öfo
("WaôÅe° com∂ëêskù %d fømes", 
skù_‰ames
);

200 
i
 = 0; i < (
skù_‰ames
 + 1); i++) {

201 
u8
 
ªady
;

203 
j
 = 0; j < 1000; j++) {

204 
	`mdñay
(1);

206 
ªady
 = 0;

207 
ªt
 = 
	`˘s_gë_d©a_ªady_Êag
(
˘s_dev
, &
ªady
);

208 i‡(
ªt
) {

209 
	`˘s_îr
("Gë d©®ªady fœg faûed %d", 
ªt
);

210  
ªt
;

213 i‡(
ªady
) {

218 i‡(
ªady
 == 0) {

219 
	`˘s_îr
("WaitÅest completeÅimeout");

220  -
ETIMEDOUT
;

222 i‡(
i
 < 
skù_‰ames
) {

223 
ªt
 = 
	`˘s_˛r_d©a_ªady_Êag
(
˘s_dev
);

224 i‡(
ªt
) {

225 
	`˘s_îr
("CÃ d©®ªady fœg faûed %d", 
ªt
);

226  
ªt
;

232 
	}
}

234 
	$gë_ã°_ªsu…
(
˘s_devi˚
 *
˘s_dev
, 
u16
 *
ªsu…
)

236 
ªt
;

238 
ªt
 = 
	`˘s_fw_ªg_ªadsb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_RAW_DATA
, 
ªsu…
,

239 
	`TEST_RESULT_BUFFER_SIZE
(
˘s_dev
));

240 i‡(
ªt
) {

241 
	`˘s_îr
("GëÅe°Ñesu… d©®Áûed %d", 
ªt
);

242  
ªt
;

245 
ªt
 = 
	`˘s_˛r_d©a_ªady_Êag
(
˘s_dev
);

246 i‡(
ªt
) {

247 
	`˘s_îr
("CÀ¨ d©®ªady fœg faûed %d", 
ªt
);

248  
ªt
;

252 
	}
}

254 
	$£t_fw_ã°_ty≥
(
˘s_devi˚
 *
˘s_dev
, 
u8
 
ty≥
)

256 
ªt
, 
ªåõs
 = 0;

257 
u8
 
sys_busy
;

258 
u8
 
ty≥_ªadback
;

260 
	`˘s_öfo
("SëÅe°Åy≥ %d", 
ty≥
);

262 
ªt
 = 
	`˘s_fw_ªg_wrôeb
(
˘s_dev
, 0x34, 
ty≥
);

263 i‡(
ªt
) {

264 
	`˘s_îr
("Wrôêã°Åy≥Ñegi°îÅÿÁûed %d", 
ªt
);

265  
ªt
;

269 
	`m¶ìp
(1);

271 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 0x01, &
sys_busy
);

272 i‡(
ªt
) {

273 
	`˘s_îr
("Ród sy°em busyÑegi°î faûed %d", 
ªt
);

274  
ªt
;

276 } 
sys_busy
 && 
ªåõs
++ < 1000);

278 i‡(
ªåõs
 >= 1000) {

279 
	`˘s_îr
("Wait systemÑeadyÅimeout");

280  -
ETIMEDOUT
;

283 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 0x34, &
ty≥_ªadback
);

284 i‡(
ªt
) {

285 
	`˘s_îr
("RódÅe°Åy≥Ñegi°î faûed %d", 
ªt
);

286  
ªt
;

289 i‡(
ty≥
 !
ty≥_ªadback
) {

290 
	`˘s_îr
("SëÅe°Åy≥ %u !ªadback %u", 
ty≥
, 
ty≥_ªadback
);

291  -
EFAULT
;

295 
	}
}

297 
boﬁ
 
	$£t_sh‹t_ã°_ty≥
(
˘s_devi˚
 *
˘s_dev
, 
u8
 
ty≥
)

299 
	sfw_sh‹t_ã°_∑øm
 {

300 
u8
 
ty≥
;

301 
u32
 
cﬁ_∑âîn
[2];

302 
u32
 
row_∑âîn
[2];

303 } 
∑øm
 = {

304 .
ty≥
 = 
CTS_SHORT_TEST_BETWEEN_COLS
,

305 .
cﬁ_∑âîn
 = {0, 0},

306 .
row_∑âîn
 = {0, 0}

308 
i
, 
ªt
;

310 
	`˘s_öfo
("Së sh‹àã°Åy≥Åÿ%u", 
ty≥
);

312 
∑øm
.
ty≥
 =Åype;

313 
i
 = 0; i < 5; i++) {

314 
u8
 
ty≥_ªadback
;

316 
ªt
 = 
	`˘s_fw_ªg_wrôesb
(
˘s_dev
, 0x5000, &
∑øm
, (param));

317 i‡(
ªt
) {

318 
	`˘s_îr
("Së sh‹àã°Åy≥Åÿ%u faûed %d", 
ty≥
, 
ªt
);

321 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 0x5000, &
ty≥_ªadback
);

322 i‡(
ªt
) {

323 
	`˘s_îr
("Gë sh‹àã°Åy≥ faûed %d", 
ªt
);

326 i‡(
ty≥
 =
ty≥_ªadback
) {

329 
	`˘s_îr
("SëÅe°Åy≥ %u !ªadback %u", 
ty≥
, 
ty≥_ªadback
);

334  
ªt
;

335 
	}
}

337 
	$˘s_wrôe_fûe
(
fûe
 *
fûp
, c⁄° *
d©a
, 
size_t
 
size
)

339 
loff_t
 
pos
;

340 
ssize_t
 
ªt
;

342 
pos
 = 
fûp
->
f_pos
;

344 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(4,14,0)

345 
ªt
 = 
	`kî√l_wrôe
(
fûp
, 
d©a
, 
size
, &
pos
);

347 
ªt
 = 
	`kî√l_wrôe
(
fûp
, 
d©a
, 
size
, 
pos
);

350 i‡(
ªt
 >= 0) {

351 
fûp
->
f_pos
 +
ªt
;

354  
ªt
;

355 
	}
}

357 
fûe
 *
	g˘s_ã°_d©a_fûp
 = 
NULL
;

358 
	$˘s_°¨t_dump_ã°_d©a_to_fûe
(c⁄° *
fûï©h
, 
boﬁ
 
≠≥nd_to_fûe
)

360 
	#START_BANNER
 \

361 ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"

	)

363 
	`˘s_öfo
("Sèπ dum∞ã° d©®tÿfûê'%s'", 
fûï©h
);

365 
˘s_ã°_d©a_fûp
 = 
	`fûp_›í
(
fûï©h
,

366 
O_WRONLY
 | 
O_CREAT
 | (
≠≥nd_to_fûe
 ? 
O_APPEND
 : 
O_TRUNC
),

367 
S_IRUGO
 | 
S_IWUGO
);

368 i‡(
	`IS_ERR
(
˘s_ã°_d©a_fûp
)) {

369 
ªt
 = 
	`PTR_ERR
(
˘s_ã°_d©a_fûp
);

370 
˘s_ã°_d©a_fûp
 = 
NULL
;

371 
	`˘s_îr
("Open file '%s' forÅest data failed %d",

372 
˘s_ã°_d©a_fûp
, 
ªt
);

373  
ªt
;

376 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
START_BANNER
, 
	`°æí
(START_BANNER));

379 #unde‡
START_BANNER


380 
	}
}

382 
	$˘s_°›_dump_ã°_d©a_to_fûe
()

384 
	#END_BANNER
 \

385 "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n"

	)

386 
r
;

388 
	`˘s_öfo
("Stop dumpÅest dataÅo file");

390 i‡(
˘s_ã°_d©a_fûp
) {

391 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
,

392 
END_BANNER
, 
	`°æí
(END_BANNER));

393 
r
 = 
	`fûp_˛o£
(
˘s_ã°_d©a_fûp
, 
NULL
);

394 i‡(
r
) {

395 
	`˘s_îr
("Clo£Åe° d©®fûêÁûed %d", 
r
);

397 
˘s_ã°_d©a_fûp
 = 
NULL
;

399 
	`˘s_w¨n
("Stop dumpÅsdataÅo file with filp = NULL");

401 #unde‡
END_BANNER


402 
	}
}

404 
	$˘s_dump_tsd©a
(
˘s_devi˚
 *
˘s_dev
,

405 c⁄° *
desc
, c⁄° 
u16
 *
d©a
, 
boﬁ
 
to_c⁄sﬁe
)

407 
	#SPLIT_LINE_STR
 \

408 "---------------------------------------------------------------------------------------------------------------"

	)

409 
	#ROW_NUM_FORMAT_STR
 "%2d | "

	)

410 
	#COL_NUM_FORMAT_STR
 "%-5u "

	)

411 
	#DATA_FORMAT_STR
 "%-5u "

	)

413 
r
, 
c
;

414 
u32
 
max
, 
mö
, 
sum
, 
avîage
;

415 
max_r
, 
max_c
, 
mö_r
, 
mö_c
;

416 
löe_buf
[128];

417 
cou¡
 = 0;

419 
max
 = 
mö
 = 
d©a
[0];

420 
sum
 = 0;

421 
max_r
 = 
max_c
 = 
mö_r
 = 
mö_c
 = 0;

422 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

423 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

424 
u16
 
vÆ
 = 
d©a
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
];

426 
sum
 +
vÆ
;

427 i‡(
vÆ
 > 
max
) {

428 
max
 = 
vÆ
;

429 
max_r
 = 
r
;

430 
max_c
 = 
c
;

431 } i‡(
vÆ
 < 
mö
) {

432 
mö
 = 
vÆ
;

433 
mö_r
 = 
r
;

434 
mö_c
 = 
c
;

438 
avîage
 = 
sum
 / (
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
);

440 
cou¡
 = 0;

441 
cou¡
 +
	`s˙¥ötf
(
löe_buf
 + count, (line_buf) - count,

443 
desc
, 
mö_r
, 
mö_c
, 
mö
, 
max_r
, 
max_c
, 
max
, 
avîage
);

444 i‡(
to_c⁄sﬁe
) {

445 
	`˘s_öfo
(
SPLIT_LINE_STR
);

446 
	`˘s_öfo
("%s", 
löe_buf
);

447 
	`˘s_öfo
(
SPLIT_LINE_STR
);

449 i‡(
˘s_ã°_d©a_fûp
) {

450 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
SPLIT_LINE_STR
, 
	`°æí
(SPLIT_LINE_STR));

451 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

452 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
löe_buf
, 
cou¡
);

453 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

454 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
SPLIT_LINE_STR
, 
	`°æí
(SPLIT_LINE_STR));

455 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

458 
cou¡
 = 0;

459 
cou¡
 +
	`s˙¥ötf
(
löe_buf
 + count, (line_buf) - count, " | ");

460 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

461 
cou¡
 +
	`s˙¥ötf
(
löe_buf
 + count, (line_buf) - count,

462 
COL_NUM_FORMAT_STR
, 
c
);

464 i‡(
to_c⁄sﬁe
) {

465 
	`˘s_öfo
("%s", 
löe_buf
);

466 
	`˘s_öfo
(
SPLIT_LINE_STR
);

468 i‡(
˘s_ã°_d©a_fûp
) {

469 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
löe_buf
, 
cou¡
);

470 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

471 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
SPLIT_LINE_STR
, 
	`°æí
(SPLIT_LINE_STR));

472 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

475 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

476 
cou¡
 = 0;

477 
cou¡
 +
	`s˙¥ötf
(
löe_buf
 + count, (line_buf) - count,

478 
ROW_NUM_FORMAT_STR
, 
r
);

479 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

480 
cou¡
 +=

481 
	`s˙¥ötf
(
löe_buf
 + 
cou¡
, (line_buf) - count,

482 
DATA_FORMAT_STR
,

483 
d©a
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
]);

485 i‡(
to_c⁄sﬁe
) {

486 
	`˘s_öfo
("%s", 
löe_buf
);

488 i‡(
˘s_ã°_d©a_fûp
) {

489 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
löe_buf
, 
cou¡
);

490 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

493 i‡(
to_c⁄sﬁe
) {

494 
	`˘s_öfo
(
SPLIT_LINE_STR
);

496 i‡(
˘s_ã°_d©a_fûp
) {

497 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
SPLIT_LINE_STR
, 
	`°æí
(SPLIT_LINE_STR));

498 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

501 #unde‡
SPLIT_LINE_STR


502 #unde‡
ROW_NUM_FORMAT_STR


503 #unde‡
COL_NUM_FORMAT_STR


504 #unde‡
DATA_FORMAT_STR


505 
	}
}

507 
boﬁ
 
	$is_övÆid_node
(
u32
 *
övÆid_nodes
, u32 
num_övÆid_nodes
,

508 
u16
 
row
, u16 
cﬁ
)

510 
i
;

512 
i
 = 0; i < 
num_övÆid_nodes
; i++) {

513 i‡(
	`MAKE_INVALID_NODE
(
row
,
cﬁ
)=
övÆid_nodes
[
i
]) {

514  
åue
;

518  
Ál£
;

519 
	}
}

521 
	$vÆid©e_tsd©a
(
˘s_devi˚
 *
˘s_dev
,

522 c⁄° *
desc
, 
u16
 *
d©a
,

523 
u32
 *
övÆid_nodes
, u32 
num_övÆid_nodes
,

524 
boﬁ
 
≥r_node
, *
mö
, *
max
)

526 
	#SPLIT_LINE_STR
 \

527 "------------------------------"

	)

529 
r
, 
c
;

530 
Áûed_˙t
 = 0;

532 
	`˘s_öfo
("%s validate data: %s,Çum invalidÇode: %u,Åhresh[0]=[%d, %d]",

533 
desc
, 
≥r_node
 ? "Per-Node" : "Uniform-Threshold",

534 
num_övÆid_nodes
, 
mö
 ? mö[0] : 
INT_MIN
, 
max
 ? max[0] : 
INT_MAX
);

536 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

537 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

538 
off£t
 = 
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
;

540 i‡(
num_övÆid_nodes
 &&

541 
	`is_övÆid_node
(
övÆid_nodes
, 
num_övÆid_nodes
, 
r
,
c
)) {

545 i‡((
mö
 !
NULL
 && 
d©a
[
off£t
] < mö[
≥r_node
 ? offset : 0]) ||

546 (
max
 !
NULL
 && 
d©a
[
off£t
] > max[
≥r_node
 ? offset : 0])) {

547 i‡(
Áûed_˙t
 == 0) {

548 
	`˘s_öfo
(
SPLIT_LINE_STR
);

549 
	`˘s_öfo
("%†ÁûedÇodes:", 
desc
);

551 
Áûed_˙t
++;

553 
	`˘s_öfo
(" %3d: [%-2d][%-2d] = %u",

554 
Áûed_˙t
, 
r
, 
c
, 
d©a
[
off£t
]);

559 i‡(
Áûed_˙t
) {

560 
	`˘s_öfo
(
SPLIT_LINE_STR
);

561 
	`˘s_öfo
("%†ã° %dÇodêtŸÆ faûed", 
desc
, 
Áûed_˙t
);

564  
Áûed_˙t
;

566 #unde‡
SPLIT_LINE_STR


567 
	}
}

569 
	$vÆid©e_comp_ˇp
(
˘s_devi˚
 *
˘s_dev
,

570 c⁄° *
desc
, 
u8
 *
ˇp
,

571 
u32
 *
övÆid_nodes
, u32 
num_övÆid_nodes
,

572 
boﬁ
 
≥r_node
, *
mö
, *
max
)

574 
	#SPLIT_LINE_STR
 \

575 "------------------------------"

	)

577 
r
, 
c
;

578 
Áûed_˙t
 = 0;

580 
	`˘s_öfo
("Validate %s data: %s,Çum invalidÇode: %u,Åhresh[0]=[%d, %d]",

581 
desc
, 
≥r_node
 ? "Per-Node" : "Uniform-Threshold",

582 
num_övÆid_nodes
, 
mö
 ? mö[0] : 
INT_MIN
, 
max
 ? max[0] : 
INT_MAX
);

584 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

585 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

586 
off£t
 = 
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
;

588 i‡(
num_övÆid_nodes
 &&

589 
	`is_övÆid_node
(
övÆid_nodes
, 
num_övÆid_nodes
, 
r
,
c
)) {

593 i‡((
mö
 !
NULL
 && 
ˇp
[
off£t
] < mö[
≥r_node
 ? offset : 0]) ||

594 (
max
 !
NULL
 && 
ˇp
[
off£t
] > max[
≥r_node
 ? offset : 0])) {

595 i‡(
Áûed_˙t
 == 0) {

596 
	`˘s_öfo
(
SPLIT_LINE_STR
);

597 
	`˘s_öfo
("%†ÁûedÇodes:", 
desc
);

599 
Áûed_˙t
++;

601 
	`˘s_öfo
(" %3d: [%-2d][%-2d] = %u",

602 
Áûed_˙t
, 
r
, 
c
, 
ˇp
[
off£t
]);

607 i‡(
Áûed_˙t
) {

608 
	`˘s_öfo
(
SPLIT_LINE_STR
);

609 
	`˘s_öfo
("%†ã° %dÇodêtŸÆ faûed", 
desc
, 
Áûed_˙t
);

612  
Áûed_˙t
;

614 #unde‡
SPLIT_LINE_STR


615 
	}
}

617 
	$waô_fw_to_n‹mÆ_w‹k
(
˘s_devi˚
 *
˘s_dev
)

619 
i
 = 0;

620 
ªt
;

622 
	`˘s_öfo
 ("Wait fwÅoÇormal work");

625 
u8
 
w‹k_mode
;

627 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

628 
CTS_DEVICE_FW_REG_GET_WORK_MODE
, &
w‹k_mode
);

629 i‡(
ªt
) {

630 
	`˘s_îr
("Gë fw cuº w‹k modêÁûed %d", 
w‹k_mode
);

633 i‡(
w‹k_mode
 =
CTS_FIRMWARE_WORK_MODE_NORMAL
) {

638 
	`mdñay
 (10);

639 } ++
i
 < 100);

641  
ªt
 ?Ñë : -
ETIMEDOUT
;

642 
	}
}

644 
	$¥ï¨e_ã°
(
˘s_devi˚
 *
˘s_dev
)

646 
ªt
;

648 
	`˘s_öfo
("PrepareÅest");

650 
	`˘s_∂©_ª£t_devi˚
(
˘s_dev
->
pd©a
);

652 
ªt
 = 
	`˘s_£t_dev_esd_¥Ÿe˘i⁄
(
˘s_dev
, 
Ál£
);

653 i‡(
ªt
) {

654 
	`˘s_îr
("DißbÀ fúmw¨êESDÖrŸe˘i⁄ faûed %d", 
ªt
);

655  
ªt
;

658 
ªt
 = 
	`dißbÀ_fw_m⁄ô‹_mode
(
˘s_dev
);

659 i‡(
ªt
) {

660 
	`˘s_îr
("DißbÀ fúmw¨êm⁄ô‹ modêÁûed %d", 
ªt
);

661  
ªt
;

664 
ªt
 = 
	`dißbÀ_fw_auto_com≥nßã
(
˘s_dev
);

665 i‡(
ªt
) {

666 
	`˘s_îr
("DißbÀ fúmw¨êautÿcom≥nßã faûed %d", 
ªt
);

667  
ªt
;

670 
ªt
 = 
	`£t_fw_w‹k_mode
(
˘s_dev
, 
CTS_FIRMWARE_WORK_MODE_CONFIG
);

671 i‡(
ªt
) {

672 
	`˘s_îr
("Së fúmw¨êw‹k modêtÿWORK_MODE_CONFIG faûed %d", 
ªt
);

673  
ªt
;

676 
˘s_dev
->
πd©a
.
ã°ög
 = 
åue
;

679 
	}
}

681 
	$po°_ã°
(
˘s_devi˚
 *
˘s_dev
)

683 
ªt
;

685 
	`˘s_öfo
("PostÅest");

687 
	`˘s_∂©_ª£t_devi˚
(
˘s_dev
->
pd©a
);

689 
ªt
 = 
	`£t_fw_w‹k_mode
(
˘s_dev
, 
CTS_FIRMWARE_WORK_MODE_NORMAL
);

690 i‡(
ªt
) {

691 
	`˘s_îr
("Së fúmw¨êw‹k modêtÿWORK_MODE_NORMAL faûed %d", 
ªt
);

694 
ªt
 = 
	`waô_fw_to_n‹mÆ_w‹k
(
˘s_dev
);

695 i‡(
ªt
) {

696 
	`˘s_îr
("Waô fwÅÿn‹mÆ w‹k faûed %d", 
ªt
);

700 
˘s_dev
->
πd©a
.
ã°ög
 = 
Ál£
;

701 
	}
}

706 
	$˘s_ã°_sh‹t
(
˘s_devi˚
 *
˘s_dev
,

707 
˘s_ã°_∑øm
 *
∑øm
)

709 
boﬁ
 
drivî_vÆid©e_d©a
 = 
Ál£
;

710 
boﬁ
 
vÆid©e_d©a_≥r_node
 = 
Ál£
;

711 
boﬁ
 
°›_if_Áûed
 = 
Ál£
;

712 
boﬁ
 
dump_ã°_d©e_to_u£r
 = 
Ál£
;

713 
boﬁ
 
dump_ã°_d©e_to_c⁄sﬁe
 = 
Ál£
;

714 
boﬁ
 
dump_ã°_d©e_to_fûe
 = 
Ál£
;

715 
num_nodes
;

716 
tsd©a_‰ame_size
;

717 
lo›˙t
;

718 
ªt
;

719 
u16
 *
ã°_ªsu…
 = 
NULL
;

720 
boﬁ
 
ªcovîy_di•œy_°©e
 = 
Ál£
;

721 
u8
 
√ed_di•œy_⁄
;

722 
u8
 
„©uª_vî
;

724 i‡(
˘s_dev
 =
NULL
 || 
∑øm
 == NULL) {

725 
	`˘s_îr
("ShortÅest with invalidÖaram: cts_dev: %pÅestÖaram: %p",

726 
˘s_dev
, 
∑øm
);

727  -
EINVAL
;

730 
num_nodes
 = 
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
;

731 
tsd©a_‰ame_size
 = 2 * 
num_nodes
;

733 
drivî_vÆid©e_d©a
 =

734 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_VALIDATE_DATA
);

735 
vÆid©e_d©a_≥r_node
 =

736 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_VALIDATE_PER_NODE
);

737 
dump_ã°_d©e_to_u£r
 =

738 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_USERSPACE
);

739 
dump_ã°_d©e_to_c⁄sﬁe
 =

740 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
);

741 
dump_ã°_d©e_to_fûe
 =

742 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_FILE
);

743 
°›_if_Áûed
 =

744 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_STOP_TEST_IF_VALIDATE_FAILED
);

746 
	`˘s_öfo
("ShortÅest, flags: 0x%08x,"

750 
∑øm
->
Êags
,Ö¨am->
num_övÆid_node
,

751 
∑øm
->
ã°_d©a_fûï©h
,Ö¨am->
ã°_d©a_buf_size
,

752 
∑øm
->
drivî_log_fûï©h
,Ö¨am->
drivî_log_buf_size
);

754 i‡(
dump_ã°_d©e_to_u£r
) {

755 
ã°_ªsu…
 = (
u16
 *)
∑øm
->
ã°_d©a_buf
;

757 
ã°_ªsu…
 = (
u16
 *)
	`kmÆloc
(
tsd©a_‰ame_size
, 
GFP_KERNEL
);

758 i‡(
ã°_ªsu…
 =
NULL
) {

759 
	`˘s_îr
("AllocateÅestÑesult buffer failed");

760  -
ENOMEM
;

764 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

765 i‡(
ªt
) {

766 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

767  
ªt
;

770 
	`˘s_lock_devi˚
(
˘s_dev
);

772 
ªt
 = 
	`¥ï¨e_ã°
(
˘s_dev
);

773 i‡(
ªt
) {

774 
	`˘s_îr
("Pª∑ªÅe° faûed %d", 
ªt
);

775 
îr_‰ì_ã°_ªsu…
;

778 
	`˘s_öfo
("Test shortÅo GND");

780 
ªt
 = 
	`˘s_§am_ªadb
(
˘s_dev
, 0xE8, &
„©uª_vî
);

781 i‡(
ªt
) {

782 
	`˘s_îr
("Ród fúmw¨ê„©uª vîsi⁄ faûed %d", 
ªt
);

783 
îr_‰ì_ã°_ªsu…
;

785 
	`˘s_öfo
("Fótuª vîsi⁄: %u", 
„©uª_vî
);

787 i‡(
„©uª_vî
 > 0) {

788 
ªt
 = 
	`£t_sh‹t_ã°_ty≥
(
˘s_dev
, 
CTS_SHORT_TEST_UNDEFINED
);

789 i‡(
ªt
) {

790 
	`˘s_îr
("Së sh‹àã°Åy≥ÅÿUNDEFINED faûed %d", 
ªt
);

791 
îr_‰ì_ã°_ªsu…
;

794 
ªt
 = 
	`£t_fw_ã°_ty≥
(
˘s_dev
, 
CTS_TEST_SHORT
);

795 i‡(
ªt
) {

796 
	`˘s_îr
("SëÅe°Åy≥ÅÿSHORT faûed %d", 
ªt
);

797 
îr_‰ì_ã°_ªsu…
;

800 
ªt
 = 
	`£t_fw_w‹k_mode
(
˘s_dev
, 
CTS_FIRMWARE_WORK_MODE_TEST
);

801 i‡(
ªt
) {

802 
	`˘s_îr
("Set firmware work modeÅo WORK_MODE_TEST failed %d",

803 
ªt
);

804 
îr_‰ì_ã°_ªsu…
;

807 i‡(
„©uª_vî
 <= 3) {

808 
u8
 
vÆ
;

810 
	`˘s_öfo
("Patch shortÅest issue");

812 
ªt
 = 
	`˘s_hw_ªg_ªadb
(
˘s_dev
, 0x350E2, &
vÆ
);

813 i‡(
ªt
) {

814 
	`˘s_îr
("Ród 0x350E2 faûed %d", 
ªt
);

815  
ªt
;

817 i‡((
vÆ
 & (
	`BIT
(2) | BIT(5))) != 0) {

818 
ªt
 = 
	`˘s_hw_ªg_wrôeb
(
˘s_dev
, 0x350E2, 
vÆ
 & 0xDB);

819 i‡(
ªt
) {

820 
	`˘s_îr
("Wrôê0x350E2 faûed %d", 
ªt
);

821  
ªt
;

826 
ªt
 = 
	`£t_sh‹t_ã°_ty≥
(
˘s_dev
, 
CTS_SHORT_TEST_BETWEEN_GND
);

827 i‡(
ªt
) {

828 
	`˘s_îr
("Së sh‹àã°Åy≥ÅÿSHORT_TO_GND faûed %d", 
ªt
);

829 
îr_‰ì_ã°_ªsu…
;

832 
ªt
 = 
	`waô_ã°_com∂ëe
(
˘s_dev
, 0);

833 i‡(
ªt
) {

834 
	`˘s_îr
("WaôÅe° com∂ëêÁûed %d", 
ªt
);

835 
îr_‰ì_ã°_ªsu…
;

838 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_RECOVERY_TX_VOL
);

839 i‡(
ªt
) {

840 
	`˘s_îr
("Síd comm™d RECOVERY_TX_VOL faûed %d", 
ªt
);

841 
îr_‰ì_ã°_ªsu…
;

844 
ªt
 = 
	`waô_ã°_com∂ëe
(
˘s_dev
, 2);

845 i‡(
ªt
) {

846 
	`˘s_îr
("WaôÅe° com∂ëêÁûed %d", 
ªt
);

847 
îr_‰ì_ã°_ªsu…
;

853 
ªt
 = 
	`gë_ã°_ªsu…
(
˘s_dev
, 
ã°_ªsu…
);

854 i‡(
ªt
) {

855 
	`˘s_îr
("RódÅe°Ñesu… faûed %d", 
ªt
);

856 
îr_‰ì_ã°_ªsu…
;

859 i‡(
dump_ã°_d©e_to_u£r
) {

860 *
∑øm
->
ã°_d©a_wr_size
 +
tsd©a_‰ame_size
;

863 i‡(
dump_ã°_d©e_to_c⁄sﬁe
 || 
dump_ã°_d©e_to_fûe
) {

864 
	`˘s_dump_tsd©a
(
˘s_dev
, "GND-sh‹t", 
ã°_ªsu…
,

865 
dump_ã°_d©e_to_c⁄sﬁe
);

868 i‡(
drivî_vÆid©e_d©a
) {

869 
ªt
 = 
	`vÆid©e_tsd©a
(
˘s_dev
, "GND-short",

870 
ã°_ªsu…
, 
∑øm
->
övÆid_nodes
,Ö¨am->
num_övÆid_node
,

871 
vÆid©e_d©a_≥r_node
, 
∑øm
->
mö
,Ö¨am->
max
);

872 i‡(
ªt
) {

873 
	`˘s_îr
("Sh‹àtÿGNDÅe° faûed %d", 
ªt
);

874 i‡(
°›_if_Áûed
) {

875 
îr_‰ì_ã°_ªsu…
;

880 i‡(
dump_ã°_d©e_to_u£r
) {

881 
ã°_ªsu…
 +
num_nodes
;

884 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

885 
CTS_DEVICE_FW_REG_TEST_WITH_DISPLAY_ON
, &
√ed_di•œy_⁄
);

886 i‡(
ªt
) {

887 
	`˘s_îr
("RódÇìd di•œy o¿ªgi°î faûed %d", 
ªt
);

888 
îr_‰ì_ã°_ªsu…
;

891 i‡(
√ed_di•œy_⁄
 == 0) {

892 
ªt
 = 
	`£t_di•œy_°©e
(
˘s_dev
, 
Ál£
);

893 i‡(
ªt
) {

894 
	`˘s_îr
("Së di•œy sèãÅÿSLEEP faûed %d", 
ªt
);

895 
îr_‰ì_ã°_ªsu…
;

897 
ªcovîy_di•œy_°©e
 = 
åue
;

903 
	`˘s_öfo
("Test short between columns");

906 
ªt
 = 
	`£t_fw_ã°_ty≥
(
˘s_dev
, 
CTS_TEST_SHORT
);

907 i‡(
ªt
) {

908 
	`˘s_îr
("SëÅe°Åy≥ÅÿSHORT faûed %d", 
ªt
);

909  
ªt
;

913 
ªt
 = 
	`£t_sh‹t_ã°_ty≥
(
˘s_dev
, 
CTS_SHORT_TEST_BETWEEN_COLS
);

914 i‡(
ªt
) {

915 
	`˘s_îr
("Së sh‹àã°Åy≥ÅÿBETWEEN_COLS faûed %d", 
ªt
);

916 
îr_ªcovîy_di•œy_°©e
;

920 
ªt
 = 
	`£t_fw_w‹k_mode
(
˘s_dev
, 
CTS_FIRMWARE_WORK_MODE_TEST
);

921 i‡(
ªt
) {

922 
	`˘s_îr
("Set firmware work modeÅo WORK_MODE_TEST failed %d",

923 
ªt
);

924  
ªt
;

928 i‡(
√ed_di•œy_⁄
 == 0) {

929 
	`˘s_öfo
("Skip first frame data");

931 
ªt
 = 
	`waô_ã°_com∂ëe
(
˘s_dev
, 0);

932 i‡(
ªt
) {

933 
	`˘s_îr
("WaôÅe° com∂ëêÁûed %d", 
ªt
);

934 
îr_ªcovîy_di•œy_°©e
;

937 
ªt
 = 
	`gë_ã°_ªsu…
(
˘s_dev
, 
ã°_ªsu…
);

938 i‡(
ªt
) {

939 
	`˘s_îr
("Ród skùÅe°Ñesu… faûed %d", 
ªt
);

940 
îr_ªcovîy_di•œy_°©e
;

943 
ªt
 = 
	`£t_sh‹t_ã°_ty≥
(
˘s_dev
, 
CTS_SHORT_TEST_BETWEEN_COLS
);

944 i‡(
ªt
) {

945 
	`˘s_îr
("Set shortÅestÅypeÅo BETWEEN_COLS failed %d",

946 
ªt
);

947 
îr_ªcovîy_di•œy_°©e
;

951 
ªt
 = 
	`waô_ã°_com∂ëe
(
˘s_dev
, 0);

952 i‡(
ªt
) {

953 
	`˘s_îr
("WaôÅe° com∂ëêÁûed %d", 
ªt
);

954 
îr_ªcovîy_di•œy_°©e
;

957 
ªt
 = 
	`gë_ã°_ªsu…
(
˘s_dev
, 
ã°_ªsu…
);

958 i‡(
ªt
) {

959 
	`˘s_îr
("RódÅe°Ñesu… faûed %d", 
ªt
);

960 
îr_ªcovîy_di•œy_°©e
;

963 i‡(
dump_ã°_d©e_to_u£r
) {

964 *
∑øm
->
ã°_d©a_wr_size
 +
tsd©a_‰ame_size
;

967 i‡(
dump_ã°_d©e_to_c⁄sﬁe
 || 
dump_ã°_d©e_to_fûe
) {

968 
	`˘s_dump_tsd©a
(
˘s_dev
, "Cﬁ-sh‹t", 
ã°_ªsu…
,

969 
dump_ã°_d©e_to_c⁄sﬁe
);

972 i‡(
drivî_vÆid©e_d©a
) {

973 
ªt
 = 
	`vÆid©e_tsd©a
(
˘s_dev
, "Col-short",

974 
ã°_ªsu…
, 
∑øm
->
övÆid_nodes
,Ö¨am->
num_övÆid_node
,

975 
vÆid©e_d©a_≥r_node
, 
∑øm
->
mö
,Ö¨am->
max
);

976 i‡(
ªt
) {

977 
	`˘s_îr
("Sh‹àbëwì¿cﬁumn†ã° faûed %d", 
ªt
);

978 i‡(
°›_if_Áûed
) {

979 
îr_ªcovîy_di•œy_°©e
;

984 i‡(
dump_ã°_d©e_to_u£r
) {

985 
ã°_ªsu…
 +
num_nodes
;

991 
	`˘s_öfo
("Test short betweenÑows");

993 
ªt
 = 
	`£t_sh‹t_ã°_ty≥
(
˘s_dev
, 
CTS_SHORT_TEST_BETWEEN_ROWS
);

994 i‡(
ªt
) {

995 
	`˘s_îr
("Së sh‹àã°Åy≥ÅÿBETWEEN_ROWS faûed %d", 
ªt
);

996 
îr_ªcovîy_di•œy_°©e
;

999 
lo›˙t
 = 
˘s_dev
->
hwd©a
->
num_row
;

1000 
lo›˙t
 > 1) {

1001 
ªt
 = 
	`waô_ã°_com∂ëe
(
˘s_dev
, 0);

1002 i‡(
ªt
) {

1003 
	`˘s_îr
("WaôÅe° com∂ëêÁûed %d", 
ªt
);

1004 
îr_ªcovîy_di•œy_°©e
;

1007 
ªt
 = 
	`gë_ã°_ªsu…
(
˘s_dev
, 
ã°_ªsu…
);

1008 i‡(
ªt
) {

1009 
	`˘s_îr
("RódÅe°Ñesu… faûed %d", 
ªt
);

1010 
îr_ªcovîy_di•œy_°©e
;

1013 i‡(
dump_ã°_d©e_to_u£r
) {

1014 *
∑øm
->
ã°_d©a_wr_size
 +
tsd©a_‰ame_size
;

1017 i‡(
dump_ã°_d©e_to_c⁄sﬁe
 || 
dump_ã°_d©e_to_fûe
) {

1018 
	`˘s_dump_tsd©a
(
˘s_dev
, "Row-sh‹t", 
ã°_ªsu…
,

1019 
dump_ã°_d©e_to_c⁄sﬁe
);

1022 i‡(
drivî_vÆid©e_d©a
) {

1023 
ªt
 = 
	`vÆid©e_tsd©a
(
˘s_dev
, "Row-short",

1024 
ã°_ªsu…
, 
∑øm
->
övÆid_nodes
,Ö¨am->
num_övÆid_node
,

1025 
vÆid©e_d©a_≥r_node
, 
∑øm
->
mö
,Ö¨am->
max
);

1026 i‡(
ªt
) {

1027 
	`˘s_îr
("Sh‹àbëwì¿cﬁumn†ã° faûed %d", 
ªt
);

1028 i‡(
°›_if_Áûed
) {

1029 
îr_ªcovîy_di•œy_°©e
;

1034 i‡(
dump_ã°_d©e_to_u£r
) {

1035 
ã°_ªsu…
 +
num_nodes
;

1038 
lo›˙t
 +=Üoopcnt % 2;

1039 
lo›˙t
 =Üoopcnt >> 1;

1042 
îr_ªcovîy_di•œy_°©e
:

1043 i‡(
ªcovîy_di•œy_°©e
) {

1044 
r
 = 
	`£t_di•œy_°©e
(
˘s_dev
, 
åue
);

1045 i‡(
r
) {

1046 
	`˘s_îr
("Së di•œy sèãÅÿACTIVE faûed %d", 
r
);

1049 
îr_‰ì_ã°_ªsu…
:

1050 i‡(!
dump_ã°_d©e_to_u£r
 && 
ã°_ªsu…
) {

1051 
	`k‰ì
(
ã°_ªsu…
);

1053 
	`po°_ã°
(
˘s_dev
);

1055 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1057 
	`˘s_öfo
("Sh‹àã° %s", 
ªt
 ? "FAILED" : "PASSED");

1059 
	`˘s_°¨t_devi˚
(
˘s_dev
);

1061  
ªt
;

1062 
	}
}

1067 
	$˘s_ã°_›í
(
˘s_devi˚
 *
˘s_dev
,

1068 
˘s_ã°_∑øm
 *
∑øm
)

1070 
boﬁ
 
drivî_vÆid©e_d©a
 = 
Ál£
;

1071 
boﬁ
 
vÆid©e_d©a_≥r_node
 = 
Ál£
;

1072 
boﬁ
 
dump_ã°_d©e_to_u£r
 = 
Ál£
;

1073 
boﬁ
 
dump_ã°_d©e_to_c⁄sﬁe
 = 
Ál£
;

1074 
boﬁ
 
dump_ã°_d©e_to_fûe
 = 
Ál£
;

1075 
num_nodes
;

1076 
tsd©a_‰ame_size
;

1077 
ªt
;

1078 
u16
 *
ã°_ªsu…
 = 
NULL
;

1079 
boﬁ
 
ªcovîy_di•œy_°©e
 = 
Ál£
;

1080 
u8
 
√ed_di•œy_⁄
;

1082 i‡(
˘s_dev
 =
NULL
 || 
∑øm
 == NULL) {

1083 
	`˘s_îr
("OpenÅest with invalidÖaram: cts_dev: %pÅestÖaram: %p",

1084 
˘s_dev
, 
∑øm
);

1085  -
EINVAL
;

1088 
num_nodes
 = 
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
;

1089 
tsd©a_‰ame_size
 = 2 * 
num_nodes
;

1091 
drivî_vÆid©e_d©a
 =

1092 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_VALIDATE_DATA
);

1093 
vÆid©e_d©a_≥r_node
 =

1094 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_VALIDATE_PER_NODE
);

1095 
dump_ã°_d©e_to_u£r
 =

1096 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_USERSPACE
);

1097 
dump_ã°_d©e_to_c⁄sﬁe
 =

1098 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
);

1099 
dump_ã°_d©e_to_fûe
 =

1100 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_FILE
);

1102 
	`˘s_öfo
("OpenÅest, flags: 0x%08x,"

1106 
∑øm
->
Êags
,Ö¨am->
num_övÆid_node
,

1107 
∑øm
->
ã°_d©a_fûï©h
,Ö¨am->
ã°_d©a_buf_size
,

1108 
∑øm
->
drivî_log_fûï©h
,Ö¨am->
drivî_log_buf_size
);

1110 i‡(
dump_ã°_d©e_to_u£r
) {

1111 
ã°_ªsu…
 = (
u16
 *)
∑øm
->
ã°_d©a_buf
;

1113 
ã°_ªsu…
 = (
u16
 *Ë
	`kmÆloc
(
tsd©a_‰ame_size
, 
GFP_KERNEL
);

1114 i‡(
ã°_ªsu…
 =
NULL
) {

1115 
	`˘s_îr
("Allocate memory forÅestÑesult faild");

1116  -
ENOMEM
;

1120 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

1121 i‡(
ªt
) {

1122 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

1123  
ªt
;

1126 
	`˘s_lock_devi˚
(
˘s_dev
);

1127 
ªt
 = 
	`¥ï¨e_ã°
(
˘s_dev
);

1128 i‡(
ªt
) {

1129 
	`˘s_îr
("Pª∑ªÅe° faûed %d", 
ªt
);

1130 
îr_‰ì_ã°_ªsu…
;

1133 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

1134 
CTS_DEVICE_FW_REG_TEST_WITH_DISPLAY_ON
, &
√ed_di•œy_⁄
);

1135 i‡(
ªt
) {

1136 
	`˘s_îr
("RódÇìd di•œy o¿ªgi°î faûed %d", 
ªt
);

1137 
îr_‰ì_ã°_ªsu…
;

1140 i‡(
√ed_di•œy_⁄
 == 0) {

1141 
ªt
 = 
	`£t_di•œy_°©e
(
˘s_dev
, 
Ál£
);

1142 i‡(
ªt
) {

1143 
	`˘s_îr
("Së di•œy sèãÅÿSLEEP faûed %d", 
ªt
);

1144 
îr_‰ì_ã°_ªsu…
;

1146 
ªcovîy_di•œy_°©e
 = 
åue
;

1149 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_RECOVERY_TX_VOL
);

1150 i‡(
ªt
) {

1151 
	`˘s_îr
("RecovîyÅx vﬁègêÁûed %d", 
ªt
);

1152 
îr_ªcovîy_di•œy_°©e
;

1155 
ªt
 = 
	`£t_fw_ã°_ty≥
(
˘s_dev
, 
CTS_TEST_OPEN
);

1156 i‡(
ªt
) {

1157 
	`˘s_îr
("SëÅe°Åy≥ÅÿOPEN_TEST faûed %d", 
ªt
);

1158 
îr_ªcovîy_di•œy_°©e
;

1161 
ªt
 = 
	`£t_fw_w‹k_mode
(
˘s_dev
, 
CTS_FIRMWARE_WORK_MODE_TEST
);

1162 i‡(
ªt
) {

1163 
	`˘s_îr
("Set firmware work modeÅo WORK_MODE_TEST failed %d",

1164 
ªt
);

1165 
îr_ªcovîy_di•œy_°©e
;

1168 
ªt
 = 
	`waô_ã°_com∂ëe
(
˘s_dev
, 2);

1169 i‡(
ªt
) {

1170 
	`˘s_îr
("WaôÅe° com∂ëêÁûed %d", 
ªt
);

1171 
îr_ªcovîy_di•œy_°©e
;

1174 
ªt
 = 
	`gë_ã°_ªsu…
(
˘s_dev
, 
ã°_ªsu…
);

1175 i‡(
ªt
) {

1176 
	`˘s_îr
("RódÅe°Ñesu… faûed %d", 
ªt
);

1177 
îr_ªcovîy_di•œy_°©e
;

1180 i‡(
dump_ã°_d©e_to_u£r
) {

1181 *
∑øm
->
ã°_d©a_wr_size
 +
tsd©a_‰ame_size
;

1184 i‡(
dump_ã°_d©e_to_c⁄sﬁe
 || 
dump_ã°_d©e_to_fûe
) {

1185 
	`˘s_dump_tsd©a
(
˘s_dev
, "O≥n-cúcuô", 
ã°_ªsu…
,

1186 
dump_ã°_d©e_to_c⁄sﬁe
);

1189 i‡(
drivî_vÆid©e_d©a
) {

1190 
ªt
 = 
	`vÆid©e_tsd©a
(
˘s_dev
, "Open-circuit",

1191 
ã°_ªsu…
, 
∑øm
->
övÆid_nodes
,Ö¨am->
num_övÆid_node
,

1192 
vÆid©e_d©a_≥r_node
, 
∑øm
->
mö
,Ö¨am->
max
);

1194 
îr_ªcovîy_di•œy_°©e
:

1195 i‡(
ªcovîy_di•œy_°©e
) {

1196 
r
 = 
	`£t_di•œy_°©e
(
˘s_dev
, 
åue
);

1197 i‡(
r
) {

1198 
	`˘s_îr
("Së di•œy sèãÅÿACTIVE faûed %d", 
r
);

1201 
îr_‰ì_ã°_ªsu…
:

1202 i‡(!
dump_ã°_d©e_to_u£r
 && 
ã°_ªsu…
) {

1203 
	`k‰ì
(
ã°_ªsu…
);

1205 
	`po°_ã°
(
˘s_dev
);

1207 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1208 
	`˘s_öfo
("O≥¿ã° %s", 
ªt
 ? "FAILED" : "PASSED");

1210 
	`˘s_°¨t_devi˚
(
˘s_dev
);

1212  
ªt
;

1213 
	}
}

1215 #ifde‡
CFG_CTS_HAS_RESET_PIN


1216 
	$˘s_ã°_ª£t_pö
(
˘s_devi˚
 *
˘s_dev
, 
˘s_ã°_∑øm
 *
∑øm
)

1218 
ªt
;

1219 
vÆ
 = 0;

1221 i‡(
˘s_dev
 =
NULL
 || 
∑øm
 == NULL) {

1222  -
EINVAL
;

1225 
	`˘s_öfo
("Reset PinÅest, flags: 0x%08x, "

1227 
∑øm
->
Êags
,

1228 
∑øm
->
drivî_log_fûï©h
,Ö¨am->
drivî_log_buf_size
);

1230 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

1231 i‡(
ªt
) {

1232 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

1233  
ªt
;

1236 
	`˘s_lock_devi˚
(
˘s_dev
);

1238 
	`˘s_∂©_£t_ª£t
(
˘s_dev
->
pd©a
, 0);

1239 
	`mdñay
(50);

1240 #ifde‡
CONFIG_CTS_I2C_HOST


1242 i‡(!
	`˘s_∂©_is_i2c_⁄löe
(
˘s_dev
->
pd©a
,

1243 
CTS_DEV_NORMAL_MODE_I2CADDR
)) {

1245 i‡(!
	`˘s_∂©_is_n‹mÆ_mode
(
˘s_dev
->
pd©a
)) {

1247 
vÆ
++;

1249 
	`˘s_îr
("Device isálive whileÑeset isÜow");

1251 
	`˘s_∂©_£t_ª£t
(
˘s_dev
->
pd©a
, 1);

1252 
	`mdñay
(50);

1254 
ªt
 = 
	`waô_fw_to_n‹mÆ_w‹k
(
˘s_dev
);

1255 i‡(
ªt
) {

1256 
	`˘s_îr
("Waô fwÅÿn‹mÆ w‹k faûed %d", 
ªt
);

1259 #ifde‡
CONFIG_CTS_I2C_HOST


1261 i‡(
	`˘s_∂©_is_i2c_⁄löe
(
˘s_dev
->
pd©a
, 
CTS_DEV_NORMAL_MODE_I2CADDR
)) {

1263 i‡(
	`˘s_∂©_is_n‹mÆ_mode
(
˘s_dev
->
pd©a
)) {

1265 
vÆ
++;

1267 
	`˘s_îr
("Device is offline whileÑeset is high");

1269 #ifde‡
CONFIG_CTS_CHARGER_DETECT


1270 i‡(
	`˘s_is_ch¨gî_exi°
(
˘s_dev
)) {

1271 
r
 = 
	`˘s_£t_dev_ch¨gî_©èched
(
˘s_dev
, 
åue
);

1272 i‡(
r
) {

1273 
	`˘s_îr
("Së dev ch¨gîáâached faûed %d", 
r
);

1278 #ifde‡
CONFIG_CTS_EARJACK_DETECT


1279 i‡(
˘s_dev
->
fwd©a
.
suµ_hódph⁄e_ˇbÀ_ªje˘
 &&

1280 
	`˘s_is_órjack_exi°
(
˘s_dev
)) {

1281 
r
 = 
	`˘s_£t_dev_órjack_©èched
(
˘s_dev
, 
åue
);

1282 i‡(
r
) {

1283 
	`˘s_îr
("Së devÉ¨jackáâached faûed %d", 
r
);

1289 #ifde‡
CONFIG_CTS_GLOVE


1290 i‡(
	`˘s_is_glove_íabÀd
(
˘s_dev
)) {

1291 
	`˘s_íãr_glove_mode
(
˘s_dev
);

1295 #ifde‡
CFG_CTS_FW_LOG_REDIRECT


1296 i‡(
	`˘s_is_fw_log_ªdúe˘
(
˘s_dev
)) {

1297 
	`˘s_íabÀ_fw_log_ªdúe˘
(
˘s_dev
);

1301 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1303 
ªt
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

1304 i‡(
ªt
) {

1305 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
ªt
);

1308 
	`˘s_öfo
("Re£t-PöÅe° %s", 
vÆ
 == 2 ? "PASS" : "FAIL");

1309 i‡(
vÆ
 == 2) {

1310 i‡(!
˘s_dev
->
πd©a
.
¥ogøm_mode
) {

1311 
	`˘s_£t_n‹mÆ_addr
(
˘s_dev
);

1316  -
EFAULT
;

1317 
	}
}

1320 
	$˘s_ã°_öt_pö
(
˘s_devi˚
 *
˘s_dev
, 
˘s_ã°_∑øm
 *
∑øm
)

1322 
ªt
;

1324 i‡(
˘s_dev
 =
NULL
 || 
∑øm
 == NULL) {

1325  -
EINVAL
;

1328 
	`˘s_öfo
("Int PinÅest, flags: 0x%08x, "

1330 
∑øm
->
Êags
,

1331 
∑øm
->
drivî_log_fûï©h
,Ö¨am->
drivî_log_buf_size
);

1333 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

1334 i‡(
ªt
) {

1335 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

1336  
ªt
;

1339 
	`˘s_lock_devi˚
(
˘s_dev
);

1341 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_WRTITE_INT_HIGH
);

1342 i‡(
ªt
) {

1343 
	`˘s_îr
("Síd comm™d WRTITE_INT_HIGH faûed %d", 
ªt
);

1344 
u∆ock_devi˚
;

1346 
	`mdñay
(10);

1347 i‡(
	`˘s_∂©_gë_öt_pö
(
˘s_dev
->
pd©a
) == 0) {

1348 
	`˘s_îr
("INTÖin state != HIGH");

1349 
ªt
 = -
EFAULT
;

1350 
u∆ock_devi˚
;

1353 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_WRTITE_INT_LOW
);

1354 i‡(
ªt
) {

1355 
	`˘s_îr
("Síd comm™d WRTITE_INT_LOW faûed %d", 
ªt
);

1356 
u∆ock_devi˚
;

1358 
	`mdñay
(10);

1359 i‡(
	`˘s_∂©_gë_öt_pö
(
˘s_dev
->
pd©a
) != 0) {

1360 
	`˘s_îr
("INTÖin state != LOW");

1361 
ªt
 = -
EFAULT
;

1362 
u∆ock_devi˚
;

1365 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_RELASE_INT_TEST
);

1366 i‡(
ªt
) {

1367 
	`˘s_îr
("Síd comm™d RELASE_INT_TEST faûed %d", 
ªt
);

1368 
ªt
 = 0;

1370 
	`mdñay
(10);

1372 
u∆ock_devi˚
:

1373 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1375 
ªt
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

1376 i‡(
ªt
) {

1377 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
ªt
);

1378 
ªt
 = 0;

1381 
	`˘s_öfo
("I¡-PöÅe° %s", 
ªt
 == 0 ? "PASS" : "FAIL");

1382  
ªt
;

1383 
	}
}

1385 
	$˘s_dump_comp_ˇp
(
˘s_devi˚
 *
˘s_dev
, 
u8
 *
ˇp
, 
boﬁ
 
to_c⁄sﬁe
)

1387 
	#SPLIT_LINE_STR
 \

1388 "-----------------------------------------------------------------------------"

	)

1389 
	#ROW_NUM_FORMAT_STR
 "%2d | "

	)

1390 
	#COL_NUM_FORMAT_STR
 "%3u "

	)

1391 
	#DATA_FORMAT_STR
 "%4d"

	)

1393 
r
, 
c
;

1394 
u32
 
max
, 
mö
, 
sum
, 
avîage
;

1395 
max_r
, 
max_c
, 
mö_r
, 
mö_c
;

1396 
löe_buf
[128];

1397 
cou¡
;

1399 
max
 = 
mö
 = 
ˇp
[0];

1400 
sum
 = 0;

1401 
max_r
 = 
max_c
 = 
mö_r
 = 
mö_c
 = 0;

1402 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

1403 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1404 
u16
 
vÆ
 = 
ˇp
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
];

1406 
sum
 +
vÆ
;

1407 i‡(
vÆ
 > 
max
) {

1408 
max
 = 
vÆ
;

1409 
max_r
 = 
r
;

1410 
max_c
 = 
c
;

1411 } i‡(
vÆ
 < 
mö
) {

1412 
mö
 = 
vÆ
;

1413 
mö_r
 = 
r
;

1414 
mö_c
 = 
c
;

1418 
avîage
 = 
sum
 / (
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
);

1420 
cou¡
 = 0;

1421 
cou¡
 +
	`s˙¥ötf
(
löe_buf
 + count, (line_buf) - count,

1423 
mö_r
, 
mö_c
, 
mö
, 
max_r
, 
max_c
, 
max
, 
avîage
);

1424 i‡(
to_c⁄sﬁe
) {

1425 
	`˘s_öfo
(
SPLIT_LINE_STR
);

1426 
	`˘s_öfo
("%s", 
löe_buf
);

1427 
	`˘s_öfo
(
SPLIT_LINE_STR
);

1429 i‡(
˘s_ã°_d©a_fûp
) {

1430 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
SPLIT_LINE_STR
, 
	`°æí
(SPLIT_LINE_STR));

1431 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

1432 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
löe_buf
, 
cou¡
);

1433 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

1434 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
SPLIT_LINE_STR
, 
	`°æí
(SPLIT_LINE_STR));

1435 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

1438 
cou¡
 = 0;

1439 
cou¡
 +
	`s˙¥ötf
(
löe_buf
 + count, (line_buf) - count, " ");

1440 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1441 
cou¡
 +
	`s˙¥ötf
(
löe_buf
 + count, (line_buf) - count,

1442 
COL_NUM_FORMAT_STR
, 
c
);

1444 i‡(
to_c⁄sﬁe
) {

1445 
	`˘s_öfo
("%s", 
löe_buf
);

1446 
	`˘s_öfo
(
SPLIT_LINE_STR
);

1448 i‡(
˘s_ã°_d©a_fûp
) {

1449 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
löe_buf
, 
cou¡
);

1450 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

1451 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
SPLIT_LINE_STR
, 
	`°æí
(SPLIT_LINE_STR));

1452 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

1455 
r
 = 0;Ñ < 
˘s_dev
->
fwd©a
.
rows
;Ñ++) {

1456 
cou¡
 = 0;

1457 
cou¡
 +
	`s˙¥ötf
(
löe_buf
 + count, (line_buf) - count,

1458 
ROW_NUM_FORMAT_STR
, 
r
);

1459 
c
 = 0; c < 
˘s_dev
->
fwd©a
.
cﬁs
; c++) {

1460 
cou¡
 +
	`s˙¥ötf
(
löe_buf
 + count,

1461 (
löe_buf
Ë- 
cou¡
,

1462 
DATA_FORMAT_STR
,

1463 
ˇp
[
r
 * 
˘s_dev
->
fwd©a
.
cﬁs
 + 
c
]);

1465 i‡(
to_c⁄sﬁe
) {

1466 
	`˘s_öfo
("%s", 
löe_buf
);

1468 i‡(
˘s_ã°_d©a_fûp
) {

1469 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
löe_buf
, 
cou¡
);

1470 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

1474 i‡(
to_c⁄sﬁe
) {

1475 
	`˘s_öfo
(
SPLIT_LINE_STR
);

1477 i‡(
˘s_ã°_d©a_fûp
) {

1478 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, 
SPLIT_LINE_STR
, 
	`°æí
(SPLIT_LINE_STR));

1479 
	`˘s_wrôe_fûe
(
˘s_ã°_d©a_fûp
, "\n", 1);

1481 #unde‡
SPLIT_LINE_STR


1482 #unde‡
ROW_NUM_FORMAT_STR


1483 #unde‡
COL_NUM_FORMAT_STR


1484 #unde‡
DATA_FORMAT_STR


1485 
	}
}

1487 
	$˘s_ã°_com≥nßã_ˇp
(
˘s_devi˚
 *
˘s_dev
,

1488 
˘s_ã°_∑øm
 *
∑øm
)

1490 
boﬁ
 
drivî_vÆid©e_d©a
 = 
Ál£
;

1491 
boﬁ
 
vÆid©e_d©a_≥r_node
 = 
Ál£
;

1492 
boﬁ
 
dump_ã°_d©e_to_u£r
 = 
Ál£
;

1493 
boﬁ
 
dump_ã°_d©e_to_c⁄sﬁe
 = 
Ál£
;

1494 
boﬁ
 
dump_ã°_d©e_to_fûe
 = 
Ál£
;

1495 
num_nodes
;

1496 
u8
 * 
ˇp
 = 
NULL
;

1497 
ªt
 = 0;

1499 i‡(
˘s_dev
 =
NULL
 || 
∑øm
 == NULL) {

1500 
	`˘s_îr
("Compensate capÅest with invalidÖaram: cts_dev: %pÅestÖaram: %p",

1501 
˘s_dev
, 
∑øm
);

1502  -
EINVAL
;

1505 
num_nodes
 = 
˘s_dev
->
hwd©a
->
num_row
 * cts_dev->hwd©a->
num_cﬁ
;

1507 
drivî_vÆid©e_d©a
 =

1508 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_VALIDATE_DATA
);

1509 i‡(
drivî_vÆid©e_d©a
) {

1510 
vÆid©e_d©a_≥r_node
 =

1511 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_VALIDATE_PER_NODE
);

1513 
dump_ã°_d©e_to_u£r
 =

1514 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_USERSPACE
);

1515 
dump_ã°_d©e_to_c⁄sﬁe
 =

1516 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
);

1517 
dump_ã°_d©e_to_fûe
 =

1518 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_FILE
);

1520 
	`˘s_öfo
("Compensate capÅest, flags: 0x%08x "

1524 
∑øm
->
Êags
,Ö¨am->
num_övÆid_node
,

1525 
∑øm
->
ã°_d©a_fûï©h
,Ö¨am->
ã°_d©a_buf_size
,

1526 
∑øm
->
drivî_log_fûï©h
,Ö¨am->
drivî_log_buf_size
);

1528 i‡(
dump_ã°_d©e_to_u£r
) {

1529 
ˇp
 = (
u8
 *)
∑øm
->
ã°_d©a_buf
;

1531 
ˇp
 = (
u8
 *)
	`kzÆloc
(
num_nodes
, 
GFP_KERNEL
);

1532 i‡(
ˇp
 =
NULL
) {

1533 
	`˘s_îr
("AŒoˇã mem f‹ com≥nßã c≠ faûed %d", 
ªt
);

1534  -
ENOMEM
;

1538 
	`˘s_lock_devi˚
(
˘s_dev
);

1539 
ªt
 = 
	`˘s_gë_com≥nßã_ˇp
(
˘s_dev
, 
ˇp
);

1540 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1541 i‡(
ªt
) {

1542 
	`˘s_îr
("Gë com≥nßã c≠ faûed %d", 
ªt
);

1543 
‰ì_ˇp
;

1546 i‡(
dump_ã°_d©e_to_u£r
) {

1547 *
∑øm
->
ã°_d©a_wr_size
 = 
num_nodes
;

1550 i‡(
dump_ã°_d©e_to_c⁄sﬁe
 || 
dump_ã°_d©e_to_fûe
) {

1551 
	`˘s_dump_comp_ˇp
(
˘s_dev
, 
ˇp
,

1552 
dump_ã°_d©e_to_c⁄sﬁe
);

1555 i‡(
drivî_vÆid©e_d©a
) {

1556 
ªt
 = 
	`vÆid©e_comp_ˇp
(
˘s_dev
, "Compensate-Cap",

1557 
ˇp
, 
∑øm
->
övÆid_nodes
,Ö¨am->
num_övÆid_node
,

1558 
vÆid©e_d©a_≥r_node
, 
∑øm
->
mö
,Ö¨am->
max
);

1561 
‰ì_ˇp
:

1562 i‡(!
dump_ã°_d©e_to_u£r
 && 
ˇp
) {

1563 
	`k‰ì
(
ˇp
);

1566 
	`˘s_öfo
("Com≥nßã-C≠Åe° %s", 
ªt
 == 0 ? "PASS" : "FAIL");

1568  
ªt
;

1569 
	}
}

1571 
	$˘s_ã°_øwd©a
(
˘s_devi˚
 *
˘s_dev
,

1572 
˘s_ã°_∑øm
 *
∑øm
)

1574 
˘s_øwd©a_ã°_¥iv_∑øm
 *
¥iv_∑øm
;

1575 
boﬁ
 
drivî_vÆid©e_d©a
 = 
Ál£
;

1576 
boﬁ
 
vÆid©e_d©a_≥r_node
 = 
Ál£
;

1577 
boﬁ
 
°›_ã°_if_vÆid©e_Áû
 = 
Ál£
;

1578 
boﬁ
 
dump_ã°_d©e_to_u£r
 = 
Ál£
;

1579 
boﬁ
 
dump_ã°_d©e_to_c⁄sﬁe
 = 
Ál£
;

1580 
boﬁ
 
dump_ã°_d©e_to_fûe
 = 
Ál£
;

1581 
num_nodes
;

1582 
tsd©a_‰ame_size
;

1583 
‰ame
;

1584 
u16
 *
øwd©a
 = 
NULL
;

1585 
i
;

1586 
ªt
;

1588 i‡(
˘s_dev
 =
NULL
 || 
∑øm
 == NULL ||

1589 
∑øm
->
¥iv_∑øm_size
 !(*
¥iv_∑øm
) ||

1590 
∑øm
->
¥iv_∑øm
 =
NULL
) {

1591 
	`˘s_îr
("RawdataÅest with invalidÖaram:ÖrivÖaram: %p size: %d",

1592 
∑øm
->
¥iv_∑øm
,Ö¨am->
¥iv_∑øm_size
);

1593  -
EINVAL
;

1596 
¥iv_∑øm
 = 
∑øm
->priv_param;

1597 i‡(
¥iv_∑øm
->
‰ames
 <= 0) {

1598 
	`˘s_öfo
("RawdataÅest withÅooÜittle frame %u",

1599 
¥iv_∑øm
->
‰ames
);

1600  -
EINVAL
;

1603 
num_nodes
 = 
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
;

1604 
tsd©a_‰ame_size
 = 2 * 
num_nodes
;

1606 
drivî_vÆid©e_d©a
 =

1607 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_VALIDATE_DATA
);

1608 
vÆid©e_d©a_≥r_node
 =

1609 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_VALIDATE_PER_NODE
);

1610 
dump_ã°_d©e_to_u£r
 =

1611 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_USERSPACE
);

1612 
dump_ã°_d©e_to_c⁄sﬁe
 =

1613 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
);

1614 
dump_ã°_d©e_to_fûe
=

1615 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_FILE
);

1616 
°›_ã°_if_vÆid©e_Áû
 =

1617 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_STOP_TEST_IF_VALIDATE_FAILED
);

1619 
	`˘s_öfo
("RawdataÅest, flags: 0x%08x, frames: %d, "

1623 
∑øm
->
Êags
, 
¥iv_∑øm
->
‰ames
,Ö¨am->
num_övÆid_node
,

1624 
∑øm
->
ã°_d©a_fûï©h
,Ö¨am->
ã°_d©a_buf_size
,

1625 
∑øm
->
drivî_log_fûï©h
,Ö¨am->
drivî_log_buf_size
);

1627 i‡(
dump_ã°_d©e_to_u£r
) {

1628 
øwd©a
 = (
u16
 *)
∑øm
->
ã°_d©a_buf
;

1630 
øwd©a
 = (
u16
 *)
	`kmÆloc
(
tsd©a_‰ame_size
, 
GFP_KERNEL
);

1631 i‡(
øwd©a
 =
NULL
) {

1632 
	`˘s_îr
("Allocate memory forÑawdata failed");

1633  -
ENOMEM
;

1638 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

1639 i‡(
ªt
) {

1640 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

1641  
ªt
;

1644 
	`˘s_lock_devi˚
(
˘s_dev
);

1646 
i
 = 0; i < 5; i++) {

1647 
r
;

1648 
u8
 
vÆ
;

1649 
r
 = 
	`˘s_íabÀ_gë_øwd©a
(
˘s_dev
);

1650 i‡(
r
) {

1651 
	`˘s_îr
("E«bÀ gëÅsd©®Áûed %d", 
r
);

1654 
	`mdñay
(1);

1655 
r
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 0x12, &
vÆ
);

1656 i‡(
r
) {

1657 
	`˘s_îr
("RódÉ«bÀ gëÅsd©®Áûed %d", 
r
);

1660 i‡(
vÆ
 != 0) {

1665 i‡(
i
 >= 5) {

1666 
	`˘s_îr
("EnableÑeadÅsdata failed");

1667 
ªt
 = -
EIO
;

1668 
u∆ock_devi˚
;

1671 
‰ame
 = 0; fømê< 
¥iv_∑øm
->
‰ames
; frame++) {

1672 
boﬁ
 
d©a_vÆid
 = 
Ál£
;

1675 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_QUIT_GESTURE_MONITOR
);

1676 i‡(
ªt
) {

1677 
	`˘s_îr
("Síd CMD_QUIT_GESTURE_MONITOR faûed %d", 
ªt
);

1681 
i
 = 0; i < 3; i++) {

1682 
ªt
 = 
	`˘s_gë_øwd©a
(
˘s_dev
, 
øwd©a
);

1683 i‡(
ªt
) {

1684 
	`˘s_îr
("GëÑawd©®Áûed %d", 
ªt
);

1685 
	`mdñay
(30);

1687 
d©a_vÆid
 = 
åue
;

1692 i‡(!
d©a_vÆid
) {

1693 
ªt
 = -
EIO
;

1697 i‡(
dump_ã°_d©e_to_u£r
) {

1698 *
∑øm
->
ã°_d©a_wr_size
 +
tsd©a_‰ame_size
;

1701 i‡(
dump_ã°_d©e_to_c⁄sﬁe
 || 
dump_ã°_d©e_to_fûe
) {

1702 
	`˘s_dump_tsd©a
(
˘s_dev
, "Rawd©a", 
øwd©a
,

1703 
dump_ã°_d©e_to_c⁄sﬁe
);

1706 i‡(
drivî_vÆid©e_d©a
) {

1707 
ªt
 = 
	`vÆid©e_tsd©a
(
˘s_dev
,

1708 "Rawd©a", 
øwd©a
,

1709 
∑øm
->
övÆid_nodes
,Ö¨am->
num_övÆid_node
,

1710 
vÆid©e_d©a_≥r_node
, 
∑øm
->
mö
,Ö¨am->
max
);

1711 i‡(
ªt
) {

1712 
	`˘s_îr
("Rawd©®ã° faûed %d", 
ªt
);

1713 i‡(
°›_ã°_if_vÆid©e_Áû
) {

1719 i‡(
dump_ã°_d©e_to_u£r
) {

1720 
øwd©a
 +
num_nodes
;

1724 
i
 = 0; i < 5; i++) {

1725 
r
 = 
	`˘s_dißbÀ_gë_øwd©a
(
˘s_dev
);

1726 i‡(
r
) {

1727 
	`˘s_îr
("DißbÀ gëÑawd©®Áûed %d", 
r
);

1734 
u∆ock_devi˚
:

1735 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1738 
r
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

1739 i‡(
r
) {

1740 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
r
);

1744 i‡(!
dump_ã°_d©e_to_u£r
 && 
øwd©a
 !
NULL
) {

1745 
	`k‰ì
(
øwd©a
);

1748 
	`˘s_öfo
("Rawd©®ã° %s", (
ªt
 == 0) ? "PASS" : "FAIL");

1750  
ªt
;

1751 
	}
}

1753 
	$˘s_ã°_noi£
(
˘s_devi˚
 *
˘s_dev
,

1754 
˘s_ã°_∑øm
 *
∑øm
)

1756 
˘s_noi£_ã°_¥iv_∑øm
 *
¥iv_∑øm
;

1757 
boﬁ
 
drivî_vÆid©e_d©a
 = 
Ál£
;

1758 
boﬁ
 
vÆid©e_d©a_≥r_node
 = 
Ál£
;

1759 
boﬁ
 
dump_ã°_d©e_to_u£r
 = 
Ál£
;

1760 
boﬁ
 
dump_ã°_d©e_to_c⁄sﬁe
 = 
Ál£
;

1761 
boﬁ
 
dump_ã°_d©e_to_fûe
 = 
Ál£
;

1762 
num_nodes
;

1763 
tsd©a_‰ame_size
;

1764 
‰ame
;

1765 
u16
 *
buf„r
 = 
NULL
;

1766 
u16
 *
cuº_øwd©a
 = 
NULL
;

1767 
u16
 *
max_øwd©a
 = 
NULL
;

1768 
u16
 *
mö_øwd©a
 = 
NULL
;

1769 
u16
 *
noi£
 = 
NULL
;

1770 
boﬁ
 
fú°_‰ame
 = 
åue
;

1771 
boﬁ
 
d©a_vÆid
 = 
Ál£
;

1772 
i
;

1773 
ªt
;

1775 i‡(
˘s_dev
 =
NULL
 || 
∑øm
 == NULL ||

1776 
∑øm
->
¥iv_∑øm_size
 !(*
¥iv_∑øm
) ||

1777 
∑øm
->
¥iv_∑øm
 =
NULL
) {

1778 
	`˘s_îr
("NoiseÅest with invalidÖaram:ÖrivÖaram: %p size: %d",

1779 
∑øm
->
¥iv_∑øm
,Ö¨am->
¥iv_∑øm_size
);

1780  -
EINVAL
;

1783 
¥iv_∑øm
 = 
∑øm
->priv_param;

1784 i‡(
¥iv_∑øm
->
‰ames
 < 2) {

1785 
	`˘s_îr
("NoiseÅest withÅooÜittle frame %u",

1786 
¥iv_∑øm
->
‰ames
);

1787  -
EINVAL
;

1790 
num_nodes
 = 
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
;

1791 
tsd©a_‰ame_size
 = 2 * 
num_nodes
;

1793 
drivî_vÆid©e_d©a
 =

1794 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_VALIDATE_DATA
);

1795 
vÆid©e_d©a_≥r_node
 =

1796 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_VALIDATE_PER_NODE
);

1797 
dump_ã°_d©e_to_u£r
 =

1798 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_USERSPACE
);

1799 
dump_ã°_d©e_to_c⁄sﬁe
 =

1800 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
);

1801 
dump_ã°_d©e_to_fûe
 =

1802 !!(
∑øm
->
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_FILE
);

1804 
	`˘s_öfo
("NoiseÅest, flags: 0x%08x, frames: %d, "

1808 
∑øm
->
Êags
, 
¥iv_∑øm
->
‰ames
,Ö¨am->
num_övÆid_node
,

1809 
∑øm
->
ã°_d©a_fûï©h
,Ö¨am->
ã°_d©a_buf_size
,

1810 
∑øm
->
drivî_log_fûï©h
,Ö¨am->
drivî_log_buf_size
);

1812 i‡(
drivî_vÆid©e_d©a
 || !
dump_ã°_d©e_to_u£r
) {

1813 
buf„r
 = (
u16
 *)
	`kmÆloc
(
tsd©a_‰ame_size
 * 4, 
GFP_KERNEL
);

1814 i‡(
buf„r
 =
NULL
) {

1815 
	`˘s_îr
("Alloc mem forÅsdata failed");

1816  -
ENOMEM
;

1819 i‡(
dump_ã°_d©e_to_u£r
) {

1820 
cuº_øwd©a
 = (
u16
 *)
∑øm
->
ã°_d©a_buf
;

1822 
cuº_øwd©a
 = 
buf„r
;

1825 i‡(
drivî_vÆid©e_d©a
) {

1826 
max_øwd©a
 = 
buf„r
 + 1 * 
num_nodes
;

1827 
mö_øwd©a
 = 
buf„r
 + 2 * 
num_nodes
;

1828 
noi£
 = 
buf„r
 + 3 * 
num_nodes
;

1833 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

1834 i‡(
ªt
) {

1835 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

1836  
ªt
;

1839 
	`˘s_lock_devi˚
(
˘s_dev
);

1841 
i
 = 0; i < 5; i++) {

1842 
r
;

1843 
u8
 
vÆ
;

1844 
r
 = 
	`˘s_íabÀ_gë_øwd©a
(
˘s_dev
);

1845 i‡(
r
) {

1846 
	`˘s_îr
("E«bÀ gëÅ†d©®Áûed %d", 
r
);

1849 
	`mdñay
(1);

1850 
r
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
, 0x12, &
vÆ
);

1851 i‡(
r
) {

1852 
	`˘s_îr
("RódÉ«bÀ gëÅ†d©®Áûed %d", 
r
);

1855 i‡(
vÆ
 != 0) {

1860 i‡(
i
 >= 5) {

1861 
	`˘s_îr
("EnableÑeadÅsdata failed");

1862 
ªt
 = -
EIO
;

1863 
u∆ock_devi˚
;

1866 
	`m¶ìp
(50);

1868 
‰ame
 = 0; fømê< 
¥iv_∑øm
->
‰ames
; frame++) {

1869 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_QUIT_GESTURE_MONITOR
);

1870 i‡(
ªt
) {

1871 
	`˘s_îr
("send quit gesture monitorÉrr");

1875 
i
 = 0; i < 3; i++) {

1876 
r
;

1877 
r
 = 
	`˘s_gë_øwd©a
(
˘s_dev
, 
cuº_øwd©a
);

1878 i‡(
r
) {

1879 
	`˘s_îr
("GëÑawd©®Áûed %d", 
r
);

1880 
	`mdñay
(30);

1886 i‡(
i
 >= 3) {

1887 
	`˘s_îr
("ReadÑawdata failed");

1888 
ªt
 = -
EIO
;

1889 
dißbÀ_gë_tsd©a
;

1892 i‡(
dump_ã°_d©e_to_u£r
) {

1893 *
∑øm
->
ã°_d©a_wr_size
 +
tsd©a_‰ame_size
;

1896 i‡(
dump_ã°_d©e_to_c⁄sﬁe
 || 
dump_ã°_d©e_to_fûe
) {

1897 
	`˘s_dump_tsd©a
(
˘s_dev
, "Noi£-øwd©a", 
cuº_øwd©a
,

1898 
dump_ã°_d©e_to_c⁄sﬁe
);

1901 i‡(
drivî_vÆid©e_d©a
) {

1902 i‡(
	`u∆ikñy
(
fú°_‰ame
)) {

1903 
	`mem˝y
(
max_øwd©a
, 
cuº_øwd©a
, 
tsd©a_‰ame_size
);

1904 
	`mem˝y
(
mö_øwd©a
, 
cuº_øwd©a
, 
tsd©a_‰ame_size
);

1905 
fú°_‰ame
 = 
Ál£
;

1907 
i
 = 0; i < 
num_nodes
; i++) {

1908 i‡(
cuº_øwd©a
[
i
] > 
max_øwd©a
[i]) {

1909 
max_øwd©a
[
i
] = 
cuº_øwd©a
[i];

1910 } i‡(
cuº_øwd©a
[
i
] < 
mö_øwd©a
[i]) {

1911 
mö_øwd©a
[
i
] = 
cuº_øwd©a
[i];

1917 i‡(
dump_ã°_d©e_to_u£r
) {

1918 
cuº_øwd©a
 +
num_nodes
;

1922 
d©a_vÆid
 = 
åue
;

1924 
dißbÀ_gë_tsd©a
:

1925 
i
 = 0; i < 5; i++) {

1926 
r
 = 
	`˘s_dißbÀ_gë_øwd©a
(
˘s_dev
);

1927 i‡(
r
) {

1928 
	`˘s_îr
("DißbÀ gëÑawd©®Áûed %d", 
r
);

1935 
u∆ock_devi˚
:

1936 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1939 
r
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

1940 i‡(
r
) {

1941 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
r
);

1945 i‡(
drivî_vÆid©e_d©a
 && 
d©a_vÆid
) {

1946 
i
 = 0; i < 
num_nodes
; i++) {

1947 
noi£
[
i
] = 
max_øwd©a
[i] - 
mö_øwd©a
[i];

1950 i‡(
dump_ã°_d©e_to_c⁄sﬁe
 || 
dump_ã°_d©e_to_fûe
) {

1951 
	`˘s_dump_tsd©a
(
˘s_dev
, "Noi£", 
noi£
,

1952 
dump_ã°_d©e_to_c⁄sﬁe
);

1955 
ªt
 = 
	`vÆid©e_tsd©a
(
˘s_dev
, "NoiseÅest",

1956 
noi£
, 
∑øm
->
övÆid_nodes
,Ö¨am->
num_övÆid_node
,

1957 
vÆid©e_d©a_≥r_node
, 
∑øm
->
mö
,Ö¨am->
max
);

1960 i‡(
buf„r
) {

1961 
	`k‰ì
(
buf„r
);

1964 
	`˘s_öfo
("NoiseÅest %s",

1965 (
d©a_vÆid
 && (
ªt
 == 0)) ? "PASS" : "FAIL");

1967  
ªt
;

1968 
	}
}

	@cts_test.h

1 #i‚de‡
CTS_TEST_H


2 
	#CTS_TEST_H


	)

4 
	g˘s_devi˚
;

6 
	#CTS_TEST_FLAG_RESET_BEFORE_TEST
 (1u << 0)

	)

7 
	#CTS_TEST_FLAG_RESET_AFTER_TEST
 (1u << 1)

	)

8 
	#CTS_TEST_FLAG_DISPLAY_ON
 (1u << 2)

	)

9 
	#CTS_TEST_FLAG_DISABLE_GAS
 (1u << 3)

	)

10 
	#CTS_TEST_FLAG_DISABLE_LINESHIFT
 (1u << 4)

	)

12 
	#CTS_TEST_FLAG_VALIDATE_DATA
 (1u << 8)

	)

13 
	#CTS_TEST_FLAG_VALIDATE_PER_NODE
 (1u << 9)

	)

14 
	#CTS_TEST_FLAG_VALIDATE_MIN
 (1u << 10)

	)

15 
	#CTS_TEST_FLAG_VALIDATE_MAX
 (1u << 11)

	)

16 
	#CTS_TEST_FLAG_VALIDATE_SKIP_INVALID_NODE
 (1u << 12)

	)

17 
	#CTS_TEST_FLAG_STOP_TEST_IF_VALIDATE_FAILED
 (1u << 13)

	)

19 
	#CTS_TEST_FLAG_DUMP_TEST_DATA_TO_CONSOLE
 (1u << 16)

	)

20 
	#CTS_TEST_FLAG_DUMP_TEST_DATA_TO_USERSPACE
 (1u << 17)

	)

21 
	#CTS_TEST_FLAG_DUMP_TEST_DATA_TO_FILE
 (1u << 18)

	)

22 
	#CTS_TEST_FLAG_DUMP_TEST_DATA_TO_FILE_APPEND
 (1u << 19)

	)

23 
	#CTS_TEST_FLAG_DUMP_TEST_DATA_TO_FILE_CSV
 (1u << 20)

	)

25 
	#CTS_TEST_FLAG_DRIVER_LOG_TO_USERSPACE
 (1u << 24)

	)

26 
	#CTS_TEST_FLAG_DRIVER_LOG_TO_FILE
 (1u << 25)

	)

27 
	#CTS_TEST_FLAG_DRIVER_LOG_TO_FILE_APPEND
 (1u << 26)

	)

29 
	#MAKE_INVALID_NODE
(
r
,
c
Ë(((cË<< 16Ë| (r))

	)

30 
	#INVALID_NODE_ROW
(
node
Ë((
u16
)“ode))

	)

31 
	#INVALID_NODE_COL
(
node
Ë((
u16
)(“odeË>> 16))

	)

33 
	e˘s_ã°_ôem
 {

34 
	mCTS_TEST_RESET_PIN
 = 1,

35 
	mCTS_TEST_INT_PIN
,

36 
	mCTS_TEST_RAWDATA
,

37 
	mCTS_TEST_NOISE
,

38 
	mCTS_TEST_OPEN
,

39 
	mCTS_TEST_SHORT
,

40 
	mCTS_TEST_COMPENSATE_CAP
,

43 
	s˘s_ã°_∑øm
 {

44 
	mã°_ôem
;

46 
__u32
 
	mÊags
;

48 
__u32
 
	mnum_övÆid_node
;

49 
__u32
 *
	mövÆid_nodes
;

50 *
	mmö
;

51 *
	mmax
;

53 *
	mã°_ªsu…
;

55 *
	mã°_d©a_buf
;

56 
	mã°_d©a_buf_size
;

57 *
	mã°_d©a_wr_size
;

58 c⁄° *
	mã°_d©a_fûï©h
;

60 
	mdrivî_log_Àvñ
;

61 *
	mdrivî_log_buf
;

62 
	mdrivî_log_buf_size
;

63 *
	mdrivî_log_wr_size
;

64 c⁄° *
	mdrivî_log_fûï©h
;

66 *
	m¥iv_∑øm
;

67 
	m¥iv_∑øm_size
;

70 
	s˘s_øwd©a_ã°_¥iv_∑øm
 {

71 
__u32
 
	m‰ames
;

75 
	s˘s_noi£_ã°_¥iv_∑øm
 {

76 
__u32
 
	m‰ames
;

80 c⁄° *
˘s_ã°_ôem_°r
(
ã°_ôem
);

81 
˘s_wrôe_fûe
(
fûe
 *
fûp
, c⁄° *
d©a
, 
size_t
 
size
);

83 
˘s_°¨t_dump_ã°_d©a_to_fûe
(c⁄° *
fûï©h
,

84 
boﬁ
 
≠≥nd_to_fûe
);

85 
˘s_°›_dump_ã°_d©a_to_fûe
();

87 
˘s_ã°_ª£t_pö
(
˘s_devi˚
 *
˘s_dev
,

88 
˘s_ã°_∑øm
 *
∑øm
);

89 
˘s_ã°_öt_pö
(
˘s_devi˚
 *
˘s_dev
,

90 
˘s_ã°_∑øm
 *
∑øm
);

91 
˘s_ã°_øwd©a
(
˘s_devi˚
 *
˘s_dev
,

92 
˘s_ã°_∑øm
 *
∑øm
);

93 
˘s_ã°_noi£
(
˘s_devi˚
 *
˘s_dev
,

94 
˘s_ã°_∑øm
 *
∑øm
);

95 
˘s_ã°_›í
(
˘s_devi˚
 *
˘s_dev
,

96 
˘s_ã°_∑øm
 *
∑øm
);

97 
˘s_ã°_sh‹t
(
˘s_devi˚
 *
˘s_dev
,

98 
˘s_ã°_∑øm
 *
∑øm
);

99 
˘s_ã°_com≥nßã_ˇp
(
˘s_devi˚
 *
˘s_dev
,

100 
˘s_ã°_∑øm
 *
∑øm
);

	@cts_tool.c

1 
	#LOG_TAG
 "Toﬁ"

	)

3 
	~"˘s_c⁄fig.h
"

4 
	~"˘s_∂©f‹m.h
"

5 
	~"˘s_c‹e.h
"

6 
	~"˘s_fúmw¨e.h
"

7 
	~"˘s_ã°.h
"

9 #ifde‡
CONFIG_CTS_LEGACY_TOOL


11 #¥agm®
∑ck
(1)

13 
	s˘s_toﬁ_cmd
 {

14 
u8
 
	mcmd
;

15 
u8
 
	mÊag
;

16 
u8
 
	mcú˛e
;

17 
u8
 
	mtimes
;

18 
u8
 
	mªåy
;

19 
u32
 
	md©a_Àn
;

20 
u8
 
	maddr_Àn
;

21 
u8
 
	maddr
[2];

22 
u8
 
	md©a
[
PAGE_SIZE
];

25 #¥agm®
∑ck
()

27 
	#CTS_TOOL_CMD_HEADER_LENGTH
 (12)

	)

29 
	e˘s_toﬁ_cmd_code
 {

30 
	mCTS_TOOL_CMD_GET_PANEL_PARAM
 = 0,

31 
	mCTS_TOOL_CMD_GET_DOWNLOAD_STATUS
 = 2,

32 
	mCTS_TOOL_CMD_GET_RAW_DATA
 = 4,

33 
	mCTS_TOOL_CMD_GET_DIFF_DATA
 = 6,

34 
	mCTS_TOOL_CMD_READ_HOSTCOMM
 = 12,

35 
	mCTS_TOOL_CMD_READ_ADC_STATUS
 = 14,

36 
	mCTS_TOOL_CMD_READ_GESTURE_INFO
 = 16,

37 
	mCTS_TOOL_CMD_READ_HOSTCOMM_MULTIBYTE
 = 18,

38 
	mCTS_TOOL_CMD_READ_PROGRAM_MODE_MULTIBYTE
 = 20,

39 
	mCTS_TOOL_CMD_READ_ICTYPE
 = 22,

40 
	mCTS_TOOL_CMD_I2C_DIRECT_READ
 = 24,

41 
	mCTS_TOOL_CMD_GET_DRIVER_INFO
 = 26,

43 
	mCTS_TOOL_CMD_UPDATE_PANEL_PARAM_IN_SRAM
 = 1,

44 
	mCTS_TOOL_CMD_DOWNLOAD_FIRMWARE_WITH_FILENAME
 = 3,

45 
	mCTS_TOOL_CMD_DOWNLOAD_FIRMWARE
 = 5,

46 
	mCTS_TOOL_CMD_WRITE_HOSTCOMM
 = 11,

47 
	mCTS_TOOL_CMD_WRITE_HOSTCOMM_MULTIBYTE
 = 15,

48 
	mCTS_TOOL_CMD_WRITE_PROGRAM_MODE_MULTIBYTE
 = 17,

49 
	mCTS_TOOL_CMD_I2C_DIRECT_WRITE
 = 19,

53 
	s˘s_ã°_io˘l_d©a
 {

54 
__u32
 
	m¡e°s
;

55 
˘s_ã°_∑øm
 
__u£r
 *
	mã°s
;

58 
	#CTS_IOCTL_RDWR_REG_FLAG_RD
 (0x0001)

	)

61 
	s˘s_rdwr_ªg
 {

62 
__u32
 
	maddr
;

63 
__u32
 
	mÊags
;

64 
__u8
 
__u£r
 *
	md©a
;

65 
__u32
 
	mÀn
;

66 
__u32
 
	mdñay_ms
;

69 
	#CTS_IOCTL_RDWR_REG_TYPE_FW
 (1)

	)

70 
	#CTS_IOCTL_RDWR_REG_TYPE_HW
 (2)

	)

71 
	#CTS_IOCTL_RDWR_REG_TYPE_DDI
 (3)

	)

73 
	#CTS_RDWR_REG_IOCTL_MAX_REGS
 (128)

	)

75 
	s˘s_rdwr_ªg_io˘l_d©a
 {

76 
__u8
 
	mªg_ty≥
;

77 
__u32
 
	mƒegs
;

78 
˘s_rdwr_ªg
 
__u£r
 *
	mªgs
;

81 
	#CTS_IOCTL_UPGRADE_FW_FLAG_TO_FLASH
 (0x00000001)

	)

82 
	#CTS_IOCTL_UPGRADE_FW_FLAG_BUILTIN
 (0x00000002)

	)

83 
	#CTS_IOCTL_UPGRADE_FW_FLAG_FILE
 (0x00000004)

	)

84 
	#CTS_IOCTL_UPGRADE_FW_FLAG_FW_DATA
 (0x00000008)

	)

86 
	s˘s_upgøde_fw_io˘l_d©a
 {

87 
__u32
 
	mÊags
;

88 
__u32
 
	mbuûtö_fw_ödex
;

89 c⁄° 
__u£r
 *
	mfûï©h
;

90 c⁄° 
__u8
 
__u£r
 *
	mfw_d©a
;

91 
__u32
 
	mfw_d©a_size
;

92 
__u32
 
	m•lô_size
;

95 
	#CTS_TOOL_IOCTL_GET_DRIVER_VERSION
 
	`_IOR
('C', 0x00, *)

	)

96 
	#CTS_TOOL_IOCTL_GET_DEVICE_TYPE
 
	`_IOR
('C', 0x01, *)

	)

97 
	#CTS_TOOL_IOCTL_GET_FW_VERSION
 
	`_IOR
('C', 0x02, *)

	)

98 
	#CTS_TOOL_IOCTL_GET_RESOLUTION
 
	`_IOR
('C', 0x03, *Ë

	)

99 
	#CTS_TOOL_IOCTL_GET_ROW_COL
 
	`_IOR
('C', 0x04, *Ë

	)

101 
	#CTS_TOOL_IOCTL_TEST
 
	`_IOWR
('C', 0x10, 
˘s_ã°_io˘l_d©a
 *)

	)

102 
	#CTS_TOOL_IOCTL_RDWR_REG
 
	`_IOWR
('C', 0x20, 
˘s_rdwr_ªg_io˘l_d©a
 *)

	)

103 
	#CTS_TOOL_IOCTL_UPGRADE_FW
 
	`_IOWR
('C', 0x21, 
˘s_upgøde_fw_io˘l_d©a
 *)

	)

105 
	#CTS_DRIVER_VERSION_CODE
 \

106 ((
CFG_CTS_DRIVER_MAJOR_VERSION
 << 16) | \

107 (
CFG_CTS_DRIVER_MINOR_VERSION
 << 8) | \

108 (
CFG_CTS_DRIVER_PATCH_VERSION
 << 0))

	)

110 
˘s_toﬁ_cmd
 
	g˘s_toﬁ_cmd
;

111 #ifde‡
CFG_CTS_FIRMWARE_IN_FS


112 
	g˘s_toﬁ_fúmw¨e_fûï©h
[
PATH_MAX
];

114 #ifde‡
CONFIG_CTS_I2C_HOST


116 
u32
 
	g˘s_toﬁ_dúe˘_ac˚ss_addr
 = 0;

119 
	$˘s_toﬁ_›í
(
öode
 *öode, 
fûe
 *file)

121 
fûe
->
¥iv©e_d©a
 = 
	`PDE_DATA
(
öode
);

123 
	}
}

125 
ssize_t
 
	$˘s_toﬁ_ªad
(
fûe
 *file,

126 
__u£r
 *
buf„r
, 
size_t
 
cou¡
, 
loff_t
 *
µos
)

128 
chù⁄e_ts_d©a
 *
˘s_d©a
;

129 
˘s_toﬁ_cmd
 *
cmd
;

130 
˘s_devi˚
 *
˘s_dev
;

131 
ªt
 = 0;

133 
˘s_d©a
 = (
chù⁄e_ts_d©a
 *)
fûe
->
¥iv©e_d©a
;

134 i‡(
˘s_d©a
 =
NULL
) {

135 
	`˘s_îr
("Read withÖrivate_data = NULL");

136  -
EIO
;

139 
cmd
 = &
˘s_toﬁ_cmd
;

140 
˘s_dev
 = &
˘s_d©a
->cts_dev;

141 
	`˘s_lock_devi˚
(
˘s_dev
);

143 
cmd
->cmd) {

144 
CTS_TOOL_CMD_GET_PANEL_PARAM
:

145 
	`˘s_öfo
("GëÖ™ñÖ¨amÜí: %u", 
cmd
->
d©a_Àn
);

146 
ªt
 = 
	`˘s_gë_∑√l_∑øm
(
˘s_dev
, 
cmd
->
d©a
, cmd->
d©a_Àn
);

147 i‡(
ªt
) {

148 
	`˘s_îr
("GëÖ™ñÖ¨amÜí: %u faûed %d", 
cmd
->
d©a_Àn
, 
ªt
);

152 
CTS_TOOL_CMD_GET_DOWNLOAD_STATUS
:

153 
cmd
->
d©a
[0] = 100;

154 
	`˘s_öfo
("Gë upd©ê°©u†%hhu", 
cmd
->
d©a
[0]);

157 
CTS_TOOL_CMD_GET_RAW_DATA
:

158 
CTS_TOOL_CMD_GET_DIFF_DATA
:

159 
	`˘s_dbg
("Get %s dataÑow: %u col: %uÜen: %u",

160 
cmd
->cmd =
CTS_TOOL_CMD_GET_RAW_DATA
 ? "raw" : "diff",

161 
cmd
->
addr
[1], cmd->addr[0], cmd->
d©a_Àn
);

163 
ªt
 = 
	`˘s_íabÀ_gë_øwd©a
(
˘s_dev
);

164 i‡(
ªt
) {

165 
	`˘s_îr
("E«bÀÑódÑaw/dif‡d©®Áûed %d", 
ªt
);

168 
	`mdñay
(1);

170 i‡(
cmd
->cmd =
CTS_TOOL_CMD_GET_RAW_DATA
) {

171 
ªt
 = 
	`˘s_gë_øwd©a
(
˘s_dev
, 
cmd
->
d©a
);

172 } i‡(
cmd
->cmd =
CTS_TOOL_CMD_GET_DIFF_DATA
) {

173 
ªt
 = 
	`˘s_gë_diffd©a
(
˘s_dev
, 
cmd
->
d©a
);

175 if(
ªt
) {

176 
	`˘s_îr
("Get %s data failed %d",

177 
cmd
->cmd =
CTS_TOOL_CMD_GET_RAW_DATA
 ? "øw" : "diff", 
ªt
);

181 
ªt
 = 
	`˘s_dißbÀ_gë_øwd©a
(
˘s_dev
);

182 i‡(
ªt
) {

183 
	`˘s_îr
("DißbÀÑódÑaw/dif‡d©®Áûed %d", 
ªt
);

189 
CTS_TOOL_CMD_READ_HOSTCOMM
:

190 
ªt
 = 
	`˘s_fw_ªg_ªadb
(
˘s_dev
,

191 
	`gë_u«lig√d_À16
(
cmd
->
addr
), cmd->
d©a
);

192 i‡(
ªt
) {

193 
	`˘s_îr
("Read firmwareÑegáddr 0x%04x failed %d",

194 
	`gë_u«lig√d_À16
(
cmd
->
addr
), 
ªt
);

196 
	`˘s_dbg
("Read firmwareÑegáddr 0x%04x, val=0x%02x",

197 
	`gë_u«lig√d_À16
(
cmd
->
addr
), cmd->
d©a
[0]);

201 #ifde‡
CFG_CTS_GESTURE


202 
CTS_TOOL_CMD_READ_GESTURE_INFO
:

203 
ªt
 = 
	`˘s_gë_ge°uª_öfo
(
˘s_dev
, 
cmd
->
d©a
, 
åue
);

204 i‡(
ªt
) {

205 
	`˘s_îr
("Gë ge°uª infÿÁûed %d", 
ªt
);

210 
CTS_TOOL_CMD_READ_HOSTCOMM_MULTIBYTE
:

211 
cmd
->
d©a_Àn
 = 
	`mö
((
size_t
)cmd->d©a_Àn, (cmd->
d©a
));

212 
ªt
 = 
	`˘s_fw_ªg_ªadsb
(
˘s_dev
, 
	`gë_u«lig√d_À16
(
cmd
->
addr
),

213 
cmd
->
d©a
, cmd->
d©a_Àn
);

214 i‡(
ªt
) {

215 
	`˘s_îr
("Read firmwareÑegáddr 0x%04xÜen %u failed %d",

216 
	`gë_u«lig√d_À16
(
cmd
->
addr
), cmd->
d©a_Àn
, 
ªt
);

218 
	`˘s_dbg
("Read firmwareÑegáddr 0x%04xÜen %u",

219 
	`gë_u«lig√d_À16
(
cmd
->
addr
), cmd->
d©a_Àn
);

223 
CTS_TOOL_CMD_READ_PROGRAM_MODE_MULTIBYTE
:

224 
	`˘s_dbg
("Read underÖrogram modeáddr 0x%06xÜen %u",

225 (
cmd
->
Êag
 << 16Ë| 
	`gë_u«lig√d_À16
(cmd->
addr
),

226 
cmd
->
d©a_Àn
);

227 
ªt
 = 
	`˘s_íãr_¥ogøm_mode
(
˘s_dev
);

228 i‡(
ªt
) {

229 
	`˘s_îr
("E¡îÖrogøm modêÁûed %d", 
ªt
);

233 
ªt
 = 
	`˘s_§am_ªadsb
(&
˘s_d©a
->
˘s_dev
,

234 
	`gë_u«lig√d_À16
(
cmd
->
addr
), cmd->
d©a
, cmd->
d©a_Àn
);

235 i‡(
ªt
) {

236 
	`˘s_îr
("Ród undîÖrogøm modêI2C x„∏Áûed %d", 
ªt
);

240 
ªt
 = 
	`˘s_íãr_n‹mÆ_mode
(
˘s_dev
);

241 i‡(
ªt
) {

242 
	`˘s_îr
("E¡îÇ‹mÆ modêÁûed %d", 
ªt
);

247 
CTS_TOOL_CMD_READ_ICTYPE
:

248 
	`˘s_öfo
("Get ICÅype");

249 i‡(
˘s_dev
->
hwd©a
) {

250 
˘s_dev
->
hwd©a
->
hwid
) {

251 
CTS_DEV_HWID_ICNL9911
: 
cmd
->
d©a
[0] = 0x91; ;

252 
CTS_DEV_HWID_ICNL9911S
: 
cmd
->
d©a
[0] = 0x91; ;

253 
CTS_DEV_HWID_ICNL9911C
: 
cmd
->
d©a
[0] = 0x91; ;

254 : 
cmd
->
d©a
[0] = 0x00; ;

257 
cmd
->
d©a
[0] = 0x10;

261 #ifde‡
CONFIG_CTS_I2C_HOST


262 
CTS_TOOL_CMD_I2C_DIRECT_READ
:

264 
u32
 
addr_width
;

265 *
wr_buff
 = 
NULL
;

266 
u8
 
addr_buff
[4];

267 
size_t
 
À·_size
, 
max_x„r_size
;

268 
u8
 *
d©a
;

270 i‡(
cmd
->
addr
[0] !
CTS_DEV_PROGRAM_MODE_I2CADDR
) {

271 
cmd
->
addr
[0] = 
CTS_DEV_NORMAL_MODE_I2CADDR
;

272 
addr_width
 = 2;

274 
addr_width
 = 
˘s_dev
->
hwd©a
->
¥ogøm_addr_width
;

277 
	`˘s_dbg
("DirectÑead from i2c_addr 0x%02xáddr 0x%06x size %u",

278 
cmd
->
addr
[0], 
˘s_toﬁ_dúe˘_ac˚ss_addr
, cmd->
d©a_Àn
);

280 
À·_size
 = 
cmd
->
d©a_Àn
;

281 
max_x„r_size
 = 
	`˘s_∂©_gë_max_i2c_x„r_size
(
˘s_dev
->
pd©a
);

282 
d©a
 = 
cmd
->data;

283 
À·_size
) {

284 
size_t
 
x„r_size
 = 
	`mö
(
À·_size
, 
max_x„r_size
);

285 
ªt
 = 
	`˘s_∂©_i2c_ªad
(
˘s_d©a
->
pd©a
, 
cmd
->
addr
[0],

286 
wr_buff
, 
addr_width
, 
d©a
, 
x„r_size
, 1, 0);

287 i‡(
ªt
) {

288 
	`˘s_îr
("DirectÑead i2c_addr 0x%02xáddr 0x%06xÜen %zu failed %d",

289 
cmd
->
addr
[0], 
˘s_toﬁ_dúe˘_ac˚ss_addr
, 
x„r_size
, 
ªt
);

293 
À·_size
 -
x„r_size
;

294 i‡(
À·_size
) {

295 
d©a
 +
x„r_size
;

296 
˘s_toﬁ_dúe˘_ac˚ss_addr
 +
x„r_size
;

297 i‡(
addr_width
 == 2) {

298 
	`put_u«lig√d_be16
(
˘s_toﬁ_dúe˘_ac˚ss_addr
, 
addr_buff
);

299 } i‡(
addr_width
 == 3) {

300 
	`put_u«lig√d_be24
(
˘s_toﬁ_dúe˘_ac˚ss_addr
, 
addr_buff
);

302 
wr_buff
 = 
addr_buff
;

308 
CTS_TOOL_CMD_GET_DRIVER_INFO
:

312 
	`˘s_w¨n
("Ród unknow¿comm™d %u", 
cmd
->cmd);

313 
ªt
 = -
EINVAL
;

317 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

319 i‡(
ªt
 == 0) {

320 if(
cmd
->cmd =
CTS_TOOL_CMD_I2C_DIRECT_READ
) {

321 
ªt
 = 
	`c›y_to_u£r
(
buf„r
 + 
CTS_TOOL_CMD_HEADER_LENGTH
,

322 
cmd
->
d©a
, cmd->
d©a_Àn
);

324 
ªt
 = 
	`c›y_to_u£r
(
buf„r
, 
cmd
->
d©a
, cmd->
d©a_Àn
);

326 i‡(
ªt
) {

327 
	`˘s_îr
("C›y d©®tÿu£∏buf„∏Áûed %d", 
ªt
);

331  
cmd
->
d©a_Àn
;

335 
	}
}

337 
ssize_t
 
	$˘s_toﬁ_wrôe
(
fûe
 *file,

338 c⁄° 
__u£r
 * 
buf„r
, 
size_t
 
cou¡
, 
loff_t
 * 
µos
)

340 
chù⁄e_ts_d©a
 *
˘s_d©a
;

341 
˘s_devi˚
 *
˘s_dev
;

342 
˘s_toﬁ_cmd
 *
cmd
;

343 
ªt
 = 0;

345 i‡(
cou¡
 < 
CTS_TOOL_CMD_HEADER_LENGTH
 || cou¡ > 
PAGE_SIZE
) {

346 
	`˘s_îr
("WrôêÀ¿%zu invÆid", 
cou¡
);

347  -
EFAULT
;

350 
˘s_d©a
 = (
chù⁄e_ts_d©a
 *)
fûe
->
¥iv©e_d©a
;

351 i‡(
˘s_d©a
 =
NULL
) {

352 
	`˘s_îr
("Write withÖrivate_data = NULL");

353  -
EIO
;

356 
cmd
 = &
˘s_toﬁ_cmd
;

357 
ªt
 = 
	`c›y_‰om_u£r
(
cmd
, 
buf„r
, 
CTS_TOOL_CMD_HEADER_LENGTH
);

358 i‡(
ªt
) {

359 
	`˘s_îr
("C›y comm™d hódî from u£∏buf„∏Áûed %d", 
ªt
);

360  -
EIO
;

362 
ªt
 = 
CTS_TOOL_CMD_HEADER_LENGTH
;

365 i‡(
cmd
->
d©a_Àn
 > 
PAGE_SIZE
) {

366 
	`˘s_îr
("Wrôêwôh invÆid cou¡ %d", 
cmd
->
d©a_Àn
);

367  -
EIO
;

370 if(
cmd
->cmd & 
	`BIT
(0)) {

371 if(
cmd
->
d©a_Àn
) {

372 
ªt
 = 
	`c›y_‰om_u£r
(
cmd
->
d©a
,

373 
buf„r
 + 
CTS_TOOL_CMD_HEADER_LENGTH
, 
cmd
->
d©a_Àn
);

374 i‡(
ªt
) {

375 
	`˘s_îr
("Copy commandÖayload from user bufferÜen %u failed %d",

376 
cmd
->
d©a_Àn
, 
ªt
);

377  -
EIO
;

382 
	`˘s_dbg
("WriteÑead command(%d) header,ÖrepareÑead size: %d",

383 
cmd
->cmd, cmd->
d©a_Àn
);

384  
CTS_TOOL_CMD_HEADER_LENGTH
 + 
cmd
->
d©a_Àn
;

387 
˘s_dev
 = &
˘s_d©a
->cts_dev;

388 
	`˘s_lock_devi˚
(
˘s_dev
);

390 
cmd
->cmd) {

391 
CTS_TOOL_CMD_UPDATE_PANEL_PARAM_IN_SRAM
:

392 
	`˘s_öfo
("Wrôê∑√»∑ømÜí %u d©a\n", 
cmd
->
d©a_Àn
);

393 
ªt
 = 
	`˘s_fw_ªg_wrôesb
(
˘s_dev
, 
CTS_DEVICE_FW_REG_PANEL_PARAM
,

394 
cmd
->
d©a
, cmd->
d©a_Àn
);

395 i‡(
ªt
) {

396 
	`˘s_îr
("Wrôê∑√»∑øm faûed %d", 
ªt
);

400 
ªt
 = 
	`˘s_£nd_comm™d
(
˘s_dev
, 
CTS_CMD_RESET
);

401 i‡(
ªt
) {

405 
ªt
 = 
	`˘s_£t_w‹k_mode
(
˘s_dev
, 1);

406 i‡(
ªt
) {

410 
	`mdñay
(100);

412 
ªt
 = 
	`˘s_£t_w‹k_mode
(
˘s_dev
, 0);

413 i‡(
ªt
) {

416 
	`mdñay
(100);

420 #ifde‡
CFG_CTS_FIRMWARE_IN_FS


421 
CTS_TOOL_CMD_DOWNLOAD_FIRMWARE_WITH_FILENAME
:

422 
	`˘s_öfo
("Write firmwareÖath: '%.*s'",

423 
cmd
->
d©a_Àn
, cmd->
d©a
);

425 
	`mem˝y
(
˘s_toﬁ_fúmw¨e_fûï©h
, 
cmd
->
d©a
, cmd->
d©a_Àn
);

426 
˘s_toﬁ_fúmw¨e_fûï©h
[
cmd
->
d©a_Àn
] = '\0';

429 
CTS_TOOL_CMD_DOWNLOAD_FIRMWARE
:

430 
	`˘s_öfo
("Start download firmwareÖath: '%s'",

431 
˘s_toﬁ_fúmw¨e_fûï©h
);

433 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

434 i‡(
ªt
) {

435 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

440 
ªt
 = 
	`˘s_upd©e_fúmw¨e_‰om_fûe
(
˘s_dev
, 
˘s_toﬁ_fúmw¨e_fûï©h
, 
åue
);

441 i‡(
ªt
) {

442 
	`˘s_îr
("Upd©®fúmw¨êÁûed %d", 
ªt
);

446 
ªt
 = 
	`˘s_°¨t_devi˚
(
˘s_dev
);

447 i‡(
ªt
) {

448 
	`˘s_îr
("Sèπ devi˚ faûed %d", 
ªt
);

454 
CTS_TOOL_CMD_WRITE_HOSTCOMM
:

455 
	`˘s_dbg
("Write firmwareÑegáddr: 0x%04x val=0x%02x",

456 
	`gë_u«lig√d_À16
(
cmd
->
addr
), cmd->
d©a
[0]);

458 
ªt
 = 
	`˘s_fw_ªg_wrôeb
(
˘s_dev
,

459 
	`gë_u«lig√d_À16
(
cmd
->
addr
), cmd->
d©a
[0]);

460 i‡(
ªt
) {

461 
	`˘s_îr
("Write firmwareÑegáddr: 0x%04x val=0x%02x failed %d",

462 
	`gë_u«lig√d_À16
(
cmd
->
addr
), cmd->
d©a
[0], 
ªt
);

466 
CTS_TOOL_CMD_WRITE_HOSTCOMM_MULTIBYTE
:

467 
	`˘s_dbg
("Write firmareÑegáddr: 0x%04xÜen %u",

468 
	`gë_u«lig√d_À16
(
cmd
->
addr
), cmd->
d©a_Àn
);

469 
ªt
 = 
	`˘s_fw_ªg_wrôesb
(
˘s_dev
, 
	`gë_u«lig√d_À16
(
cmd
->
addr
),

470 
cmd
->
d©a
, cmd->
d©a_Àn
);

471 i‡(
ªt
) {

472 
	`˘s_îr
("Write firmareÑegáddr: 0x%04xÜen %u failed %d",

473 
	`gë_u«lig√d_À16
(
cmd
->
addr
), cmd->
d©a_Àn
, 
ªt
);

477 
CTS_TOOL_CMD_WRITE_PROGRAM_MODE_MULTIBYTE
:

478 
	`˘s_dbg
("WriteÅoáddr 0x%06x size %u underÖrogram mode",

479 (
cmd
->
Êag
 << 16Ë| (cmd->
addr
[1] << 8) | cmd->addr[0],

480 
cmd
->
d©a_Àn
);

481 
ªt
 = 
	`˘s_íãr_¥ogøm_mode
(
˘s_dev
);

482 i‡(
ªt
) {

483 
	`˘s_îr
("E¡îÖrogøm modêÁûed %d", 
ªt
);

487 
ªt
 = 
	`˘s_§am_wrôesb
(
˘s_dev
,

488 (
cmd
->
Êag
 << 16Ë| (cmd->
addr
[1] << 8) | cmd->addr[0],

489 
cmd
->
d©a
, cmd->
d©a_Àn
);

490 i‡(
ªt
) {

491 
	`˘s_îr
("Wrôê¥ogøm modêmu…ibyã faûed %d", 
ªt
);

495 
ªt
 = 
	`˘s_íãr_n‹mÆ_mode
(
˘s_dev
);

496 i‡(
ªt
) {

497 
	`˘s_îr
("E¡îÇ‹mÆ modêÁûed %d", 
ªt
);

503 #ifde‡
CONFIG_CTS_I2C_HOST


504 
CTS_TOOL_CMD_I2C_DIRECT_WRITE
:

506 
u32
 
addr_width
;

507 
size_t
 
À·_∑ylﬂd_size
;

508 
size_t
 
max_x„r_size
;

509 *
∑ylﬂd
;

511 i‡(
cmd
->
addr
[0] !
CTS_DEV_PROGRAM_MODE_I2CADDR
) {

512 
cmd
->
addr
[0] = 
CTS_DEV_NORMAL_MODE_I2CADDR
;

513 
addr_width
 = 2;

514 
˘s_toﬁ_dúe˘_ac˚ss_addr
 = 
	`gë_u«lig√d_be16
(
cmd
->
d©a
);

516 
addr_width
 = 
˘s_dev
->
hwd©a
->
¥ogøm_addr_width
;

517 
˘s_toﬁ_dúe˘_ac˚ss_addr
 = 
	`gë_u«lig√d_be24
(
cmd
->
d©a
);

520 i‡(
cmd
->
d©a_Àn
 < 
addr_width
) {

521 
	`˘s_îr
("Direct writeÅoo short %d <áddress width %d",

522 
cmd
->
d©a_Àn
, 
addr_width
);

523 
ªt
 = -
EINVAL
;

527 
	`˘s_dbg
("Direct writeÅo i2c_addr 0x%02xáddr 0x%06x size %u",

528 
cmd
->
addr
[0], 
˘s_toﬁ_dúe˘_ac˚ss_addr
, cmd->
d©a_Àn
);

530 
À·_∑ylﬂd_size
 = 
cmd
->
d©a_Àn
 - 
addr_width
;

531 
max_x„r_size
 = 
	`˘s_∂©_gë_max_i2c_x„r_size
(
˘s_dev
->
pd©a
);

532 
∑ylﬂd
 = 
cmd
->
d©a
 + 
addr_width
;

534 
size_t
 
x„r_∑ylﬂd_size
 = 
	`mö
(
À·_∑ylﬂd_size
,

535 
max_x„r_size
 - 
addr_width
);

536 
size_t
 
x„r_Àn
 = 
x„r_∑ylﬂd_size
 + 
addr_width
;

538 
ªt
 = 
	`˘s_∂©_i2c_wrôe
(
˘s_d©a
->
pd©a
, 
cmd
->
addr
[0],

539 
∑ylﬂd
 - 
addr_width
, 
x„r_Àn
, 1, 0);

540 i‡(
ªt
) {

541 
	`˘s_îr
("Direct write i2c_addr 0x%02xáddr 0x%06xÜen %zu failed %d",

542 
cmd
->
addr
[0], 
˘s_toﬁ_dúe˘_ac˚ss_addr
, 
x„r_Àn
, 
ªt
);

546 
À·_∑ylﬂd_size
 -
x„r_∑ylﬂd_size
;

547 i‡(
À·_∑ylﬂd_size
) {

548 
∑ylﬂd
 +
x„r_∑ylﬂd_size
;

549 
˘s_toﬁ_dúe˘_ac˚ss_addr
 +
x„r_∑ylﬂd_size
;

550 i‡(
addr_width
 == 2) {

551 
	`put_u«lig√d_be16
(
˘s_toﬁ_dúe˘_ac˚ss_addr
, 
∑ylﬂd
 - 
addr_width
);

552 } i‡(
addr_width
 == 3) {

553 
	`put_u«lig√d_be24
(
˘s_toﬁ_dúe˘_ac˚ss_addr
, 
∑ylﬂd
 - 
addr_width
);

556 } 
À·_∑ylﬂd_size
);

561 
	`˘s_w¨n
("Wrôêunknow¿comm™d %u", 
cmd
->cmd);

562 
ªt
 = -
EINVAL
;

566 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

568  
ªt
 ? 0 : 
cmd
->
d©a_Àn
 + 
CTS_TOOL_CMD_HEADER_LENGTH
;

569 
	}
}

571 
	$˘s_io˘l_ã°
(
˘s_devi˚
 *
˘s_dev
,

572 
u32
 
¡e°s
, 
˘s_ã°_∑øm
 *
ã°s
)

574 
u32
 
num_nodes
 = 0;

575 
i
, 
ªt
 = 0;

577 
	`˘s_öfo
("io˘»ã°ÅŸÆ %u iãms", 
¡e°s
);

579 
num_nodes
 = 
˘s_dev
->
fwd©a
.
rows
 * cts_dev->fwd©a.
cﬁs
;

581 
i
 = 0; i < 
¡e°s
; i++) {

582 
boﬁ
 
vÆid©e_d©a
 = 
Ál£
;

583 
boﬁ
 
vÆid©e_d©a_≥r_node
 = 
Ál£
;

584 
boﬁ
 
vÆid©e_mö
 = 
Ál£
;

585 
boﬁ
 
vÆid©e_max
 = 
Ál£
;

586 
boﬁ
 
skù_övÆid_node
 = 
Ál£
;

587 
boﬁ
 
°›_ã°_if_vÆid©e_Áû
 = 
Ál£
;

588 
boﬁ
 
dump_ã°_d©e_to_c⁄sﬁe
 = 
Ál£
;

589 
boﬁ
 
dump_ã°_d©e_to_u£r
 = 
Ál£
;

590 
boﬁ
 
dump_ã°_d©e_to_fûe
 = 
Ál£
;

591 
boﬁ
 
dump_ã°_d©e_to_fûe_≠≥nd
 = 
Ál£
;

592 
boﬁ
 
drivî_log_to_u£r
 = 
Ál£
;

593 
boﬁ
 
drivî_log_to_fûe
 = 
Ál£
;

594 
boﬁ
 
drivî_log_to_fûe_≠≥nd
 = 
Ál£
;

595 
u32
 
__u£r
 *
u£r_mö_thªshﬁd
 = 
NULL
;

596 
u32
 
__u£r
 *
u£r_max_thªshﬁd
 = 
NULL
;

597 
u32
 
__u£r
 *
u£r_övÆid_nodes
 = 
NULL
;

598 
__u£r
 *
u£r_ã°_ªsu…
 = 
NULL
;

599 
__u£r
 *
u£r_ã°_d©a
 = 
NULL
;

600 
__u£r
 *
u£r_ã°_d©a_wr_size
 = 
NULL
;

601 c⁄° 
__u£r
 *
u£r_ã°_d©a_fûï©h
 = 
NULL
;

602 
__u£r
 *
u£r_drivî_log_buf
 = 
NULL
;

603 
__u£r
 *
u£r_drivî_log_wr_size
 = 
NULL
;

604 c⁄° 
__u£r
 *
u£r_drivî_log_fûï©h
 = 
NULL
;

605 
__u£r
 *
u£r_¥iv_∑øm
 = 
NULL
;

606 
ã°_ªsu…
 = 0;

607 
ã°_d©a_wr_size
 = 0;

608 
drivî_log_wr_size
 = 0;

610 
	`˘s_öfo
("ioctlÅest item %d: %d(%s) flags: %08xÖrivÖaram size: %d",

611 
i
, 
ã°s
[i].
ã°_ôem
, 
	`˘s_ã°_ôem_°r
(tests[i].test_item),

612 
ã°s
[
i
].
Êags
,Åe°s[i].
¥iv_∑øm_size
);

616 
vÆid©e_d©a
 =

617 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_VALIDATE_DATA
);

618 
vÆid©e_d©a_≥r_node
 =

619 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_VALIDATE_PER_NODE
);

620 
vÆid©e_mö
 =

621 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_VALIDATE_MIN
);

622 
vÆid©e_max
 =

623 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_VALIDATE_MAX
);

624 
skù_övÆid_node
 =

625 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_VALIDATE_SKIP_INVALID_NODE
);

626 
°›_ã°_if_vÆid©e_Áû
 =

627 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_STOP_TEST_IF_VALIDATE_FAILED
);

628 
dump_ã°_d©e_to_u£r
 =

629 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_USERSPACE
);

630 
dump_ã°_d©e_to_fûe
 =

631 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_FILE
);

632 
dump_ã°_d©e_to_fûe_≠≥nd
 =

633 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_DUMP_TEST_DATA_TO_FILE_APPEND
);

634 
drivî_log_to_u£r
 =

635 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_DRIVER_LOG_TO_USERSPACE
);

636 
drivî_log_to_fûe
 =

637 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_DRIVER_LOG_TO_FILE
);

638 
drivî_log_to_fûe_≠≥nd
 =

639 !!(
ã°s
[
i
].
Êags
 & 
CTS_TEST_FLAG_DRIVER_LOG_TO_FILE_APPEND
);

641 i‡(
ã°s
[
i
].
ã°_ªsu…
 =
NULL
) {

642 
	`˘s_îr
("ResultÖointer = NULL");

643  -
EFAULT
;

646 i‡(
vÆid©e_d©a
) {

647 
	`˘s_öfo
(" - Flag: Validate data");

649 i‡(
vÆid©e_d©a_≥r_node
) {

650 
	`˘s_öfo
(" - Flag: Validate dataÖer-node");

652 i‡(
vÆid©e_mö
) {

653 
	`˘s_öfo
(" - Flag: Validate minÅhreshold");

655 i‡(
vÆid©e_max
) {

656 
	`˘s_öfo
(" - Flag: Validate maxÅhreshold");

658 i‡(
°›_ã°_if_vÆid©e_Áû
) {

659 
	`˘s_öfo
(" - Flag: StopÅest if validate fail");

662 i‡(
vÆid©e_mö
 && 
ã°s
[
i
].
mö
 =
NULL
) {

663 
	`˘s_îr
("MinÅhresholdÖointer = NULL");

664 
ªt
 = -
EINVAL
;

665 
°‹e_ªsu…
;

667 i‡(
vÆid©e_max
 && 
ã°s
[
i
].
max
 =
NULL
) {

668 
	`˘s_îr
("MaxÅhresholdÖointer = NULL");

669 
ªt
 = -
EINVAL
;

670 
°‹e_ªsu…
;

672 i‡(
skù_övÆid_node
) {

673 
	`˘s_öfo
(" - Flag: Skip invalidÇode");

675 i‡(
ã°s
[
i
].
num_övÆid_node
 == 0 ||

676 
ã°s
[
i
].
num_övÆid_node
 >
num_nodes
) {

677 
	`˘s_îr
("Num invalidÇode %u out ofÑange[0, %u]",

678 
ã°s
[
i
].
num_övÆid_node
, 
num_nodes
);

679 
ªt
 = -
EINVAL
;

680 
°‹e_ªsu…
;

683 i‡(
ã°s
[
i
].
övÆid_nodes
 =
NULL
) {

684 
	`˘s_îr
("InvalidÇodesÖointer = NULL");

685 
ªt
 = -
EINVAL
;

686 
°‹e_ªsu…
;

691 i‡(
dump_ã°_d©e_to_c⁄sﬁe
) {

692 
	`˘s_öfo
(" - Flag: DumpÅest dataÅo console");

695 i‡(
dump_ã°_d©e_to_u£r
) {

696 
	`˘s_öfo
(" - Flag: DumpÅest dataÅo user, size: %d",

697 
ã°s
[
i
].
ã°_d©a_buf_size
);

699 i‡(
ã°s
[
i
].
ã°_d©a_buf
 =
NULL
) {

700 
	`˘s_îr
("Test dataÖointer = NULL");

701 
ªt
 = -
EINVAL
;

702 
°‹e_ªsu…
;

704 i‡(
ã°s
[
i
].
ã°_d©a_wr_size
 =
NULL
) {

705 
	`˘s_îr
("Test data write sizeÖointer = NULL");

706 
ªt
 = -
EINVAL
;

707 
°‹e_ªsu…
;

709 i‡(
ã°s
[
i
].
ã°_d©a_buf_size
 < 
num_nodes
) {

710 
	`˘s_îr
("Test data size %dÅoo small < %u",

711 
ã°s
[
i
].
ã°_d©a_buf_size
, 
num_nodes
);

712 
ªt
 = -
EINVAL
;

713 
°‹e_ªsu…
;

717 i‡(
dump_ã°_d©e_to_fûe
) {

718 
	`˘s_öfo
(" - Flag: DumpÅest dataÅo file%s",

719 
dump_ã°_d©e_to_fûe_≠≥nd
 ? "[Append]" : "");

721 i‡(
ã°s
[
i
].
ã°_d©a_fûï©h
 =
NULL
) {

722 
	`˘s_îr
("Test data filepath = NULL");

723 
ªt
 = -
EINVAL
;

724 
°‹e_ªsu…
;

728 i‡(
drivî_log_to_u£r
) {

729 
	`˘s_öfo
(" - Flag: Dump driverÜogÅo user, size: %d",

730 
ã°s
[
i
].
drivî_log_buf_size
);

732 i‡(
ã°s
[
i
].
drivî_log_buf
 =
NULL
) {

733 
	`˘s_îr
("DriverÜog bufÖointer = NULL");

734 
ªt
 = -
EINVAL
;

735 
°‹e_ªsu…
;

737 i‡(
ã°s
[
i
].
drivî_log_wr_size
 =
NULL
) {

738 
	`˘s_îr
("DriverÜog write sizeÖointer = NULL");

739 
ªt
 = -
EINVAL
;

740 
°‹e_ªsu…
;

742 i‡(
ã°s
[
i
].
drivî_log_buf_size
 < 1024) {

743 
	`˘s_îr
("DriverÜog buf size %dÅoo small < 1024",

744 
ã°s
[
i
].
ã°_d©a_buf_size
);

745 
ªt
 = -
EINVAL
;

746 
°‹e_ªsu…
;

750 i‡(
drivî_log_to_fûe
) {

751 
	`˘s_öfo
(" - Flag: Dump driverÜogÅo file",

752 
drivî_log_to_fûe_≠≥nd
 ? "[Append]" : "");

754 i‡(
ã°s
[
i
].
drivî_log_fûï©h
 =
NULL
) {

755 
	`˘s_îr
("DriverÜog filepath = NULL");

756 
ªt
 = -
EINVAL
;

757 
°‹e_ªsu…
;

766 
u£r_ã°_ªsu…
 = (
__u£r
 *)
ã°s
[
i
].
ã°_ªsu…
;

767 
ã°s
[
i
].
ã°_ªsu…
 = &test_result;

769 i‡(
vÆid©e_d©a
) {

770 
num_thªshﬁd
 = 
vÆid©e_d©a_≥r_node
 ? 
num_nodes
 : 1;

771 
thªshﬁd_size
 = 
num_thªshﬁd
 * (
ã°s
[
i
].
mö
[0]);

773 i‡(
vÆid©e_mö
) {

774 
u£r_mö_thªshﬁd
 = (
__u£r
 *)
ã°s
[
i
].
mö
;

775 
ã°s
[
i
].
mö
 = 
	`memdup_u£r
(
u£r_mö_thªshﬁd
, 
thªshﬁd_size
);

776 i‡(
	`IS_ERR
(
ã°s
[
i
].
mö
)) {

777 
ªt
 = 
	`PTR_ERR
(
ã°s
[
i
].
mö
);

778 
ã°s
[
i
].
mö
 = 
NULL
;

779 
	`˘s_îr
("Memdu∞möÅhªshﬁd from u£∏Áûed %d", 
ªt
);

780 
°‹e_ªsu…
;

783 
ã°s
[
i
].
mö
 = 
NULL
;

785 i‡(
vÆid©e_max
) {

786 
u£r_max_thªshﬁd
 = (
__u£r
 *)
ã°s
[
i
].
max
;

787 
ã°s
[
i
].
max
 = 
	`memdup_u£r
(
u£r_max_thªshﬁd
, 
thªshﬁd_size
);

788 i‡(
	`IS_ERR
(
ã°s
[
i
].
max
)) {

789 
ªt
 = 
	`PTR_ERR
(
ã°s
[
i
].
max
);

790 
ã°s
[
i
].
max
 = 
NULL
;

791 
	`˘s_îr
("Memdu∞maxÅhªshﬁd from u£∏Áûed %d", 
ªt
);

792 
°‹e_ªsu…
;

795 
ã°s
[
i
].
max
 = 
NULL
;

797 i‡(
skù_övÆid_node
) {

798 
u£r_övÆid_nodes
 = (
u32
 
__u£r
 *)
ã°s
[
i
].
övÆid_nodes
;

799 
ã°s
[
i
].
övÆid_nodes
 = 
	`memdup_u£r
(
u£r_övÆid_nodes
,

800 
ã°s
[
i
].
num_övÆid_node
 * —e°s[i].
övÆid_nodes
[0]));

801 i‡(
	`IS_ERR
(
ã°s
[
i
].
övÆid_nodes
)) {

802 
ªt
 = 
	`PTR_ERR
(
ã°s
[
i
].
övÆid_nodes
);

803 
ã°s
[
i
].
övÆid_nodes
 = 
NULL
;

804 
	`˘s_îr
("Memdu∞övÆidÇodê‰om u£∏Áûed %d", 
ªt
);

805 
°‹e_ªsu…
;

810 i‡(
dump_ã°_d©e_to_u£r
) {

811 
u£r_ã°_d©a
 = (
__u£r
 *)
ã°s
[
i
].
ã°_d©a_buf
;

812 
ã°s
[
i
].
ã°_d©a_buf
 = 
	`kmÆloc
—e°s[i].
ã°_d©a_buf_size
, 
GFP_KERNEL
);

813 i‡(
ã°s
[
i
].
ã°_d©a_buf
 =
NULL
) {

814 
ªt
 = -
ENOMEM
;

815 
	`˘s_îr
("AllocÅest data mem failed");

816 
°‹e_ªsu…
;

818 
u£r_ã°_d©a_wr_size
 = (
__u£r
 *)
ã°s
[
i
].
ã°_d©a_wr_size
;

819 
ã°s
[
i
].
ã°_d©a_wr_size
 = &test_data_wr_size;

822 i‡(
dump_ã°_d©e_to_fûe
) {

823 
u£r_ã°_d©a_fûï©h
 = (c⁄° 
__u£r
 *)
ã°s
[
i
].
ã°_d©a_fûï©h
;

824 
ã°s
[
i
].
ã°_d©a_fûï©h
 = 
	`°∫dup_u£r
(
u£r_ã°_d©a_fûï©h
, 
PATH_MAX
);

825 i‡(
ã°s
[
i
].
ã°_d©a_fûï©h
 =
NULL
) {

826 
	`˘s_îr
("StrdupÅest data filepath failed");

827 
°‹e_ªsu…
;

829 
	`˘s_°¨t_dump_ã°_d©a_to_fûe
(
ã°s
[
i
].
ã°_d©a_fûï©h
,

830 
dump_ã°_d©e_to_fûe_≠≥nd
);

833 i‡(
drivî_log_to_u£r
) {

834 
u£r_drivî_log_buf
 = (
__u£r
 *)
ã°s
[
i
].
drivî_log_buf
;

835 
ã°s
[
i
].
drivî_log_buf
 = 
	`kmÆloc
—e°s[i].
drivî_log_buf_size
, 
GFP_KERNEL
);

836 i‡(
ã°s
[
i
].
drivî_log_buf
 =
NULL
) {

837 
ªt
 = -
ENOMEM
;

838 
	`˘s_îr
("Alloc driverÜog mem failed");

839 
°‹e_ªsu…
;

841 
u£r_drivî_log_wr_size
 = (
__u£r
 *)
ã°s
[
i
].
drivî_log_wr_size
;

842 
ã°s
[
i
].
drivî_log_wr_size
 = &driver_log_wr_size;

845 i‡(
drivî_log_to_fûe
) {

846 
u£r_drivî_log_fûï©h
 = (c⁄° 
__u£r
 *)
ã°s
[
i
].
drivî_log_fûï©h
;

847 
ã°s
[
i
].
drivî_log_fûï©h
 = 
	`°∫dup_u£r
(
u£r_drivî_log_fûï©h
, 
PATH_MAX
);

848 i‡(
ã°s
[
i
].
drivî_log_fûï©h
 =
NULL
) {

849 
	`˘s_îr
("Strdup driverÜog filepath failed");

850 
°‹e_ªsu…
;

852 
	`˘s_öfo
("Log drivîÜogÅÿfûê'%s'", 
ã°s
[
i
].
drivî_log_fûï©h
);

855 i‡(
drivî_log_to_fûe
 || 
drivî_log_to_u£r
) {

856 
ªt
 = 
	`˘s_°¨t_drivî_log_ªdúe˘
(

857 
ã°s
[
i
].
drivî_log_fûï©h
, 
drivî_log_to_fûe_≠≥nd
,

858 
ã°s
[
i
].
drivî_log_buf
,Åe°s[i].
drivî_log_buf_size
,

859 
ã°s
[
i
].
drivî_log_Àvñ
);

860 i‡(
ªt
) {

861 
	`˘s_îr
("Sèπ drivîÜogÑedúe˘ faûed %d", 
ªt
);

862 
°‹e_ªsu…
;

866 i‡(
ã°s
[
i
].
¥iv_∑øm_size
 &&Åe°s[i].
¥iv_∑øm
) {

867 
u£r_¥iv_∑øm
 = (
__u£r
 *)
ã°s
[
i
].
¥iv_∑øm
;

868 
ã°s
[
i
].
¥iv_∑øm
 = 
	`memdup_u£r
(
u£r_¥iv_∑øm
,Åe°s[i].
¥iv_∑øm_size
);

869 i‡(
	`IS_ERR
(
ã°s
[
i
].
¥iv_∑øm
)) {

870 
ªt
 = 
	`PTR_ERR
(
ã°s
[
i
].
¥iv_∑øm
);

871 
ã°s
[
i
].
¥iv_∑øm
 = 
NULL
;

872 
	`˘s_îr
("Memdu∞¥ivÖ¨am from u£∏Áûed %d", 
ªt
);

873 
°‹e_ªsu…
;

880 
ã°s
[
i
].
ã°_ôem
) {

881 
CTS_TEST_RESET_PIN
:

882 
ªt
 = 
	`˘s_ã°_ª£t_pö
(
˘s_dev
, &
ã°s
[
i
]);

884 
CTS_TEST_INT_PIN
:

885 
ªt
 = 
	`˘s_ã°_öt_pö
(
˘s_dev
, &
ã°s
[
i
]);

887 
CTS_TEST_RAWDATA
:

888 
ªt
 = 
	`˘s_ã°_øwd©a
(
˘s_dev
, &
ã°s
[
i
]);

890 
CTS_TEST_NOISE
:

891 
ªt
 = 
	`˘s_ã°_noi£
(
˘s_dev
, &
ã°s
[
i
]);

893 
CTS_TEST_OPEN
:

894 
ªt
 = 
	`˘s_ã°_›í
(
˘s_dev
, &
ã°s
[
i
]);

896 
CTS_TEST_SHORT
:

897 
ªt
 = 
	`˘s_ã°_sh‹t
(
˘s_dev
, &
ã°s
[
i
]);

899 
CTS_TEST_COMPENSATE_CAP
:

900 
ªt
 = 
	`˘s_ã°_com≥nßã_ˇp
(
˘s_dev
, &
ã°s
[
i
]);

903 
ªt
 = 
ENOTSUPP
;

904 
	`˘s_îr
("Un-supportedÅest item");

911 
°‹e_ªsu…
:

912 i‡(
dump_ã°_d©e_to_u£r
) {

913 i‡(
u£r_ã°_d©a
 !
NULL
 && 
ã°_d©a_wr_size
 > 0) {

914 
	`˘s_öfo
("C›yÅe° d©®tÿu£r, size: %d", 
ã°_d©a_wr_size
);

915 i‡(
	`c›y_to_u£r
(
u£r_ã°_d©a
, 
ã°s
[
i
].
ã°_d©a_buf
,

916 
ã°_d©a_wr_size
)) {

917 
	`˘s_îr
("CopyÅest dataÅo user failed");

918 
ã°_d©a_wr_size
 = 0;

923 i‡(
u£r_ã°_d©a_wr_size
 !
NULL
) {

924 
	`put_u£r
(
ã°_d©a_wr_size
, 
u£r_ã°_d©a_wr_size
);

928 i‡(
drivî_log_to_u£r
) {

929 
drivî_log_wr_size
 = 
	`˘s_gë_drivî_log_ªdúe˘_size
();

930 i‡(
u£r_drivî_log_buf
 !
NULL
 && 
drivî_log_wr_size
 > 0) {

931 
	`˘s_öfo
("C›y drivîÜogÅÿu£r, size: %d", 
drivî_log_wr_size
);

932 i‡(
	`c›y_to_u£r
(
u£r_drivî_log_buf
, 
ã°s
[
i
].
drivî_log_buf
,

933 
drivî_log_wr_size
)) {

934 
	`˘s_îr
("Copy driverÜogÅo user failed");

935 
drivî_log_wr_size
 = 0;

940 i‡(
u£r_drivî_log_wr_size
 !
NULL
) {

941 
	`put_u£r
(
drivî_log_wr_size
, 
u£r_drivî_log_wr_size
);

945 i‡(
u£r_ã°_ªsu…
 !
NULL
) {

946 
	`put_u£r
(
ªt
, 
u£r_ã°_ªsu…
);

947 } i‡(
ã°s
[
i
].
ã°_ªsu…
 !
NULL
){

948 
	`put_u£r
(
ªt
, 
ã°s
[
i
].
ã°_ªsu…
);

954 i‡(
dump_ã°_d©e_to_u£r
) {

955 i‡(
u£r_ã°_d©a
 !
NULL
 && 
ã°s
[
i
].
ã°_d©a_buf
 != NULL) {

956 
	`k‰ì
(
ã°s
[
i
].
ã°_d©a_buf
);

959 i‡(
vÆid©e_d©a
) {

960 i‡(
vÆid©e_mö
 && 
u£r_mö_thªshﬁd
 !
NULL
 && 
ã°s
[
i
].
mö
 != NULL) {

961 
	`k‰ì
(
ã°s
[
i
].
mö
);

963 i‡(
vÆid©e_max
 && 
u£r_max_thªshﬁd
 !
NULL
 && 
ã°s
[
i
].
max
 != NULL) {

964 
	`k‰ì
(
ã°s
[
i
].
max
);

966 i‡(
skù_övÆid_node
) {

967 i‡(
u£r_övÆid_nodes
 !
NULL
 && 
ã°s
[
i
].
övÆid_nodes
 != NULL) {

968 
	`k‰ì
(
ã°s
[
i
].
övÆid_nodes
);

973 i‡(
dump_ã°_d©e_to_fûe
) {

974 
	`˘s_°›_dump_ã°_d©a_to_fûe
();

976 i‡(
u£r_ã°_d©a_fûï©h
 !
NULL
 &&

977 
ã°s
[
i
].
ã°_d©a_fûï©h
 !
NULL
) {

978 
	`k‰ì
(
ã°s
[
i
].
ã°_d©a_fûï©h
);

982 i‡(
drivî_log_to_u£r
) {

983 i‡(
u£r_drivî_log_buf
 !
NULL
 &&

984 
ã°s
[
i
].
drivî_log_buf
 !
NULL
) {

985 
	`k‰ì
(
ã°s
[
i
].
drivî_log_buf
);

989 i‡(
drivî_log_to_fûe
) {

990 i‡(
u£r_drivî_log_fûï©h
 !
NULL
 &&

991 
ã°s
[
i
].
drivî_log_fûï©h
 !
NULL
) {

992 
	`k‰ì
(
ã°s
[
i
].
drivî_log_fûï©h
);

996 i‡(
drivî_log_to_fûe
 || 
drivî_log_to_u£r
) {

997 
	`˘s_°›_drivî_log_ªdúe˘
();

1000 i‡(
u£r_¥iv_∑øm
 && 
ã°s
[
i
].
¥iv_∑øm
) {

1001 
	`k‰ì
(
ã°s
[
i
].
¥iv_∑øm
);

1004 i‡(
ªt
 && 
°›_ã°_if_vÆid©e_Áû
) {

1009 
	`k‰ì
(
ã°s
);

1011  
ªt
;

1012 
	}
}

1014 
	$˘s_io˘l_rdwr_ªg
(
˘s_devi˚
 *
˘s_dev
,

1015 
u8
 
ªg_ty≥
, 
u32
 
ƒegs
, 
˘s_rdwr_ªg
 *
ªgs
)

1017 
i
, 
ªt
 = 0;

1018 
boﬁ
 
fw_esd_¥Ÿe˘
 = 
Ál£
;

1020 
	`˘s_öfo
("io˘»RDWR_REGÅy≥: %uÅŸÆ %uÑegs", 
ªg_ty≥
, 
ƒegs
);

1022 
	`˘s_lock_devi˚
(
˘s_dev
);

1024 i‡(
ªg_ty≥
 =
CTS_IOCTL_RDWR_REG_TYPE_DDI
) {

1025 
ªt
 = 
	`˘s_gë_dev_esd_¥Ÿe˘i⁄
(
˘s_dev
, &
fw_esd_¥Ÿe˘
);

1026 i‡(
ªt
) {

1027 
	`˘s_îr
("Gë fwÉsdÖrŸe˘i⁄ faûed %d", 
ªt
);

1028 
u∆ock_devi˚
;

1031 i‡(
fw_esd_¥Ÿe˘
) {

1032 
ªt
 = 
	`˘s_£t_dev_esd_¥Ÿe˘i⁄
(
˘s_dev
, 
Ál£
);

1033 i‡(
ªt
) {

1034 
	`˘s_îr
("Së fwÉsdÖrŸe˘i⁄ faûed %d", 
ªt
);

1035 
u∆ock_devi˚
;

1039 
ªt
 = 
˘s_dev
->
hwd©a
->
	`íabÀ_ac˚ss_ddi_ªg
(˘s_dev, 
åue
);

1040 i‡(
ªt
) {

1041 
	`˘s_îr
("E«bÀác˚s†ddòªg faûed %d", 
ªt
);

1042 
ªcovîy_fw_esd_¥Ÿe˘
;

1046 
i
 = 0; i < 
ƒegs
; i++) {

1047 
˘s_rdwr_ªg
 *
ªg
 = 
ªgs
 + 
i
;

1048 
u8
 *
d©a
 = 
NULL
;

1050 
	`˘s_dbg
("Ñeg: %p flags: 0x%x data: %pÜen: %u delay: %u",

1051 
ªg
,Ñeg->
Êags
,Ñeg->
d©a
,Ñeg->
Àn
,Ñeg->
dñay_ms
);

1053 i‡(
ªg
->
d©a
 =
NULL
 ||Ñeg->
Àn
 == 0) {

1054 
	`˘s_îr
("RdwrÑeg(addr: 0x%06x) with data: %p orÜen: %u",

1055 
ªg
->
addr
,Ñeg->
d©a
,Ñeg->
Àn
);

1056 
ªt
 = -
EINVAL
;

1057 
dißbÀ_ac˚ss_ddi_ªg
;

1060 i‡(
ªg
->
Êags
 & 
CTS_IOCTL_RDWR_REG_FLAG_RD
) {

1061 
u8
 
__u£r
 *
u£r_d©a
 = 
ªg
->
d©a
;

1063 
d©a
 = 
	`kmÆloc
(
ªg
->
Àn
, 
GFP_KERNEL
);

1064 i‡(
d©a
 =
NULL
) {

1065 
	`˘s_îr
("Alloc mem forÑeadÑeg(addr: 0x%06xÜen: %u) data failed",

1066 
ªg
->
addr
,Ñeg->
Àn
);

1067 
ªt
 = -
ENOMEM
;

1068 
dißbÀ_ac˚ss_ddi_ªg
;

1070 i‡(
ªg_ty≥
 =
CTS_IOCTL_RDWR_REG_TYPE_FW
) {

1071 
ªt
 = 
	`˘s_fw_ªg_ªadsb
(
˘s_dev
,

1072 
ªgs
->
addr
, 
d©a
, 
ªg
->
Àn
);

1074 
ªt
 = 
	`˘s_hw_ªg_ªadsb
(
˘s_dev
,

1075 
ªgs
->
addr
, 
d©a
, 
ªg
->
Àn
);

1077 i‡(
ªt
) {

1078 
	`k‰ì
(
d©a
);

1079 
	`˘s_îr
("ReadÑeg fromáddr: 0x%06xÜen: %u failed %d",

1080 
ªg
->
addr
,Ñeg->
Àn
, 
ªt
);

1081 
dißbÀ_ac˚ss_ddi_ªg
;

1083 i‡(
	`c›y_to_u£r
(
u£r_d©a
, 
d©a
, 
ªg
->
Àn
)) {

1084 
	`k‰ì
(
d©a
);

1085 
	`˘s_îr
("CopyÑeg(addr: 0x%06xÜen: %u) dataÅo user failed",

1086 
ªg
->
addr
,Ñeg->
Àn
);

1088 
	`k‰ì
(
d©a
);

1090 
d©a
 = 
	`memdup_u£r
(
ªg
->d©a,Ñeg->
Àn
);

1091 i‡(
	`IS_ERR
(
d©a
)) {

1092 
ªt
 = 
	`PTR_ERR
(
d©a
);

1093 
	`˘s_îr
("MemdupÑeg(addr: 0x%06xÜen: %u) data from user failed",

1094 
ªg
->
addr
,Ñeg->
Àn
);

1095 
dißbÀ_ac˚ss_ddi_ªg
;

1097 i‡(
ªg_ty≥
 =
CTS_IOCTL_RDWR_REG_TYPE_FW
) {

1098 
ªt
 = 
	`˘s_fw_ªg_wrôesb
(
˘s_dev
,

1099 
ªgs
->
addr
, 
d©a
, 
ªg
->
Àn
);

1101 
ªt
 = 
	`˘s_hw_ªg_wrôesb
(
˘s_dev
,

1102 
ªgs
->
addr
, 
d©a
, 
ªg
->
Àn
);

1104 
	`k‰ì
(
d©a
);

1105 i‡(
ªt
) {

1106 
	`˘s_îr
("WriteÑeg fromáddr 0x%06xÜen %u failed %d",

1107 
ªg
->
addr
,Ñeg->
Àn
, 
ªt
);

1108 
dißbÀ_ac˚ss_ddi_ªg
;

1112 i‡(
ªg
->
dñay_ms
) {

1113 
	`mdñay
(
ªg
->
dñay_ms
);

1117 
dißbÀ_ac˚ss_ddi_ªg
:

1118 i‡(
ªg_ty≥
 =
CTS_IOCTL_RDWR_REG_TYPE_DDI
) {

1119 
r
 = 
˘s_dev
->
hwd©a
->
	`íabÀ_ac˚ss_ddi_ªg
(˘s_dev, 
Ál£
);

1120 i‡(
r
) {

1121 
	`˘s_îr
("DißbÀác˚s†ddòªg faûed %d", 
r
);

1125 
ªcovîy_fw_esd_¥Ÿe˘
:

1126 i‡(
ªg_ty≥
 =
CTS_IOCTL_RDWR_REG_TYPE_DDI
 && 
fw_esd_¥Ÿe˘
) {

1127 
r
 = 
	`˘s_£t_dev_esd_¥Ÿe˘i⁄
(
˘s_dev
, 
åue
);

1128 i‡(
r
) {

1129 
	`˘s_îr
("Re-E«bÀ fwÉsdÖrŸe˘i⁄ faûed %d", 
r
);

1133 
u∆ock_devi˚
:

1134 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1136 
	`k‰ì
(
ªgs
);

1138  
ªt
;

1139 
	}
}

1141 
	$˘s_io˘l_upgøde_fw
(
˘s_devi˚
 *
˘s_dev
,

1142 
˘s_upgøde_fw_io˘l_d©a
 *
io˘l_d©a
)

1144 
boﬁ
 
to_Êash
;

1145 
ªt
;

1147 
	`˘s_öfo
("ioctl UPGRADE-FW flags: 0x%x "

1149 
io˘l_d©a
->
Êags
,

1150 
io˘l_d©a
->
buûtö_fw_ödex
, io˘l_d©a->
fûï©h
,

1151 
io˘l_d©a
->
fw_d©a
, io˘l_d©a->
fw_d©a_size
);

1153 
to_Êash
 = !!(
io˘l_d©a
->
Êags
 & 
CTS_IOCTL_UPGRADE_FW_FLAG_TO_FLASH
);

1155 i‡(!!(
io˘l_d©a
->
Êags
 & 
CTS_IOCTL_UPGRADE_FW_FLAG_BUILTIN
)) {

1156 c⁄° 
˘s_fúmw¨e
 *
fúmw¨e
;

1158 
fúmw¨e
 = 
	`˘s_ªque°_drivî_buûtö_fúmw¨e_by_ödex
(

1159 
io˘l_d©a
->
buûtö_fw_ödex
);

1160 i‡(
fúmw¨e
) {

1161 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

1162 i‡(
ªt
) {

1163 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

1164  
ªt
;

1167 
	`˘s_lock_devi˚
(
˘s_dev
);

1168 
ªt
 = 
	`˘s_upd©e_fúmw¨e
(
˘s_dev
, 
fúmw¨e
, 
to_Êash
);

1169 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1171 i‡(
ªt
) {

1172 
	`˘s_îr
("Upd©êfúmw¨êÁûed %d", 
ªt
);

1175 
	`˘s_°¨t_devi˚
(
˘s_dev
);

1177  
ªt
;

1179 
	`˘s_îr
("Upgrade fw by builtin NOT found index %u",

1180 
io˘l_d©a
->
buûtö_fw_ödex
);

1181  -
EINVAL
;

1185 i‡(!!(
io˘l_d©a
->
Êags
 & 
CTS_IOCTL_UPGRADE_FW_FLAG_FILE
)) {

1186 *
fûï©h
;

1188 i‡(
io˘l_d©a
->
fûï©h
 =
NULL
) {

1189 
	`˘s_îr
("Upgrade fw by file with filepath = NULL");

1190  -
EINVAL
;

1193 
fûï©h
 = 
	`°∫dup_u£r
(
io˘l_d©a
->fûï©h, 
PATH_MAX
);

1194 i‡(
	`IS_ERR
(
fûï©h
)) {

1195 
ªt
 = 
	`PTR_ERR
(
fûï©h
);

1196 
	`˘s_îr
("Memdum∞fûï©hÅÿkî√»Áûed %d", 
ªt
);

1197  
ªt
;

1200 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

1201 i‡(
ªt
) {

1202 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

1203  
ªt
;

1206 
	`˘s_lock_devi˚
(
˘s_dev
);

1207 
ªt
 = 
	`˘s_upd©e_fúmw¨e_‰om_fûe
(
˘s_dev
,

1208 
fûï©h
, 
to_Êash
);

1209 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1211 i‡(
ªt
) {

1212 
	`˘s_îr
("Upgødêfw from fûê'%s' faûed %d", 
fûï©h
);

1214 
	`k‰ì
(
fûï©h
);

1216 
	`˘s_°¨t_devi˚
(
˘s_dev
);

1218  
ªt
;

1221 i‡(!!(
io˘l_d©a
->
Êags
 & 
CTS_IOCTL_UPGRADE_FW_FLAG_FW_DATA
)) {

1222 
˘s_fúmw¨e
 
fúmw¨e
;

1224 i‡(
io˘l_d©a
->
fw_d©a
 =
NULL
 ||

1225 
io˘l_d©a
->
fw_d©a_size
 < 0x102 ||

1226 
io˘l_d©a
->
fw_d©a_size
 > 0x20000) {

1227 
	`˘s_îr
("Upgrade fw by data with "

1229 
io˘l_d©a
->
fw_d©a
, io˘l_d©a->
fw_d©a_size
);

1230  -
EINVAL
;

1233 
	`mem£t
(&
fúmw¨e
, 0, (firmware));

1234 
fúmw¨e
.
d©a
 = 
	`memdup_u£r
(
io˘l_d©a
->
fw_d©a
,

1235 
io˘l_d©a
->
fw_d©a_size
);

1236 i‡(
	`IS_ERR
(
fúmw¨e
.
d©a
)) {

1237 
ªt
 = 
	`PTR_ERR
(
fúmw¨e
.
d©a
);

1238 
	`˘s_îr
("Memdum∞fw d©®tÿkî√»Áûed %d", 
ªt
);

1239  
ªt
;

1241 
fúmw¨e
.
size
 = 
io˘l_d©a
->
fw_d©a_size
;

1243 
ªt
 = 
	`˘s_°›_devi˚
(
˘s_dev
);

1244 i‡(
ªt
) {

1245 
	`˘s_îr
("St› devi˚ faûed %d", 
ªt
);

1246  
ªt
;

1249 
	`˘s_lock_devi˚
(
˘s_dev
);

1250 
ªt
 = 
	`˘s_upd©e_fúmw¨e
(
˘s_dev
, &
fúmw¨e
, 
to_Êash
);

1251 
	`˘s_u∆ock_devi˚
(
˘s_dev
);

1253 i‡(
ªt
) {

1254 
	`˘s_îr
("Upgødêfúmw¨êd©®Áûed %d", 
ªt
);

1256 
	`k‰ì
(
fúmw¨e
.
d©a
);

1258 
	`˘s_°¨t_devi˚
(
˘s_dev
);

1262 
	`˘s_îr
("ioctl UPGRADE-FW both filepathánd data = NULL");

1263  -
EINVAL
;

1265 
	}
}

1267 
	$˘s_toﬁ_io˘l
(
fûe
 *fûe, 
cmd
,

1268 
¨g
)

1270 
chù⁄e_ts_d©a
 *
˘s_d©a
;

1271 
˘s_devi˚
 *
˘s_dev
;

1273 
	`˘s_öfo
("io˘l, cmd=0x%08x,árg=0x%08lx", 
cmd
, 
¨g
);

1275 
˘s_d©a
 = 
fûe
->
¥iv©e_d©a
;

1276 i‡(
˘s_d©a
 =
NULL
) {

1277 
	`˘s_îr
("IOCTL withÖrivate data = NULL");

1278  -
EFAULT
;

1281 
˘s_dev
 = &
˘s_d©a
->cts_dev;

1283 
cmd
) {

1284 
CTS_TOOL_IOCTL_GET_DRIVER_VERSION
:

1285  
	`put_u£r
(
CTS_DRIVER_VERSION_CODE
,

1286 (
__u£r
 *)
¨g
);

1287 
CTS_TOOL_IOCTL_GET_DEVICE_TYPE
:

1288  
	`put_u£r
(
˘s_dev
->
hwd©a
->
hwid
,

1289 (
__u£r
 *)
¨g
);

1290 
CTS_TOOL_IOCTL_GET_FW_VERSION
:

1291  
	`put_u£r
(
˘s_dev
->
fwd©a
.
vîsi⁄
,

1292 (
__u£r
 *)
¨g
);

1293 
CTS_TOOL_IOCTL_GET_RESOLUTION
:

1294  
	`put_u£r
((
˘s_dev
->
fwd©a
.
ªs_y
 << 16Ë+ cts_dev->fwd©a.
ªs_x
,

1295 (
__u£r
 *)
¨g
);

1296 
CTS_TOOL_IOCTL_GET_ROW_COL
:

1297  
	`put_u£r
((
˘s_dev
->
fwd©a
.
cﬁs
 << 16Ë+ cts_dev->fwd©a.
rows
,

1298 (
__u£r
 *)
¨g
);

1300 
CTS_TOOL_IOCTL_TEST
:{

1301 
˘s_ã°_io˘l_d©a
 
ã°_¨g
;

1302 
˘s_ã°_∑øm
 *
ã°s_∑
;

1304 i‡(
	`c›y_‰om_u£r
(&
ã°_¨g
,

1305 (
˘s_ã°_io˘l_d©a
 
__u£r
 *)
¨g
,

1306 (
ã°_¨g
))) {

1307 
	`˘s_îr
("Copy ioctlÅestárgÅo kernel failed");

1308  -
EFAULT
;

1311 i‡(
ã°_¨g
.
¡e°s
 > 8) {

1312 
	`˘s_îr
("ioctlÅest withÅoo manyÅests %u",

1313 
ã°_¨g
.
¡e°s
);

1314  -
EINVAL
;

1317 
ã°s_∑
 = 
	`memdup_u£r
(
ã°_¨g
.
ã°s
,

1318 
ã°_¨g
.
¡e°s
 * (
˘s_ã°_∑øm
));

1319 i‡(
	`IS_ERR
(
ã°s_∑
)) {

1320 
ªt
 = 
	`PTR_ERR
(
ã°s_∑
);

1321 
	`˘s_îr
("Memdum∞ã°Ö¨amÅÿkî√»Áûed %d", 
ªt
);

1322  
ªt
;

1325  
	`˘s_io˘l_ã°
(
˘s_dev
, 
ã°_¨g
.
¡e°s
, 
ã°s_∑
);

1327 
CTS_TOOL_IOCTL_RDWR_REG
:{

1328 
˘s_rdwr_ªg_io˘l_d©a
 
io˘l_d©a
;

1329 
˘s_rdwr_ªg
 *
ªgs_∑
;

1331 i‡(
	`c›y_‰om_u£r
(&
io˘l_d©a
,

1332 (
˘s_rdwr_ªg_io˘l_d©a
 
__u£r
 *)
¨g
,

1333 (
io˘l_d©a
))) {

1334 
	`˘s_îr
("Copy ioctlÑdwr_regárgÅo kernel failed");

1335  -
EFAULT
;

1338 i‡(
io˘l_d©a
.
ƒegs
 > 
CTS_RDWR_REG_IOCTL_MAX_REGS
) {

1339 
	`˘s_îr
("ioctlÑdwr_reg withÅoo manyÑegs %u",

1340 
io˘l_d©a
.
ƒegs
);

1341  -
EINVAL
;

1344 
ªgs_∑
 = 
	`memdup_u£r
(
io˘l_d©a
.
ªgs
,

1345 
io˘l_d©a
.
ƒegs
 * (
˘s_rdwr_ªg
));

1346 i‡(
	`IS_ERR
(
ªgs_∑
)) {

1347 
ªt
 = 
	`PTR_ERR
(
ªgs_∑
);

1348 
	`˘s_îr
("Memdum∞˘s_rdwr_ªgÅÿkî√»Áûed %d", 
ªt
);

1349  
ªt
;

1352  
	`˘s_io˘l_rdwr_ªg
(
˘s_dev
,

1353 
io˘l_d©a
.
ªg_ty≥
, io˘l_d©a.
ƒegs
, 
ªgs_∑
);

1355 
CTS_TOOL_IOCTL_UPGRADE_FW
:{

1356 
˘s_upgøde_fw_io˘l_d©a
 
io˘l_d©a
;

1358 i‡(
	`c›y_‰om_u£r
(&
io˘l_d©a
,

1359 (
˘s_upgøde_fw_io˘l_d©a
 
__u£r
 *)
¨g
,

1360 (
io˘l_d©a
))) {

1361 
	`˘s_îr
("Copy ioctl UPGRADE-FWárgÅo kernel failed");

1362  -
EFAULT
;

1365  
	`˘s_io˘l_upgøde_fw
(
˘s_dev
, &
io˘l_d©a
);

1368 
	`˘s_îr
("Unsuµ‹ãd io˘»cmd=0x%08x,árg=0x%08lx", 
cmd
, 
¨g
);

1372  -
ENOTSUPP
;

1373 
	}
}

1375 
fûe_›î©i⁄s
 
	g˘s_toﬁ_f›s
 = {

1376 .
ow√r
 = 
THIS_MODULE
,

1377 .
	gŒ£ek
 = 
no_Œ£ek
,

1378 .
	g›í
 = 
˘s_toﬁ_›í
,

1379 .
	gªad
 = 
˘s_toﬁ_ªad
,

1380 .
	gwrôe
 = 
˘s_toﬁ_wrôe
,

1381 .
	gu∆ocked_io˘l
 = 
˘s_toﬁ_io˘l
,

1384 
	$˘s_toﬁ_öô
(
chù⁄e_ts_d©a
 *
˘s_d©a
)

1386 
	`˘s_öfo
("Init");

1388 
˘s_d©a
->
¥ocfs_íåy
 = 
	`¥oc_¸óã_d©a
(
CFG_CTS_TOOL_PROC_FILENAME
,

1389 0666, 
NULL
, &
˘s_toﬁ_f›s
, 
˘s_d©a
);

1390 i‡(
˘s_d©a
->
¥ocfs_íåy
 =
NULL
) {

1391 
	`˘s_îr
("CreateÖrocÉntry failed");

1392  -
EFAULT
;

1396 
	}
}

1398 
	$˘s_toﬁ_deöô
(
chù⁄e_ts_d©a
 *
d©a
)

1400 
	`˘s_öfo
("Deinit");

1402 i‡(
d©a
->
¥ocfs_íåy
) {

1403 
	`ªmove_¥oc_íåy
(
CFG_CTS_TOOL_PROC_FILENAME
, 
NULL
);

1405 
	}
}

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/fb.h

2 #i‚de‡
_LINUX_FB_H


3 
	#_LINUX_FB_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/i2c.h
>

10 
	#FB_MAX
 32

	)

14 
	#FBIOGET_VSCREENINFO
 0x4600

	)

15 
	#FBIOPUT_VSCREENINFO
 0x4601

	)

16 
	#FBIOGET_FSCREENINFO
 0x4602

	)

17 
	#FBIOGETCMAP
 0x4604

	)

18 
	#FBIOPUTCMAP
 0x4605

	)

19 
	#FBIOPAN_DISPLAY
 0x4606

	)

20 
	#FBIO_CURSOR
 
	`_IOWR
('F', 0x08, 
fb_curs‹
)

	)

25 
	#FBIOGET_CON2FBMAP
 0x460F

	)

26 
	#FBIOPUT_CON2FBMAP
 0x4610

	)

27 
	#FBIOBLANK
 0x4611

	)

28 
	#FBIOGET_VBLANK
 
	`_IOR
('F', 0x12, 
fb_vbœnk
)

	)

29 
	#FBIO_ALLOC
 0x4613

	)

30 
	#FBIO_FREE
 0x4614

	)

31 
	#FBIOGET_GLYPH
 0x4615

	)

32 
	#FBIOGET_HWCINFO
 0x4616

	)

33 
	#FBIOPUT_MODEINFO
 0x4617

	)

34 
	#FBIOGET_DISPINFO
 0x4618

	)

35 
	#FBIO_WAITFORVSYNC
 
	`_IOW
('F', 0x20, 
__u32
)

	)

37 
	#FB_TYPE_PACKED_PIXELS
 0

	)

38 
	#FB_TYPE_PLANES
 1

	)

39 
	#FB_TYPE_INTERLEAVED_PLANES
 2

	)

40 
	#FB_TYPE_TEXT
 3

	)

41 
	#FB_TYPE_VGA_PLANES
 4

	)

42 
	#FB_TYPE_FOURCC
 5

	)

44 
	#FB_AUX_TEXT_MDA
 0

	)

45 
	#FB_AUX_TEXT_CGA
 1

	)

46 
	#FB_AUX_TEXT_S3_MMIO
 2

	)

47 
	#FB_AUX_TEXT_MGA_STEP16
 3

	)

48 
	#FB_AUX_TEXT_MGA_STEP8
 4

	)

49 
	#FB_AUX_TEXT_SVGA_GROUP
 8

	)

50 
	#FB_AUX_TEXT_SVGA_MASK
 7

	)

51 
	#FB_AUX_TEXT_SVGA_STEP2
 8

	)

52 
	#FB_AUX_TEXT_SVGA_STEP4
 9

	)

53 
	#FB_AUX_TEXT_SVGA_STEP8
 10

	)

54 
	#FB_AUX_TEXT_SVGA_STEP16
 11

	)

55 
	#FB_AUX_TEXT_SVGA_LAST
 15

	)

57 
	#FB_AUX_VGA_PLANES_VGA4
 0

	)

58 
	#FB_AUX_VGA_PLANES_CFB4
 1

	)

59 
	#FB_AUX_VGA_PLANES_CFB8
 2

	)

61 
	#FB_VISUAL_MONO01
 0

	)

62 
	#FB_VISUAL_MONO10
 1

	)

63 
	#FB_VISUAL_TRUECOLOR
 2

	)

64 
	#FB_VISUAL_PSEUDOCOLOR
 3

	)

65 
	#FB_VISUAL_DIRECTCOLOR
 4

	)

66 
	#FB_VISUAL_STATIC_PSEUDOCOLOR
 5

	)

67 
	#FB_VISUAL_FOURCC
 6

	)

69 
	#FB_ACCEL_NONE
 0

	)

70 
	#FB_ACCEL_ATARIBLITT
 1

	)

71 
	#FB_ACCEL_AMIGABLITT
 2

	)

72 
	#FB_ACCEL_S3_TRIO64
 3

	)

73 
	#FB_ACCEL_NCR_77C32BLT
 4

	)

74 
	#FB_ACCEL_S3_VIRGE
 5

	)

75 
	#FB_ACCEL_ATI_MACH64GX
 6

	)

76 
	#FB_ACCEL_DEC_TGA
 7

	)

77 
	#FB_ACCEL_ATI_MACH64CT
 8

	)

78 
	#FB_ACCEL_ATI_MACH64VT
 9

	)

79 
	#FB_ACCEL_ATI_MACH64GT
 10

	)

80 
	#FB_ACCEL_SUN_CREATOR
 11

	)

81 
	#FB_ACCEL_SUN_CGSIX
 12

	)

82 
	#FB_ACCEL_SUN_LEO
 13

	)

83 
	#FB_ACCEL_IMS_TWINTURBO
 14

	)

84 
	#FB_ACCEL_3DLABS_PERMEDIA2
 15

	)

85 
	#FB_ACCEL_MATROX_MGA2064W
 16

	)

86 
	#FB_ACCEL_MATROX_MGA1064SG
 17

	)

87 
	#FB_ACCEL_MATROX_MGA2164W
 18

	)

88 
	#FB_ACCEL_MATROX_MGA2164W_AGP
 19

	)

89 
	#FB_ACCEL_MATROX_MGAG100
 20

	)

90 
	#FB_ACCEL_MATROX_MGAG200
 21

	)

91 
	#FB_ACCEL_SUN_CG14
 22

	)

92 
	#FB_ACCEL_SUN_BWTWO
 23

	)

93 
	#FB_ACCEL_SUN_CGTHREE
 24

	)

94 
	#FB_ACCEL_SUN_TCX
 25

	)

95 
	#FB_ACCEL_MATROX_MGAG400
 26

	)

96 
	#FB_ACCEL_NV3
 27

	)

97 
	#FB_ACCEL_NV4
 28

	)

98 
	#FB_ACCEL_NV5
 29

	)

99 
	#FB_ACCEL_CT_6555x
 30

	)

100 
	#FB_ACCEL_3DFX_BANSHEE
 31

	)

101 
	#FB_ACCEL_ATI_RAGE128
 32

	)

102 
	#FB_ACCEL_IGS_CYBER2000
 33

	)

103 
	#FB_ACCEL_IGS_CYBER2010
 34

	)

104 
	#FB_ACCEL_IGS_CYBER5000
 35

	)

105 
	#FB_ACCEL_SIS_GLAMOUR
 36

	)

106 
	#FB_ACCEL_3DLABS_PERMEDIA3
 37

	)

107 
	#FB_ACCEL_ATI_RADEON
 38

	)

108 
	#FB_ACCEL_I810
 39

	)

109 
	#FB_ACCEL_SIS_GLAMOUR_2
 40

	)

110 
	#FB_ACCEL_SIS_XABRE
 41

	)

111 
	#FB_ACCEL_I830
 42

	)

112 
	#FB_ACCEL_NV_10
 43

	)

113 
	#FB_ACCEL_NV_20
 44

	)

114 
	#FB_ACCEL_NV_30
 45

	)

115 
	#FB_ACCEL_NV_40
 46

	)

116 
	#FB_ACCEL_XGI_VOLARI_V
 47

	)

117 
	#FB_ACCEL_XGI_VOLARI_Z
 48

	)

118 
	#FB_ACCEL_OMAP1610
 49

	)

119 
	#FB_ACCEL_TRIDENT_TGUI
 50

	)

120 
	#FB_ACCEL_TRIDENT_3DIMAGE
 51

	)

121 
	#FB_ACCEL_TRIDENT_BLADE3D
 52

	)

122 
	#FB_ACCEL_TRIDENT_BLADEXP
 53

	)

123 
	#FB_ACCEL_CIRRUS_ALPINE
 53

	)

124 
	#FB_ACCEL_NEOMAGIC_NM2070
 90

	)

125 
	#FB_ACCEL_NEOMAGIC_NM2090
 91

	)

126 
	#FB_ACCEL_NEOMAGIC_NM2093
 92

	)

127 
	#FB_ACCEL_NEOMAGIC_NM2097
 93

	)

128 
	#FB_ACCEL_NEOMAGIC_NM2160
 94

	)

129 
	#FB_ACCEL_NEOMAGIC_NM2200
 95

	)

130 
	#FB_ACCEL_NEOMAGIC_NM2230
 96

	)

131 
	#FB_ACCEL_NEOMAGIC_NM2360
 97

	)

132 
	#FB_ACCEL_NEOMAGIC_NM2380
 98

	)

133 
	#FB_ACCEL_PXA3XX
 99

	)

135 
	#FB_ACCEL_SAVAGE4
 0x80

	)

136 
	#FB_ACCEL_SAVAGE3D
 0x81

	)

137 
	#FB_ACCEL_SAVAGE3D_MV
 0x82

	)

138 
	#FB_ACCEL_SAVAGE2000
 0x83

	)

139 
	#FB_ACCEL_SAVAGE_MX_MV
 0x84

	)

140 
	#FB_ACCEL_SAVAGE_MX
 0x85

	)

141 
	#FB_ACCEL_SAVAGE_IX_MV
 0x86

	)

142 
	#FB_ACCEL_SAVAGE_IX
 0x87

	)

143 
	#FB_ACCEL_PROSAVAGE_PM
 0x88

	)

144 
	#FB_ACCEL_PROSAVAGE_KM
 0x89

	)

145 
	#FB_ACCEL_S3TWISTER_P
 0x8®

	)

146 
	#FB_ACCEL_S3TWISTER_K
 0x8b

	)

147 
	#FB_ACCEL_SUPERSAVAGE
 0x8¯

	)

148 
	#FB_ACCEL_PROSAVAGE_DDR
 0x8d

	)

149 
	#FB_ACCEL_PROSAVAGE_DDRK
 0x8ê

	)

151 
	#FB_ACCEL_PUV3_UNIGFX
 0xa0

	)

153 
	#FB_CAP_FOURCC
 1

	)

155 
	sfb_fix_s¸ìnöfo
 {

156 
	mid
[16];

157 
	msmem_°¨t
;

159 
__u32
 
	msmem_Àn
;

160 
__u32
 
	mty≥
;

161 
__u32
 
	mty≥_aux
;

162 
__u32
 
	mvisuÆ
;

163 
__u16
 
	mx∑n°ï
;

164 
__u16
 
	my∑n°ï
;

165 
__u16
 
	mywøp°ï
;

166 
__u32
 
	mlöe_Àngth
;

167 
	mmmio_°¨t
;

169 
__u32
 
	mmmio_Àn
;

170 
__u32
 
	mac˚l
;

172 
__u16
 
	mˇ∑bûôõs
;

173 
__u16
 
	mª£rved
[2];

186 
	sfb_bôfõld
 {

187 
__u32
 
	moff£t
;

188 
__u32
 
	mÀngth
;

189 
__u32
 
	mmsb_right
;

193 
	#FB_NONSTD_HAM
 1

	)

194 
	#FB_NONSTD_REV_PIX_IN_B
 2

	)

196 
	#FB_ACTIVATE_NOW
 0

	)

197 
	#FB_ACTIVATE_NXTOPEN
 1

	)

198 
	#FB_ACTIVATE_TEST
 2

	)

199 
	#FB_ACTIVATE_MASK
 15

	)

201 
	#FB_ACTIVATE_VBL
 16

	)

202 
	#FB_CHANGE_CMAP_VBL
 32

	)

203 
	#FB_ACTIVATE_ALL
 64

	)

204 
	#FB_ACTIVATE_FORCE
 128

	)

205 
	#FB_ACTIVATE_INV_MODE
 256

	)

207 
	#FB_ACCELF_TEXT
 1

	)

209 
	#FB_SYNC_HOR_HIGH_ACT
 1

	)

210 
	#FB_SYNC_VERT_HIGH_ACT
 2

	)

211 
	#FB_SYNC_EXT
 4

	)

212 
	#FB_SYNC_COMP_HIGH_ACT
 8

	)

213 
	#FB_SYNC_BROADCAST
 16

	)

216 
	#FB_SYNC_ON_GREEN
 32

	)

218 
	#FB_VMODE_NONINTERLACED
 0

	)

219 
	#FB_VMODE_INTERLACED
 1

	)

220 
	#FB_VMODE_DOUBLE
 2

	)

221 
	#FB_VMODE_ODD_FLD_FIRST
 4

	)

222 
	#FB_VMODE_MASK
 255

	)

224 
	#FB_VMODE_YWRAP
 256

	)

225 
	#FB_VMODE_SMOOTH_XPAN
 512

	)

226 
	#FB_VMODE_CONUPDATE
 512

	)

231 
	#FB_ROTATE_UR
 0

	)

232 
	#FB_ROTATE_CW
 1

	)

233 
	#FB_ROTATE_UD
 2

	)

234 
	#FB_ROTATE_CCW
 3

	)

236 
	#PICOS2KHZ
(
a
Ë(1000000000UL/◊))

	)

237 
	#KHZ2PICOS
(
a
Ë(1000000000UL/◊))

	)

239 
	sfb_v¨_s¸ìnöfo
 {

240 
__u32
 
	mxªs
;

241 
__u32
 
	myªs
;

242 
__u32
 
	mxªs_vútuÆ
;

243 
__u32
 
	myªs_vútuÆ
;

244 
__u32
 
	mxoff£t
;

245 
__u32
 
	myoff£t
;

247 
__u32
 
	mbôs_≥r_pixñ
;

248 
__u32
 
	mgøysˇÀ
;

250 
fb_bôfõld
 
	mªd
;

251 
fb_bôfõld
 
	mgªí
;

252 
fb_bôfõld
 
	mblue
;

253 
fb_bôfõld
 
	må™•
;

255 
__u32
 
	mn⁄°d
;

257 
__u32
 
	ma˘iv©e
;

259 
__u32
 
	mheight
;

260 
__u32
 
	mwidth
;

262 
__u32
 
	mac˚l_Êags
;

265 
__u32
 
	mpix˛ock
;

266 
__u32
 
	mÀ·_m¨gö
;

267 
__u32
 
	mright_m¨gö
;

268 
__u32
 
	muµî_m¨gö
;

269 
__u32
 
	mlowî_m¨gö
;

270 
__u32
 
	mhsync_Àn
;

271 
__u32
 
	mvsync_Àn
;

272 
__u32
 
	msync
;

273 
__u32
 
	mvmode
;

274 
__u32
 
	mrŸ©e
;

275 
__u32
 
	mcﬁ‹•a˚
;

276 
__u32
 
	mª£rved
[4];

279 
	sfb_cm≠
 {

280 
__u32
 
	m°¨t
;

281 
__u32
 
	mÀn
;

282 
__u16
 *
	mªd
;

283 
__u16
 *
	mgªí
;

284 
__u16
 *
	mblue
;

285 
__u16
 *
	må™•
;

288 
	sfb_c⁄2fbm≠
 {

289 
__u32
 
	mc⁄sﬁe
;

290 
__u32
 
	m‰amebuf„r
;

294 
	#VESA_NO_BLANKING
 0

	)

295 
	#VESA_VSYNC_SUSPEND
 1

	)

296 
	#VESA_HSYNC_SUSPEND
 2

	)

297 
	#VESA_POWERDOWN
 3

	)

302 
	mFB_BLANK_UNBLANK
 = 
VESA_NO_BLANKING
,

305 
	mFB_BLANK_NORMAL
 = 
VESA_NO_BLANKING
 + 1,

308 
	mFB_BLANK_VSYNC_SUSPEND
 = 
VESA_VSYNC_SUSPEND
 + 1,

311 
	mFB_BLANK_HSYNC_SUSPEND
 = 
VESA_HSYNC_SUSPEND
 + 1,

314 
	mFB_BLANK_POWERDOWN
 = 
VESA_POWERDOWN
 + 1

317 
	#FB_VBLANK_VBLANKING
 0x001

	)

318 
	#FB_VBLANK_HBLANKING
 0x002

	)

319 
	#FB_VBLANK_HAVE_VBLANK
 0x004

	)

320 
	#FB_VBLANK_HAVE_HBLANK
 0x008

	)

321 
	#FB_VBLANK_HAVE_COUNT
 0x010

	)

322 
	#FB_VBLANK_HAVE_VCOUNT
 0x020

	)

323 
	#FB_VBLANK_HAVE_HCOUNT
 0x040

	)

324 
	#FB_VBLANK_VSYNCING
 0x080

	)

325 
	#FB_VBLANK_HAVE_VSYNC
 0x100

	)

327 
	sfb_vbœnk
 {

328 
__u32
 
	mÊags
;

329 
__u32
 
	mcou¡
;

330 
__u32
 
	mvcou¡
;

331 
__u32
 
	mhcou¡
;

332 
__u32
 
	mª£rved
[4];

336 
	#ROP_COPY
 0

	)

337 
	#ROP_XOR
 1

	)

339 
	sfb_c›y¨ó
 {

340 
__u32
 
	mdx
;

341 
__u32
 
	mdy
;

342 
__u32
 
	mwidth
;

343 
__u32
 
	mheight
;

344 
__u32
 
	msx
;

345 
__u32
 
	msy
;

348 
	sfb_fûÃe˘
 {

349 
__u32
 
	mdx
;

350 
__u32
 
	mdy
;

351 
__u32
 
	mwidth
;

352 
__u32
 
	mheight
;

353 
__u32
 
	mcﬁ‹
;

354 
__u32
 
	mr›
;

357 
	sfb_image
 {

358 
__u32
 
	mdx
;

359 
__u32
 
	mdy
;

360 
__u32
 
	mwidth
;

361 
__u32
 
	mheight
;

362 
__u32
 
	mfg_cﬁ‹
;

363 
__u32
 
	mbg_cﬁ‹
;

364 
__u8
 
	mdïth
;

365 c⁄° *
	md©a
;

366 
fb_cm≠
 
	mcm≠
;

373 
	#FB_CUR_SETIMAGE
 0x01

	)

374 
	#FB_CUR_SETPOS
 0x02

	)

375 
	#FB_CUR_SETHOT
 0x04

	)

376 
	#FB_CUR_SETCMAP
 0x08

	)

377 
	#FB_CUR_SETSHAPE
 0x10

	)

378 
	#FB_CUR_SETSIZE
 0x20

	)

379 
	#FB_CUR_SETALL
 0xFF

	)

381 
	sfbcuΩos
 {

382 
__u16
 
	mx
, 
	my
;

385 
	sfb_curs‹
 {

386 
__u16
 
	m£t
;

387 
__u16
 
	míabÀ
;

388 
__u16
 
	mr›
;

389 c⁄° *
	mmask
;

390 
fbcuΩos
 
	mhŸ
;

391 
fb_image
 
	mimage
;

395 
	#FB_BACKLIGHT_LEVELS
 128

	)

396 
	#FB_BACKLIGHT_MAX
 0xFF

	)

	@/usr/include/linux/fs.h

2 #i‚de‡
_LINUX_FS_H


3 
	#_LINUX_FS_H


	)

13 
	~<löux/limôs.h
>

14 
	~<löux/io˘l.h
>

15 
	~<löux/ty≥s.h
>

16 
	~<löux/fs¸y±.h
>

19 
	~<löux/mou¡.h
>

32 #unde‡
NR_OPEN


33 
	#INR_OPEN_CUR
 1024

	)

34 
	#INR_OPEN_MAX
 4096

	)

36 
	#BLOCK_SIZE_BITS
 10

	)

37 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

39 
	#SEEK_SET
 0

	)

40 
	#SEEK_CUR
 1

	)

41 
	#SEEK_END
 2

	)

42 
	#SEEK_DATA
 3

	)

43 
	#SEEK_HOLE
 4

	)

44 
	#SEEK_MAX
 
SEEK_HOLE


	)

46 
	#RENAME_NOREPLACE
 (1 << 0Ë

	)

47 
	#RENAME_EXCHANGE
 (1 << 1Ë

	)

48 
	#RENAME_WHITEOUT
 (1 << 2Ë

	)

50 
	sfûe_˛⁄e_ønge
 {

51 
__s64
 
	m§c_fd
;

52 
__u64
 
	m§c_off£t
;

53 
__u64
 
	m§c_Àngth
;

54 
__u64
 
	mde°_off£t
;

57 
	sf°rim_ønge
 {

58 
__u64
 
	m°¨t
;

59 
__u64
 
	mÀn
;

60 
__u64
 
	mmöÀn
;

64 
	#FILE_DEDUPE_RANGE_SAME
 0

	)

65 
	#FILE_DEDUPE_RANGE_DIFFERS
 1

	)

68 
	sfûe_dedu≥_ønge_öfo
 {

69 
__s64
 
	mde°_fd
;

70 
__u64
 
	mde°_off£t
;

71 
__u64
 
	mbyãs_dedu≥d
;

78 
__s32
 
	m°©us
;

79 
__u32
 
	mª£rved
;

83 
	sfûe_dedu≥_ønge
 {

84 
__u64
 
	m§c_off£t
;

85 
__u64
 
	m§c_Àngth
;

86 
__u16
 
	mde°_cou¡
;

87 
__u16
 
	mª£rved1
;

88 
__u32
 
	mª£rved2
;

89 
fûe_dedu≥_ønge_öfo
 
	möfo
[0];

93 
	sfûes_°©_°ru˘
 {

94 
	mƒ_fûes
;

95 
	mƒ_‰ì_fûes
;

96 
	mmax_fûes
;

99 
	söodes_°©_t
 {

100 
	mƒ_öodes
;

101 
	mƒ_unu£d
;

102 
	mdummy
[5];

106 
	#NR_FILE
 8192

	)

111 
	sfsx©å
 {

112 
__u32
 
	mfsx_xÊags
;

113 
__u32
 
	mfsx_extsize
;

114 
__u32
 
	mfsx_√xã¡s
;

115 
__u32
 
	mfsx_¥ojid
;

116 
__u32
 
	mfsx_cowextsize
;

117 
	mfsx_∑d
[8];

123 
	#FS_XFLAG_REALTIME
 0x00000001

	)

124 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

125 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

126 
	#FS_XFLAG_APPEND
 0x00000010

	)

127 
	#FS_XFLAG_SYNC
 0x00000020

	)

128 
	#FS_XFLAG_NOATIME
 0x00000040

	)

129 
	#FS_XFLAG_NODUMP
 0x00000080

	)

130 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

131 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

132 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

133 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

134 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

135 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

136 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

137 
	#FS_XFLAG_DAX
 0x00008000

	)

138 
	#FS_XFLAG_COWEXTSIZE
 0x00010000

	)

139 
	#FS_XFLAG_HASATTR
 0x80000000

	)

144 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

145 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

146 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

147 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

148 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

149 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

150 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

151 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

152 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

153 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

154 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

155 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

157 
	#BLKPG
 
	`_IO
(0x12,105)

	)

161 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

162 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

167 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

168 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

169 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

170 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

171 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

172 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

173 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

174 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

175 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

176 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

177 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

178 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

179 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

180 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

181 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

182 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

188 
	#BMAP_IOCTL
 1

	)

189 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

190 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

191 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

192 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

193 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

194 
	#FICLONE
 
	`_IOW
(0x94, 9, )

	)

195 
	#FICLONERANGE
 
	`_IOW
(0x94, 13, 
fûe_˛⁄e_ønge
)

	)

196 
	#FIDEDUPERANGE
 
	`_IOWR
(0x94, 54, 
fûe_dedu≥_ønge
)

	)

198 
	#FSLABEL_MAX
 256

	)

200 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

201 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

202 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

203 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

204 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

205 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

206 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

207 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

208 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

209 
	#FS_IOC_FSGETXATTR
 
	`_IOR
('X', 31, 
fsx©å
)

	)

210 
	#FS_IOC_FSSETXATTR
 
	`_IOW
('X', 32, 
fsx©å
)

	)

211 
	#FS_IOC_GETFSLABEL
 
	`_IOR
(0x94, 49, [
FSLABEL_MAX
])

	)

212 
	#FS_IOC_SETFSLABEL
 
	`_IOW
(0x94, 50, [
FSLABEL_MAX
])

	)

234 
	#FS_SECRM_FL
 0x00000001

	)

235 
	#FS_UNRM_FL
 0x00000002

	)

236 
	#FS_COMPR_FL
 0x00000004

	)

237 
	#FS_SYNC_FL
 0x00000008

	)

238 
	#FS_IMMUTABLE_FL
 0x00000010

	)

239 
	#FS_APPEND_FL
 0x00000020

	)

240 
	#FS_NODUMP_FL
 0x00000040

	)

241 
	#FS_NOATIME_FL
 0x00000080

	)

243 
	#FS_DIRTY_FL
 0x00000100

	)

244 
	#FS_COMPRBLK_FL
 0x00000200

	)

245 
	#FS_NOCOMP_FL
 0x00000400

	)

247 
	#FS_ENCRYPT_FL
 0x00000800

	)

248 
	#FS_BTREE_FL
 0x00001000

	)

249 
	#FS_INDEX_FL
 0x00001000

	)

250 
	#FS_IMAGIC_FL
 0x00002000

	)

251 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

252 
	#FS_NOTAIL_FL
 0x00008000

	)

253 
	#FS_DIRSYNC_FL
 0x00010000

	)

254 
	#FS_TOPDIR_FL
 0x00020000

	)

255 
	#FS_HUGE_FILE_FL
 0x00040000

	)

256 
	#FS_EXTENT_FL
 0x00080000

	)

257 
	#FS_VERITY_FL
 0x00100000

	)

258 
	#FS_EA_INODE_FL
 0x00200000

	)

259 
	#FS_EOFBLOCKS_FL
 0x00400000

	)

260 
	#FS_NOCOW_FL
 0x00800000

	)

261 
	#FS_INLINE_DATA_FL
 0x10000000

	)

262 
	#FS_PROJINHERIT_FL
 0x20000000

	)

263 
	#FS_CASEFOLD_FL
 0x40000000

	)

264 
	#FS_RESERVED_FL
 0x80000000

	)

266 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

267 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

270 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

271 
	#SYNC_FILE_RANGE_WRITE
 2

	)

272 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

273 
	#SYNC_FILE_RANGE_WRITE_AND_WAIT
 (
SYNC_FILE_RANGE_WRITE
 | \

274 
SYNC_FILE_RANGE_WAIT_BEFORE
 | \

275 
SYNC_FILE_RANGE_WAIT_AFTER
)

	)

281 
	t__bôwi£
 
	t__kî√l_rwf_t
;

284 
	#RWF_HIPRI
 ((
__kî√l_rwf_t
)0x00000001)

	)

287 
	#RWF_DSYNC
 ((
__kî√l_rwf_t
)0x00000002)

	)

290 
	#RWF_SYNC
 ((
__kî√l_rwf_t
)0x00000004)

	)

293 
	#RWF_NOWAIT
 ((
__kî√l_rwf_t
)0x00000008)

	)

296 
	#RWF_APPEND
 ((
__kî√l_rwf_t
)0x00000010)

	)

299 
	#RWF_SUPPORTED
 (
RWF_HIPRI
 | 
RWF_DSYNC
 | 
RWF_SYNC
 | 
RWF_NOWAIT
 |\

300 
RWF_APPEND
)

	)

	@/usr/include/linux/gpio.h

11 #i‚de‡
_GPIO_H_


12 
	#_GPIO_H_


	)

14 
	~<löux/io˘l.h
>

15 
	~<löux/ty≥s.h
>

24 
	sgpiochù_öfo
 {

25 
	m«me
[32];

26 
	mœbñ
[32];

27 
__u32
 
	mlöes
;

31 
	#GPIOLINE_FLAG_KERNEL
 (1UL << 0Ë

	)

32 
	#GPIOLINE_FLAG_IS_OUT
 (1UL << 1)

	)

33 
	#GPIOLINE_FLAG_ACTIVE_LOW
 (1UL << 2)

	)

34 
	#GPIOLINE_FLAG_OPEN_DRAIN
 (1UL << 3)

	)

35 
	#GPIOLINE_FLAG_OPEN_SOURCE
 (1UL << 4)

	)

49 
	sgpiﬁöe_öfo
 {

50 
__u32
 
	mlöe_off£t
;

51 
__u32
 
	mÊags
;

52 
	m«me
[32];

53 
	mc⁄sumî
[32];

57 
	#GPIOHANDLES_MAX
 64

	)

60 
	#GPIOHANDLE_REQUEST_INPUT
 (1UL << 0)

	)

61 
	#GPIOHANDLE_REQUEST_OUTPUT
 (1UL << 1)

	)

62 
	#GPIOHANDLE_REQUEST_ACTIVE_LOW
 (1UL << 2)

	)

63 
	#GPIOHANDLE_REQUEST_OPEN_DRAIN
 (1UL << 3)

	)

64 
	#GPIOHANDLE_REQUEST_OPEN_SOURCE
 (1UL << 4)

	)

88 
	sgpioh™dÀ_ªque°
 {

89 
__u32
 
	mlöeoff£ts
[
GPIOHANDLES_MAX
];

90 
__u32
 
	mÊags
;

91 
__u8
 
	mdeÁu…_vÆues
[
GPIOHANDLES_MAX
];

92 
	mc⁄sumî_œbñ
[32];

93 
__u32
 
	mlöes
;

94 
	mfd
;

103 
	sgpioh™dÀ_d©a
 {

104 
__u8
 
	mvÆues
[
GPIOHANDLES_MAX
];

107 
	#GPIOHANDLE_GET_LINE_VALUES_IOCTL
 
	`_IOWR
(0xB4, 0x08, 
gpioh™dÀ_d©a
)

	)

108 
	#GPIOHANDLE_SET_LINE_VALUES_IOCTL
 
	`_IOWR
(0xB4, 0x09, 
gpioh™dÀ_d©a
)

	)

111 
	#GPIOEVENT_REQUEST_RISING_EDGE
 (1UL << 0)

	)

112 
	#GPIOEVENT_REQUEST_FALLING_EDGE
 (1UL << 1)

	)

113 
	#GPIOEVENT_REQUEST_BOTH_EDGES
 ((1UL << 0Ë| (1UL << 1))

	)

129 
	sgpi€vít_ªque°
 {

130 
__u32
 
	mlöeoff£t
;

131 
__u32
 
	mh™dÀÊags
;

132 
__u32
 
	mevítÊags
;

133 
	mc⁄sumî_œbñ
[32];

134 
	mfd
;

140 
	#GPIOEVENT_EVENT_RISING_EDGE
 0x01

	)

141 
	#GPIOEVENT_EVENT_FALLING_EDGE
 0x02

	)

148 
	sgpi€vít_d©a
 {

149 
__u64
 
	mtime°amp
;

150 
__u32
 
	mid
;

153 
	#GPIO_GET_CHIPINFO_IOCTL
 
	`_IOR
(0xB4, 0x01, 
gpiochù_öfo
)

	)

154 
	#GPIO_GET_LINEINFO_IOCTL
 
	`_IOWR
(0xB4, 0x02, 
gpiﬁöe_öfo
)

	)

155 
	#GPIO_GET_LINEHANDLE_IOCTL
 
	`_IOWR
(0xB4, 0x03, 
gpioh™dÀ_ªque°
)

	)

156 
	#GPIO_GET_LINEEVENT_IOCTL
 
	`_IOWR
(0xB4, 0x04, 
gpi€vít_ªque°
)

	)

	@/usr/include/linux/i2c.h

28 #i‚de‡
_LINUX_I2C_H


29 
	#_LINUX_I2C_H


	)

31 
	~<löux/ty≥s.h
>

69 
	si2c_msg
 {

70 
__u16
 
	maddr
;

71 
__u16
 
	mÊags
;

72 
	#I2C_M_RD
 0x0001

	)

74 
	#I2C_M_TEN
 0x0010

	)

75 
	#I2C_M_DMA_SAFE
 0x0200

	)

78 
	#I2C_M_RECV_LEN
 0x0400

	)

79 
	#I2C_M_NO_RD_ACK
 0x0800

	)

80 
	#I2C_M_IGNORE_NAK
 0x1000

	)

81 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

82 
	#I2C_M_NOSTART
 0x4000

	)

83 
	#I2C_M_STOP
 0x8000

	)

84 
__u16
 
	mÀn
;

85 
__u8
 *
	mbuf
;

90 
	#I2C_FUNC_I2C
 0x00000001

	)

91 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

92 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

93 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

94 
	#I2C_FUNC_NOSTART
 0x00000010

	)

95 
	#I2C_FUNC_SLAVE
 0x00000020

	)

96 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

97 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

98 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

99 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

100 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

101 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

102 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

103 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

104 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

105 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

106 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

107 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

108 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

109 
	#I2C_FUNC_SMBUS_HOST_NOTIFY
 0x10000000

	)

111 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

112 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

113 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

114 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

115 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

116 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

117 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

118 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

119 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

120 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

122 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

123 
I2C_FUNC_SMBUS_BYTE
 | \

124 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

125 
I2C_FUNC_SMBUS_WORD_DATA
 | \

126 
I2C_FUNC_SMBUS_PROC_CALL
 | \

127 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

128 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

129 
I2C_FUNC_SMBUS_PEC
)

	)

134 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

135 
	ui2c_smbus_d©a
 {

136 
__u8
 
	mbyã
;

137 
__u16
 
	mw‹d
;

138 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

143 
	#I2C_SMBUS_READ
 1

	)

144 
	#I2C_SMBUS_WRITE
 0

	)

148 
	#I2C_SMBUS_QUICK
 0

	)

149 
	#I2C_SMBUS_BYTE
 1

	)

150 
	#I2C_SMBUS_BYTE_DATA
 2

	)

151 
	#I2C_SMBUS_WORD_DATA
 3

	)

152 
	#I2C_SMBUS_PROC_CALL
 4

	)

153 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

154 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

155 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

156 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/input.h

9 #i‚de‡
_INPUT_H


10 
	#_INPUT_H


	)

13 
	~<sys/time.h
>

14 
	~<sys/io˘l.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<löux/ty≥s.h
>

18 
	~"öput-evít-codes.h
"

26 
	söput_evít
 {

27 #i‡(
__BITS_PER_LONG
 !32 || !
deföed
(
__USE_TIME_BITS64
)Ë&& !deföed(
__KERNEL__
)

28 
timevÆ
 
	mtime
;

29 
	#öput_evít_£c
 
time
.
tv_£c


	)

30 
	#öput_evít_u£c
 
time
.
tv_u£c


	)

32 
__kî√l_ul⁄g_t
 
	m__£c
;

33 #i‡
deföed
(
__•¨c__
Ë&& deföed(
__¨ch64__
)

34 
	m__u£c
;

35 
	m__∑d
;

37 
__kî√l_ul⁄g_t
 
	m__u£c
;

39 
	#öput_evít_£c
 
__£c


	)

40 
	#öput_evít_u£c
 
__u£c


	)

42 
__u16
 
	mty≥
;

43 
__u16
 
	mcode
;

44 
__s32
 
	mvÆue
;

51 
	#EV_VERSION
 0x010001

	)

57 
	söput_id
 {

58 
__u16
 
	mbu°y≥
;

59 
__u16
 
	mvíd‹
;

60 
__u16
 
	m¥odu˘
;

61 
__u16
 
	mvîsi⁄
;

88 
	söput_absöfo
 {

89 
__s32
 
	mvÆue
;

90 
__s32
 
	mmöimum
;

91 
__s32
 
	mmaximum
;

92 
__s32
 
	mfuzz
;

93 
__s32
 
	mÊ©
;

94 
__s32
 
	mªsﬁuti⁄
;

112 
	söput_keym≠_íåy
 {

113 
	#INPUT_KEYMAP_BY_INDEX
 (1 << 0)

	)

114 
__u8
 
	mÊags
;

115 
__u8
 
	mÀn
;

116 
__u16
 
	mödex
;

117 
__u32
 
	mkeycode
;

118 
__u8
 
	msˇncode
[32];

121 
	söput_mask
 {

122 
__u32
 
	mty≥
;

123 
__u32
 
	mcodes_size
;

124 
__u64
 
	mcodes_±r
;

127 
	#EVIOCGVERSION
 
	`_IOR
('E', 0x01, Ë

	)

128 
	#EVIOCGID
 
	`_IOR
('E', 0x02, 
öput_id
Ë

	)

129 
	#EVIOCGREP
 
	`_IOR
('E', 0x03, [2]Ë

	)

130 
	#EVIOCSREP
 
	`_IOW
('E', 0x03, [2]Ë

	)

132 
	#EVIOCGKEYCODE
 
	`_IOR
('E', 0x04, [2]Ë

	)

133 
	#EVIOCGKEYCODE_V2
 
	`_IOR
('E', 0x04, 
öput_keym≠_íåy
)

	)

134 
	#EVIOCSKEYCODE
 
	`_IOW
('E', 0x04, [2]Ë

	)

135 
	#EVIOCSKEYCODE_V2
 
	`_IOW
('E', 0x04, 
öput_keym≠_íåy
)

	)

137 
	#EVIOCGNAME
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x06,ÜíË

	)

138 
	#EVIOCGPHYS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x07,ÜíË

	)

139 
	#EVIOCGUNIQ
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x08,ÜíË

	)

140 
	#EVIOCGPROP
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x09,ÜíË

	)

166 
	#EVIOCGMTSLOTS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x0a,Üí)

	)

168 
	#EVIOCGKEY
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x18,ÜíË

	)

169 
	#EVIOCGLED
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x19,ÜíË

	)

170 
	#EVIOCGSND
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1a,ÜíË

	)

171 
	#EVIOCGSW
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1b,ÜíË

	)

173 
	#EVIOCGBIT
(
ev
,
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x20 + (ev),ÜíË

	)

174 
	#EVIOCGABS
(
abs
Ë
	`_IOR
('E', 0x40 + (abs), 
öput_absöfo
Ë

	)

175 
	#EVIOCSABS
(
abs
Ë
	`_IOW
('E', 0xc0 + (abs), 
öput_absöfo
Ë

	)

177 
	#EVIOCSFF
 
	`_IOW
('E', 0x80, 
ff_ef„˘
Ë

	)

178 
	#EVIOCRMFF
 
	`_IOW
('E', 0x81, Ë

	)

179 
	#EVIOCGEFFECTS
 
	`_IOR
('E', 0x84, Ë

	)

181 
	#EVIOCGRAB
 
	`_IOW
('E', 0x90, Ë

	)

182 
	#EVIOCREVOKE
 
	`_IOW
('E', 0x91, Ë

	)

213 
	#EVIOCGMASK
 
	`_IOR
('E', 0x92, 
öput_mask
Ë

	)

236 
	#EVIOCSMASK
 
	`_IOW
('E', 0x93, 
öput_mask
Ë

	)

238 
	#EVIOCSCLOCKID
 
	`_IOW
('E', 0xa0, Ë

	)

244 
	#ID_BUS
 0

	)

245 
	#ID_VENDOR
 1

	)

246 
	#ID_PRODUCT
 2

	)

247 
	#ID_VERSION
 3

	)

249 
	#BUS_PCI
 0x01

	)

250 
	#BUS_ISAPNP
 0x02

	)

251 
	#BUS_USB
 0x03

	)

252 
	#BUS_HIL
 0x04

	)

253 
	#BUS_BLUETOOTH
 0x05

	)

254 
	#BUS_VIRTUAL
 0x06

	)

256 
	#BUS_ISA
 0x10

	)

257 
	#BUS_I8042
 0x11

	)

258 
	#BUS_XTKBD
 0x12

	)

259 
	#BUS_RS232
 0x13

	)

260 
	#BUS_GAMEPORT
 0x14

	)

261 
	#BUS_PARPORT
 0x15

	)

262 
	#BUS_AMIGA
 0x16

	)

263 
	#BUS_ADB
 0x17

	)

264 
	#BUS_I2C
 0x18

	)

265 
	#BUS_HOST
 0x19

	)

266 
	#BUS_GSC
 0x1A

	)

267 
	#BUS_ATARI
 0x1B

	)

268 
	#BUS_SPI
 0x1C

	)

269 
	#BUS_RMI
 0x1D

	)

270 
	#BUS_CEC
 0x1E

	)

271 
	#BUS_INTEL_ISHTP
 0x1F

	)

276 
	#MT_TOOL_FINGER
 0x00

	)

277 
	#MT_TOOL_PEN
 0x01

	)

278 
	#MT_TOOL_PALM
 0x02

	)

279 
	#MT_TOOL_DIAL
 0x0a

	)

280 
	#MT_TOOL_MAX
 0x0f

	)

285 
	#FF_STATUS_STOPPED
 0x00

	)

286 
	#FF_STATUS_PLAYING
 0x01

	)

287 
	#FF_STATUS_MAX
 0x01

	)

304 
	sff_ª∂ay
 {

305 
__u16
 
	mÀngth
;

306 
__u16
 
	mdñay
;

314 
	sff_åiggî
 {

315 
__u16
 
	mbuâ⁄
;

316 
__u16
 
	möãrvÆ
;

331 
	sff_ívñ›e
 {

332 
__u16
 
	m©èck_Àngth
;

333 
__u16
 
	m©èck_Àvñ
;

334 
__u16
 
	mÁde_Àngth
;

335 
__u16
 
	mÁde_Àvñ
;

343 
	sff_c⁄°™t_ef„˘
 {

344 
__s16
 
	mÀvñ
;

345 
ff_ívñ›e
 
	mívñ›e
;

354 
	sff_ømp_ef„˘
 {

355 
__s16
 
	m°¨t_Àvñ
;

356 
__s16
 
	míd_Àvñ
;

357 
ff_ívñ›e
 
	mívñ›e
;

370 
	sff_c⁄dôi⁄_ef„˘
 {

371 
__u16
 
	mright_ßtuøti⁄
;

372 
__u16
 
	mÀ·_ßtuøti⁄
;

374 
__s16
 
	mright_c€ff
;

375 
__s16
 
	mÀ·_c€ff
;

377 
__u16
 
	mdódb™d
;

378 
__s16
 
	m˚¡î
;

399 
	sff_≥riodic_ef„˘
 {

400 
__u16
 
	mwavef‹m
;

401 
__u16
 
	m≥riod
;

402 
__s16
 
	mmagnôude
;

403 
__s16
 
	moff£t
;

404 
__u16
 
	mpha£
;

406 
ff_ívñ›e
 
	mívñ›e
;

408 
__u32
 
	mcu°om_Àn
;

409 
__s16
 *
	mcu°om_d©a
;

420 
	sff_rumbÀ_ef„˘
 {

421 
__u16
 
	m°r⁄g_magnôude
;

422 
__u16
 
	mwók_magnôude
;

448 
	sff_ef„˘
 {

449 
__u16
 
	mty≥
;

450 
__s16
 
	mid
;

451 
__u16
 
	mdúe˘i⁄
;

452 
ff_åiggî
 
	måiggî
;

453 
ff_ª∂ay
 
	mª∂ay
;

456 
ff_c⁄°™t_ef„˘
 
	mc⁄°™t
;

457 
ff_ømp_ef„˘
 
	mømp
;

458 
ff_≥riodic_ef„˘
 
	m≥riodic
;

459 
ff_c⁄dôi⁄_ef„˘
 
	mc⁄dôi⁄
[2];

460 
ff_rumbÀ_ef„˘
 
	mrumbÀ
;

461 } 
	mu
;

468 
	#FF_RUMBLE
 0x50

	)

469 
	#FF_PERIODIC
 0x51

	)

470 
	#FF_CONSTANT
 0x52

	)

471 
	#FF_SPRING
 0x53

	)

472 
	#FF_FRICTION
 0x54

	)

473 
	#FF_DAMPER
 0x55

	)

474 
	#FF_INERTIA
 0x56

	)

475 
	#FF_RAMP
 0x57

	)

477 
	#FF_EFFECT_MIN
 
FF_RUMBLE


	)

478 
	#FF_EFFECT_MAX
 
FF_RAMP


	)

484 
	#FF_SQUARE
 0x58

	)

485 
	#FF_TRIANGLE
 0x59

	)

486 
	#FF_SINE
 0x5a

	)

487 
	#FF_SAW_UP
 0x5b

	)

488 
	#FF_SAW_DOWN
 0x5c

	)

489 
	#FF_CUSTOM
 0x5d

	)

491 
	#FF_WAVEFORM_MIN
 
FF_SQUARE


	)

492 
	#FF_WAVEFORM_MAX
 
FF_CUSTOM


	)

498 
	#FF_GAIN
 0x60

	)

499 
	#FF_AUTOCENTER
 0x61

	)

507 
	#FF_MAX_EFFECTS
 
FF_GAIN


	)

509 
	#FF_MAX
 0x7f

	)

510 
	#FF_CNT
 (
FF_MAX
+1)

	)

	@/usr/include/linux/kernel.h

2 #i‚de‡
_LINUX_KERNEL_H


3 
	#_LINUX_KERNEL_H


	)

5 
	~<löux/sysöfo.h
>

10 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

11 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

13 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/module.h

2 #i‚de‡
_LINUX_MODULE_H


3 
	#_LINUX_MODULE_H


	)

6 
	#MODULE_INIT_IGNORE_MODVERSIONS
 1

	)

7 
	#MODULE_INIT_IGNORE_VERMAGIC
 2

	)

	@/usr/include/linux/mount.h

1 #i‚de‡
_LINUX_MOUNT_H


2 
	#_LINUX_MOUNT_H


	)

11 
	#MS_RDONLY
 1

	)

12 
	#MS_NOSUID
 2

	)

13 
	#MS_NODEV
 4

	)

14 
	#MS_NOEXEC
 8

	)

15 
	#MS_SYNCHRONOUS
 16

	)

16 
	#MS_REMOUNT
 32

	)

17 
	#MS_MANDLOCK
 64

	)

18 
	#MS_DIRSYNC
 128

	)

19 
	#MS_NOATIME
 1024

	)

20 
	#MS_NODIRATIME
 2048

	)

21 
	#MS_BIND
 4096

	)

22 
	#MS_MOVE
 8192

	)

23 
	#MS_REC
 16384

	)

24 
	#MS_VERBOSE
 32768

	)

26 
	#MS_SILENT
 32768

	)

27 
	#MS_POSIXACL
 (1<<16Ë

	)

28 
	#MS_UNBINDABLE
 (1<<17Ë

	)

29 
	#MS_PRIVATE
 (1<<18Ë

	)

30 
	#MS_SLAVE
 (1<<19Ë

	)

31 
	#MS_SHARED
 (1<<20Ë

	)

32 
	#MS_RELATIME
 (1<<21Ë

	)

33 
	#MS_KERNMOUNT
 (1<<22Ë

	)

34 
	#MS_I_VERSION
 (1<<23Ë

	)

35 
	#MS_STRICTATIME
 (1<<24Ë

	)

36 
	#MS_LAZYTIME
 (1<<25Ë

	)

39 
	#MS_SUBMOUNT
 (1<<26)

	)

40 
	#MS_NOREMOTELOCK
 (1<<27)

	)

41 
	#MS_NOSEC
 (1<<28)

	)

42 
	#MS_BORN
 (1<<29)

	)

43 
	#MS_ACTIVE
 (1<<30)

	)

44 
	#MS_NOUSER
 (1<<31)

	)

49 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
|\

50 
MS_LAZYTIME
)

	)

55 
	#MS_MGC_VAL
 0xC0ED0000

	)

56 
	#MS_MGC_MSK
 0xffff0000

	)

61 
	#OPEN_TREE_CLONE
 1

	)

62 
	#OPEN_TREE_CLOEXEC
 
O_CLOEXEC


	)

67 
	#MOVE_MOUNT_F_SYMLINKS
 0x00000001

	)

68 
	#MOVE_MOUNT_F_AUTOMOUNTS
 0x00000002

	)

69 
	#MOVE_MOUNT_F_EMPTY_PATH
 0x00000004

	)

70 
	#MOVE_MOUNT_T_SYMLINKS
 0x00000010

	)

71 
	#MOVE_MOUNT_T_AUTOMOUNTS
 0x00000020

	)

72 
	#MOVE_MOUNT_T_EMPTY_PATH
 0x00000040

	)

73 
	#MOVE_MOUNT__MASK
 0x00000077

	)

78 
	#FSOPEN_CLOEXEC
 0x00000001

	)

83 
	#FSPICK_CLOEXEC
 0x00000001

	)

84 
	#FSPICK_SYMLINK_NOFOLLOW
 0x00000002

	)

85 
	#FSPICK_NO_AUTOMOUNT
 0x00000004

	)

86 
	#FSPICK_EMPTY_PATH
 0x00000008

	)

91 
	efsc⁄fig_comm™d
 {

92 
	mFSCONFIG_SET_FLAG
 = 0,

93 
	mFSCONFIG_SET_STRING
 = 1,

94 
	mFSCONFIG_SET_BINARY
 = 2,

95 
	mFSCONFIG_SET_PATH
 = 3,

96 
	mFSCONFIG_SET_PATH_EMPTY
 = 4,

97 
	mFSCONFIG_SET_FD
 = 5,

98 
	mFSCONFIG_CMD_CREATE
 = 6,

99 
	mFSCONFIG_CMD_RECONFIGURE
 = 7,

105 
	#FSMOUNT_CLOEXEC
 0x00000001

	)

110 
	#MOUNT_ATTR_RDONLY
 0x00000001

	)

111 
	#MOUNT_ATTR_NOSUID
 0x00000002

	)

112 
	#MOUNT_ATTR_NODEV
 0x00000004

	)

113 
	#MOUNT_ATTR_NOEXEC
 0x00000008

	)

114 
	#MOUNT_ATTR__ATIME
 0x00000070

	)

115 
	#MOUNT_ATTR_RELATIME
 0x00000000

	)

116 
	#MOUNT_ATTR_NOATIME
 0x00000010

	)

117 
	#MOUNT_ATTR_STRICTATIME
 0x00000020

	)

118 
	#MOUNT_ATTR_NODIRATIME
 0x00000080

	)

	@/usr/include/linux/spi/spidev.h

23 #i‚de‡
SPIDEV_H


24 
	#SPIDEV_H


	)

26 
	~<löux/ty≥s.h
>

27 
	~<löux/io˘l.h
>

33 
	#SPI_CPHA
 0x01

	)

34 
	#SPI_CPOL
 0x02

	)

36 
	#SPI_MODE_0
 (0|0)

	)

37 
	#SPI_MODE_1
 (0|
SPI_CPHA
)

	)

38 
	#SPI_MODE_2
 (
SPI_CPOL
|0)

	)

39 
	#SPI_MODE_3
 (
SPI_CPOL
|
SPI_CPHA
)

	)

41 
	#SPI_CS_HIGH
 0x04

	)

42 
	#SPI_LSB_FIRST
 0x08

	)

43 
	#SPI_3WIRE
 0x10

	)

44 
	#SPI_LOOP
 0x20

	)

45 
	#SPI_NO_CS
 0x40

	)

46 
	#SPI_READY
 0x80

	)

47 
	#SPI_TX_DUAL
 0x100

	)

48 
	#SPI_TX_QUAD
 0x200

	)

49 
	#SPI_RX_DUAL
 0x400

	)

50 
	#SPI_RX_QUAD
 0x800

	)

56 
	#SPI_IOC_MAGIC
 'k'

	)

94 
	s•i_ioc_å™s„r
 {

95 
__u64
 
	mtx_buf
;

96 
__u64
 
	mrx_buf
;

98 
__u32
 
	mÀn
;

99 
__u32
 
	m•ìd_hz
;

101 
__u16
 
	mdñay_u£cs
;

102 
__u8
 
	mbôs_≥r_w‹d
;

103 
__u8
 
	mcs_ch™ge
;

104 
__u8
 
	mtx_nbôs
;

105 
__u8
 
	mrx_nbôs
;

106 
__u8
 
	mw‹d_dñay_u£cs
;

107 
__u8
 
	m∑d
;

119 
	#SPI_MSGSIZE
(
N
) \

120 ((((
N
)*( (
•i_ioc_å™s„r
))Ë< (1 << 
_IOC_SIZEBITS
)) \

121 ? ((
N
)*( (
•i_ioc_å™s„r
))Ë: 0)

	)

122 
	#SPI_IOC_MESSAGE
(
N
Ë
	`_IOW
(
SPI_IOC_MAGIC
, 0, [
	`SPI_MSGSIZE
(N)])

	)

126 
	#SPI_IOC_RD_MODE
 
	`_IOR
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

127 
	#SPI_IOC_WR_MODE
 
	`_IOW
(
SPI_IOC_MAGIC
, 1, 
__u8
)

	)

130 
	#SPI_IOC_RD_LSB_FIRST
 
	`_IOR
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

131 
	#SPI_IOC_WR_LSB_FIRST
 
	`_IOW
(
SPI_IOC_MAGIC
, 2, 
__u8
)

	)

134 
	#SPI_IOC_RD_BITS_PER_WORD
 
	`_IOR
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

135 
	#SPI_IOC_WR_BITS_PER_WORD
 
	`_IOW
(
SPI_IOC_MAGIC
, 3, 
__u8
)

	)

138 
	#SPI_IOC_RD_MAX_SPEED_HZ
 
	`_IOR
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

139 
	#SPI_IOC_WR_MAX_SPEED_HZ
 
	`_IOW
(
SPI_IOC_MAGIC
, 4, 
__u32
)

	)

142 
	#SPI_IOC_RD_MODE32
 
	`_IOR
(
SPI_IOC_MAGIC
, 5, 
__u32
)

	)

143 
	#SPI_IOC_WR_MODE32
 
	`_IOW
(
SPI_IOC_MAGIC
, 5, 
__u32
)

	)

	@/usr/include/linux/string.h

2 #i‚de‡
_LINUX_STRING_H_


3 
	#_LINUX_STRING_H_


	)

7 
	~<°rög.h
>

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 328748

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/linux/fscrypt.h

8 #i‚de‡
_LINUX_FSCRYPT_H


9 
	#_LINUX_FSCRYPT_H


	)

11 
	~<löux/ty≥s.h
>

14 
	#FSCRYPT_POLICY_FLAGS_PAD_4
 0x00

	)

15 
	#FSCRYPT_POLICY_FLAGS_PAD_8
 0x01

	)

16 
	#FSCRYPT_POLICY_FLAGS_PAD_16
 0x02

	)

17 
	#FSCRYPT_POLICY_FLAGS_PAD_32
 0x03

	)

18 
	#FSCRYPT_POLICY_FLAGS_PAD_MASK
 0x03

	)

19 
	#FSCRYPT_POLICY_FLAG_DIRECT_KEY
 0x04

	)

20 
	#FSCRYPT_POLICY_FLAGS_VALID
 0x07

	)

23 
	#FSCRYPT_MODE_AES_256_XTS
 1

	)

24 
	#FSCRYPT_MODE_AES_256_CTS
 4

	)

25 
	#FSCRYPT_MODE_AES_128_CBC
 5

	)

26 
	#FSCRYPT_MODE_AES_128_CTS
 6

	)

27 
	#FSCRYPT_MODE_ADIANTUM
 9

	)

28 
	#__FSCRYPT_MODE_MAX
 9

	)

36 
	#FSCRYPT_POLICY_V1
 0

	)

37 
	#FSCRYPT_KEY_DESCRIPTOR_SIZE
 8

	)

38 
	sfs¸y±_pﬁicy_v1
 {

39 
__u8
 
	mvîsi⁄
;

40 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

41 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

42 
__u8
 
	mÊags
;

43 
__u8
 
	mma°î_key_des¸ùt‹
[
FSCRYPT_KEY_DESCRIPTOR_SIZE
];

45 
	#fs¸y±_pﬁicy
 
fs¸y±_pﬁicy_v1


	)

51 
	#FSCRYPT_KEY_DESC_PREFIX
 "fs¸y±:"

	)

52 
	#FSCRYPT_KEY_DESC_PREFIX_SIZE
 8

	)

53 
	#FSCRYPT_MAX_KEY_SIZE
 64

	)

54 
	sfs¸y±_key
 {

55 
__u32
 
	mmode
;

56 
__u8
 
	møw
[
FSCRYPT_MAX_KEY_SIZE
];

57 
__u32
 
	msize
;

63 
	#FSCRYPT_POLICY_V2
 2

	)

64 
	#FSCRYPT_KEY_IDENTIFIER_SIZE
 16

	)

65 
	sfs¸y±_pﬁicy_v2
 {

66 
__u8
 
	mvîsi⁄
;

67 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

68 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

69 
__u8
 
	mÊags
;

70 
__u8
 
	m__ª£rved
[4];

71 
__u8
 
	mma°î_key_idítifõr
[
FSCRYPT_KEY_IDENTIFIER_SIZE
];

75 
	sfs¸y±_gë_pﬁicy_ex_¨g
 {

76 
__u64
 
	mpﬁicy_size
;

78 
__u8
 
	mvîsi⁄
;

79 
fs¸y±_pﬁicy_v1
 
	mv1
;

80 
fs¸y±_pﬁicy_v2
 
	mv2
;

81 } 
	mpﬁicy
;

88 
	#FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR
 1

	)

95 
	#FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER
 2

	)

101 
	sfs¸y±_key_•ecifõr
 {

102 
__u32
 
	mty≥
;

103 
__u32
 
	m__ª£rved
;

105 
__u8
 
	m__ª£rved
[32];

106 
__u8
 
	mdes¸ùt‹
[
FSCRYPT_KEY_DESCRIPTOR_SIZE
];

107 
__u8
 
	midítifõr
[
FSCRYPT_KEY_IDENTIFIER_SIZE
];

108 } 
	mu
;

112 
	sfs¸y±_add_key_¨g
 {

113 
fs¸y±_key_•ecifõr
 
	mkey_•ec
;

114 
__u32
 
	møw_size
;

115 
__u32
 
	m__ª£rved
[9];

116 
__u8
 
	møw
[];

120 
	sfs¸y±_ªmove_key_¨g
 {

121 
fs¸y±_key_•ecifõr
 
	mkey_•ec
;

122 
	#FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY
 0x00000001

	)

123 
	#FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS
 0x00000002

	)

124 
__u32
 
	mªmovÆ_°©us_Êags
;

125 
__u32
 
	m__ª£rved
[5];

129 
	sfs¸y±_gë_key_°©us_¨g
 {

131 
fs¸y±_key_•ecifõr
 
	mkey_•ec
;

132 
__u32
 
	m__ª£rved
[6];

135 
	#FSCRYPT_KEY_STATUS_ABSENT
 1

	)

136 
	#FSCRYPT_KEY_STATUS_PRESENT
 2

	)

137 
	#FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED
 3

	)

138 
__u32
 
	m°©us
;

139 
	#FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF
 0x00000001

	)

140 
__u32
 
	m°©us_Êags
;

141 
__u32
 
	mu£r_cou¡
;

142 
__u32
 
	m__out_ª£rved
[13];

145 
	#FS_IOC_SET_ENCRYPTION_POLICY
 
	`_IOR
('f', 19, 
fs¸y±_pﬁicy
)

	)

146 
	#FS_IOC_GET_ENCRYPTION_PWSALT
 
	`_IOW
('f', 20, 
__u8
[16])

	)

147 
	#FS_IOC_GET_ENCRYPTION_POLICY
 
	`_IOW
('f', 21, 
fs¸y±_pﬁicy
)

	)

148 
	#FS_IOC_GET_ENCRYPTION_POLICY_EX
 
	`_IOWR
('f', 22, 
__u8
[9]Ë

	)

149 
	#FS_IOC_ADD_ENCRYPTION_KEY
 
	`_IOWR
('f', 23, 
fs¸y±_add_key_¨g
)

	)

150 
	#FS_IOC_REMOVE_ENCRYPTION_KEY
 
	`_IOWR
('f', 24, 
fs¸y±_ªmove_key_¨g
)

	)

151 
	#FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS
 
	`_IOWR
('f', 25, 
fs¸y±_ªmove_key_¨g
)

	)

152 
	#FS_IOC_GET_ENCRYPTION_KEY_STATUS
 
	`_IOWR
('f', 26, 
fs¸y±_gë_key_°©us_¨g
)

	)

157 
	#FS_KEY_DESCRIPTOR_SIZE
 
FSCRYPT_KEY_DESCRIPTOR_SIZE


	)

158 
	#FS_POLICY_FLAGS_PAD_4
 
FSCRYPT_POLICY_FLAGS_PAD_4


	)

159 
	#FS_POLICY_FLAGS_PAD_8
 
FSCRYPT_POLICY_FLAGS_PAD_8


	)

160 
	#FS_POLICY_FLAGS_PAD_16
 
FSCRYPT_POLICY_FLAGS_PAD_16


	)

161 
	#FS_POLICY_FLAGS_PAD_32
 
FSCRYPT_POLICY_FLAGS_PAD_32


	)

162 
	#FS_POLICY_FLAGS_PAD_MASK
 
FSCRYPT_POLICY_FLAGS_PAD_MASK


	)

163 
	#FS_POLICY_FLAG_DIRECT_KEY
 
FSCRYPT_POLICY_FLAG_DIRECT_KEY


	)

164 
	#FS_POLICY_FLAGS_VALID
 
FSCRYPT_POLICY_FLAGS_VALID


	)

165 
	#FS_ENCRYPTION_MODE_INVALID
 0

	)

166 
	#FS_ENCRYPTION_MODE_AES_256_XTS
 
FSCRYPT_MODE_AES_256_XTS


	)

167 
	#FS_ENCRYPTION_MODE_AES_256_GCM
 2

	)

168 
	#FS_ENCRYPTION_MODE_AES_256_CBC
 3

	)

169 
	#FS_ENCRYPTION_MODE_AES_256_CTS
 
FSCRYPT_MODE_AES_256_CTS


	)

170 
	#FS_ENCRYPTION_MODE_AES_128_CBC
 
FSCRYPT_MODE_AES_128_CBC


	)

171 
	#FS_ENCRYPTION_MODE_AES_128_CTS
 
FSCRYPT_MODE_AES_128_CTS


	)

172 
	#FS_ENCRYPTION_MODE_SPECK128_256_XTS
 7

	)

173 
	#FS_ENCRYPTION_MODE_SPECK128_256_CTS
 8

	)

174 
	#FS_ENCRYPTION_MODE_ADIANTUM
 
FSCRYPT_MODE_ADIANTUM


	)

175 
	#FS_KEY_DESC_PREFIX
 
FSCRYPT_KEY_DESC_PREFIX


	)

176 
	#FS_KEY_DESC_PREFIX_SIZE
 
FSCRYPT_KEY_DESC_PREFIX_SIZE


	)

177 
	#FS_MAX_KEY_SIZE
 
FSCRYPT_MAX_KEY_SIZE


	)

	@/usr/include/linux/ioctl.h

2 #i‚de‡
_LINUX_IOCTL_H


3 
	#_LINUX_IOCTL_H


	)

5 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

2 #i‚de‡
_LINUX_SYSINFO_H


3 
	#_LINUX_SYSINFO_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#SI_LOAD_SHIFT
 16

	)

8 
	ssysöfo
 {

9 
__kî√l_l⁄g_t
 
	mu±ime
;

10 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

11 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

12 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

13 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

14 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

15 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

16 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

17 
__u16
 
	m¥ocs
;

18 
__u16
 
	m∑d
;

19 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

20 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

21 
__u32
 
	mmem_unô
;

22 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

112 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

122 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

125 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

126 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

138 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

148 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
 
	`__n⁄nuŒ
 ((2));

151 #ifde‡
__USE_XOPEN2K8


153 
	~<bôs/ty≥s/loˇÀ_t.h
>

156 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

160 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

161 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

164 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

165 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

167 *
	$°rdup
 (c⁄° *
__s
)

168 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

174 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

175 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


181 
	#°rdu∑
(
s
) \

182 (
__exãnsi⁄__
 \

184 c⁄° *
__ﬁd
 = (
s
); \

185 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

186 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

187 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

188 
	}
}))

	)

191 
	#°∫du∑
(
s
, 
n
) \

192 (
__exãnsi⁄__
 \

194 c⁄° *
__ﬁd
 = (
s
); \

195 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

196 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

197 
__√w
[
__Àn
] = '\0'; \

198 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

199 }))

	)

203 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


206 *
°rchr
 (*
__s
, 
__c
)

207 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

208 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

209 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

211 #ifde‡
__OPTIMIZE__


212 
__exã∫_Æways_ölöe
 *

213 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


215  
__buûtö_°rchr
 (
__s
, 
__c
);

218 
__exã∫_Æways_ölöe
 const *

219 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

226 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


233 *
	`°ºchr
 (*
__s
, 
__c
)

234 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__OPTIMIZE__


239 
__exã∫_Æways_ölöe
 *

240 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


242  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

245 
__exã∫_Æways_ölöe
 const *

246 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
	}
}

253 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

254 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

257 #ifde‡
__USE_GNU


260 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


261 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

262 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

267 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

277 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


283 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

284 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__OPTIMIZE__


289 
__exã∫_Æways_ölöe
 *

290 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


292  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

295 
__exã∫_Æways_ölöe
 const *

296 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


298  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

301 
	}
}

303 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


310 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

311 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

312 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

313 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__OPTIMIZE__


316 
__exã∫_Æways_ölöe
 *

317 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


319  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

322 
__exã∫_Æways_ölöe
 const *

323 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


325  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

328 
	}
}

330 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

337 
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

342 c⁄° *
__ª°ri˘
 
__dñim
,

343 **
__ª°ri˘
 
__ßve_±r
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

345 #ifde‡
__USE_POSIX


346 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

351 #ifde‡
__USE_GNU


353 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


354 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

355 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

357 c⁄° *
__√edÀ
)

358 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

361 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 #ifde‡
__USE_GNU


369 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

370 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

371 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

375 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

376 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

379 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

385 
size_t
 
	$°æí
 (c⁄° *
__s
)

386 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

388 #ifdef 
__USE_XOPEN2K8


391 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

398 #ifde‡
__USE_XOPEN2K


406 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

411 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

412 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

414 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

416 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

421 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

426 #ifde‡
__USE_XOPEN2K8


428 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

431 #ifde‡
__USE_MISC


432 
	~<°rögs.h
>

436 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

440 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

441 c⁄° *
__ª°ri˘
 
__dñim
)

442 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

445 #ifdef 
__USE_XOPEN2K8


447 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

450 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

453 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

458 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

459 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

461 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

462 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifdef 
__USE_GNU


467 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

468 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

471 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

474 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

476 #i‚de‡
ba£«me


481 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


482 "C++" *
	$ba£«me
 (*
__fûíame
)

483 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

484 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

485 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

487 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

492 #i‡
	`__GNUC_PREREQ
 (3,4)

493 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


495 
	~<bôs/°rög_f‹tifõd.h
>

499 
__END_DECLS


	@/usr/include/linux/stddef.h

4 #i‚de‡
__Æways_ölöe


5 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

120 #unde‡
__USE_ISOC11


121 #unde‡
__USE_ISOC99


122 #unde‡
__USE_ISOC95


123 #unde‡
__USE_ISOCXX11


124 #unde‡
__USE_POSIX


125 #unde‡
__USE_POSIX2


126 #unde‡
__USE_POSIX199309


127 #unde‡
__USE_POSIX199506


128 #unde‡
__USE_XOPEN


129 #unde‡
__USE_XOPEN_EXTENDED


130 #unde‡
__USE_UNIX98


131 #unde‡
__USE_XOPEN2K


132 #unde‡
__USE_XOPEN2KXSI


133 #unde‡
__USE_XOPEN2K8


134 #unde‡
__USE_XOPEN2K8XSI


135 #unde‡
__USE_LARGEFILE


136 #unde‡
__USE_LARGEFILE64


137 #unde‡
__USE_FILE_OFFSET64


138 #unde‡
__USE_MISC


139 #unde‡
__USE_ATFILE


140 #unde‡
__USE_GNU


141 #unde‡
__USE_FORTIFY_LEVEL


142 #unde‡
__KERNEL_STRICT_NAMES


143 #unde‡
__GLIBC_USE_ISOC2X


144 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


149 #i‚de‡
_LOOSE_KERNEL_NAMES


150 
	#__KERNEL_STRICT_NAMES


	)

160 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


161 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

162 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

164 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

171 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

173 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

175 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

179 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

185 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

186 && !
deföed
 
	g_DEFAULT_SOURCE


188 #unde‡
_DEFAULT_SOURCE


189 
	#_DEFAULT_SOURCE
 1

	)

193 #ifde‡
_GNU_SOURCE


194 #unde‡
_ISOC95_SOURCE


195 
	#_ISOC95_SOURCE
 1

	)

196 #unde‡
_ISOC99_SOURCE


197 
	#_ISOC99_SOURCE
 1

	)

198 #unde‡
_ISOC11_SOURCE


199 
	#_ISOC11_SOURCE
 1

	)

200 #unde‡
_ISOC2X_SOURCE


201 
	#_ISOC2X_SOURCE
 1

	)

202 #unde‡
_POSIX_SOURCE


203 
	#_POSIX_SOURCE
 1

	)

204 #unde‡
_POSIX_C_SOURCE


205 
	#_POSIX_C_SOURCE
 200809L

	)

206 #unde‡
_XOPEN_SOURCE


207 
	#_XOPEN_SOURCE
 700

	)

208 #unde‡
_XOPEN_SOURCE_EXTENDED


209 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #unde‡
_LARGEFILE64_SOURCE


211 
	#_LARGEFILE64_SOURCE
 1

	)

212 #unde‡
_DEFAULT_SOURCE


213 
	#_DEFAULT_SOURCE
 1

	)

214 #unde‡
_ATFILE_SOURCE


215 
	#_ATFILE_SOURCE
 1

	)

220 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

221 || (!
deföed
 
	g__STRICT_ANSI__
 \

222 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

223 && !
deföed
 
	g_ISOC2X_SOURCE
 \

224 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

225 && !
deföed
 
	g_XOPEN_SOURCE
))

226 #unde‡
_DEFAULT_SOURCE


227 
	#_DEFAULT_SOURCE
 1

	)

231 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

232 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 
	#__GLIBC_USE_ISOC2X
 1

	)

235 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

240 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 
	#__USE_ISOC11
 1

	)

245 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

246 || 
deföed
 
_ISOC2X_SOURCE
 \

247 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 
	#__USE_ISOC99
 1

	)

252 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

253 || 
deföed
 
_ISOC2X_SOURCE
 \

254 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 
	#__USE_ISOC95
 1

	)

258 #ifde‡
__˝lu•lus


260 #i‡
__˝lu•lus
 >= 201703L

261 
	#__USE_ISOC11
 1

	)

265 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


266 
	#__USE_ISOCXX11
 1

	)

267 
	#__USE_ISOC99
 1

	)

274 #ifde‡
_DEFAULT_SOURCE


275 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


276 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #unde‡
_POSIX_SOURCE


279 
	#_POSIX_SOURCE
 1

	)

280 #unde‡
_POSIX_C_SOURCE


281 
	#_POSIX_C_SOURCE
 200809L

	)

284 #i‡((!
deföed
 
__STRICT_ANSI__
 \

285 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

287 
	#_POSIX_SOURCE
 1

	)

288 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 
	#_POSIX_C_SOURCE
 2

	)

290 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 
	#_POSIX_C_SOURCE
 199506L

	)

292 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 
	#_POSIX_C_SOURCE
 200112L

	)

295 
	#_POSIX_C_SOURCE
 200809L

	)

297 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

308 
	#_POSIX_SOURCE
 1

	)

309 #unde‡
_POSIX_C_SOURCE


310 
	#_POSIX_C_SOURCE
 199506L

	)

313 #i‡(
deföed
 
_POSIX_SOURCE
 \

314 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
deföed
 
_XOPEN_SOURCE
)

316 
	#__USE_POSIX
 1

	)

319 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


320 
	#__USE_POSIX2
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 
	#__USE_POSIX199309
 1

	)

327 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 
	#__USE_POSIX199506
 1

	)

331 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 
	#__USE_XOPEN2K
 1

	)

333 #unde‡
__USE_ISOC95


334 
	#__USE_ISOC95
 1

	)

335 #unde‡
__USE_ISOC99


336 
	#__USE_ISOC99
 1

	)

339 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 
	#__USE_XOPEN2K8
 1

	)

341 #unde‡
_ATFILE_SOURCE


342 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 
	#__USE_XOPEN
 1

	)

347 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

348 
	#__USE_XOPEN_EXTENDED
 1

	)

349 
	#__USE_UNIX98
 1

	)

350 #unde‡
_LARGEFILE_SOURCE


351 
	#_LARGEFILE_SOURCE
 1

	)

352 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

353 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

354 
	#__USE_XOPEN2K8
 1

	)

355 
	#__USE_XOPEN2K8XSI
 1

	)

357 
	#__USE_XOPEN2K
 1

	)

358 
	#__USE_XOPEN2KXSI
 1

	)

359 #unde‡
__USE_ISOC95


360 
	#__USE_ISOC95
 1

	)

361 #unde‡
__USE_ISOC99


362 
	#__USE_ISOC99
 1

	)

365 #ifde‡
_XOPEN_SOURCE_EXTENDED


366 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifde‡
_LARGEFILE_SOURCE


372 
	#__USE_LARGEFILE
 1

	)

375 #ifde‡
_LARGEFILE64_SOURCE


376 
	#__USE_LARGEFILE64
 1

	)

379 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 
	#__USE_FILE_OFFSET64
 1

	)

383 #i‡
deföed
 
_DEFAULT_SOURCE


384 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 
	#__USE_GNU
 1

	)

395 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

396 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

397 #i‡
_FORTIFY_SOURCE
 > 1

398 
	#__USE_FORTIFY_LEVEL
 2

	)

400 
	#__USE_FORTIFY_LEVEL
 1

	)

403 
	#__USE_FORTIFY_LEVEL
 0

	)

410 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


411 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

413 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

428 #i‡(
deföed
 
__USE_GNU
 \

429 && (
deföed
 
	g__˝lu•lus
 \

430 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

431 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

432 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

434 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

439 
	~<°dc-¥edef.h
>

447 #unde‡
__GNU_LIBRARY__


448 
	#__GNU_LIBRARY__
 6

	)

452 
	#__GLIBC__
 2

	)

453 
	#__GLIBC_MINOR__
 31

	)

455 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

456 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

459 #i‚de‡
__ASSEMBLER__


460 #i‚de‡
_SYS_CDEFS_H


461 
	~<sys/cdefs.h
>

466 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


467 
	#__USE_LARGEFILE
 1

	)

468 
	#__USE_LARGEFILE64
 1

	)

474 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

475 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

476 && 
deföed
 
	g__exã∫_ölöe


477 
	#__USE_EXTERN_INLINES
 1

	)

485 
	~<gnu/°ubs.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
48
1011
cts_builtin_firmware.h
cts_charger_detect.c
cts_charger_detect.h
cts_config.h
cts_core.c
cts_core.h
cts_earjack_detect.c
cts_earjack_detect.h
cts_firmware.c
cts_firmware.h
cts_i2c_driver.c
cts_plat_qcom_config.h
cts_platform.c
cts_platform.h
cts_sfctrl.h
cts_sfctrlv2.c
cts_spi_flash.c
cts_spi_flash.h
cts_strerror.c
cts_strerror.h
cts_sysfs.c
cts_sysfs.h
cts_test.c
cts_test.h
cts_tool.c
/usr/include/linux/errno.h
/usr/include/linux/fb.h
/usr/include/linux/fs.h
/usr/include/linux/gpio.h
/usr/include/linux/i2c.h
/usr/include/linux/input.h
/usr/include/linux/kernel.h
/usr/include/linux/module.h
/usr/include/linux/mount.h
/usr/include/linux/spi/spidev.h
/usr/include/linux/string.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/linux/fscrypt.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/string.h
/usr/include/linux/stddef.h
/usr/include/strings.h
/usr/include/features.h
/usr/include/stdc-predef.h
